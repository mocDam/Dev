// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.sfo_importlauncher_4_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;

	//the import part of tLibraryLoad_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: SFO_ImportLauncher Purpose: Salesforce Colect interface launcher<br>
 * Description: Retrieve seasons / brands from Salesforce based on current date
Launch export sub-jobs <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class SFO_ImportLauncher implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Eans != null){
				
					this.setProperty("Eans", Eans.toString());
				
			}
			
			if(AccountIds != null){
				
					this.setProperty("AccountIds", AccountIds.toString());
				
			}
			
			if(SalesforceAccessToken != null){
				
					this.setProperty("SalesforceAccessToken", SalesforceAccessToken.toString());
				
			}
			
			if(SMTP_Password != null){
				
					this.setProperty("SMTP_Password", SMTP_Password.toString());
				
			}
			
			if(SMTP_Port != null){
				
					this.setProperty("SMTP_Port", SMTP_Port.toString());
				
			}
			
			if(SMTP_RecipientList != null){
				
					this.setProperty("SMTP_RecipientList", SMTP_RecipientList.toString());
				
			}
			
			if(SMTP_Sender != null){
				
					this.setProperty("SMTP_Sender", SMTP_Sender.toString());
				
			}
			
			if(SMTP_Server != null){
				
					this.setProperty("SMTP_Server", SMTP_Server.toString());
				
			}
			
			if(SMTP_User != null){
				
					this.setProperty("SMTP_User", SMTP_User.toString());
				
			}
			
			if(colectDirectoryArchive != null){
				
					this.setProperty("colectDirectoryArchive", colectDirectoryArchive.toString());
				
			}
			
			if(colectDirectoryOutput != null){
				
					this.setProperty("colectDirectoryOutput", colectDirectoryOutput.toString());
				
			}
			
			if(colectFTPDirOrder != null){
				
					this.setProperty("colectFTPDirOrder", colectFTPDirOrder.toString());
				
			}
			
			if(colectFTPDirOrderPdf != null){
				
					this.setProperty("colectFTPDirOrderPdf", colectFTPDirOrderPdf.toString());
				
			}
			
			if(colectFTPHost != null){
				
					this.setProperty("colectFTPHost", colectFTPHost.toString());
				
			}
			
			if(colectFTPPassword != null){
				
					this.setProperty("colectFTPPassword", colectFTPPassword.toString());
				
			}
			
			if(colectFTPUser != null){
				
					this.setProperty("colectFTPUser", colectFTPUser.toString());
				
			}
			
			if(colectOrderXmlFileFolder != null){
				
					this.setProperty("colectOrderXmlFileFolder", colectOrderXmlFileFolder.toString());
				
			}
			
			if(colectOrderXmlFileName != null){
				
					this.setProperty("colectOrderXmlFileName", colectOrderXmlFileName.toString());
				
			}
			
			if(SalesforceApiVersion != null){
				
					this.setProperty("SalesforceApiVersion", SalesforceApiVersion.toString());
				
			}
			
			if(SalesForceB2bPassword != null){
				
					this.setProperty("SalesForceB2bPassword", SalesForceB2bPassword.toString());
				
			}
			
			if(SalesForceB2bToken != null){
				
					this.setProperty("SalesForceB2bToken", SalesForceB2bToken.toString());
				
			}
			
			if(SalesForceB2bUsername != null){
				
					this.setProperty("SalesForceB2bUsername", SalesForceB2bUsername.toString());
				
			}
			
			if(SalesForceClientId != null){
				
					this.setProperty("SalesForceClientId", SalesForceClientId.toString());
				
			}
			
			if(SalesForceClientSecret != null){
				
					this.setProperty("SalesForceClientSecret", SalesForceClientSecret.toString());
				
			}
			
			if(SalesforceMyDomainUrl != null){
				
					this.setProperty("SalesforceMyDomainUrl", SalesforceMyDomainUrl.toString());
				
			}
			
			if(SalesForceOAuthToken != null){
				
					this.setProperty("SalesForceOAuthToken", SalesForceOAuthToken.toString());
				
			}
			
			if(SalesforceOrderLibraryId != null){
				
					this.setProperty("SalesforceOrderLibraryId", SalesforceOrderLibraryId.toString());
				
			}
			
			if(SalesforceOrderPdfFolderId != null){
				
					this.setProperty("SalesforceOrderPdfFolderId", SalesforceOrderPdfFolderId.toString());
				
			}
			
			if(SalesforceOrderRT != null){
				
					this.setProperty("SalesforceOrderRT", SalesforceOrderRT.toString());
				
			}
			
			if(SalesforceOrderXmlFolderId != null){
				
					this.setProperty("SalesforceOrderXmlFolderId", SalesforceOrderXmlFolderId.toString());
				
			}
			
			if(SalesForcePassword != null){
				
					this.setProperty("SalesForcePassword", SalesForcePassword.toString());
				
			}
			
			if(SalesForceToken != null){
				
					this.setProperty("SalesForceToken", SalesForceToken.toString());
				
			}
			
			if(SalesForceURL != null){
				
					this.setProperty("SalesForceURL", SalesForceURL.toString());
				
			}
			
			if(SalesForceUsername != null){
				
					this.setProperty("SalesForceUsername", SalesForceUsername.toString());
				
			}
			
			if(SQLSERVER_LOG_AdditionalParams != null){
				
					this.setProperty("SQLSERVER_LOG_AdditionalParams", SQLSERVER_LOG_AdditionalParams.toString());
				
			}
			
			if(SQLSERVER_LOG_Database != null){
				
					this.setProperty("SQLSERVER_LOG_Database", SQLSERVER_LOG_Database.toString());
				
			}
			
			if(SQLSERVER_LOG_Login != null){
				
					this.setProperty("SQLSERVER_LOG_Login", SQLSERVER_LOG_Login.toString());
				
			}
			
			if(SQLSERVER_LOG_Password != null){
				
					this.setProperty("SQLSERVER_LOG_Password", SQLSERVER_LOG_Password.toString());
				
			}
			
			if(SQLSERVER_LOG_Port != null){
				
					this.setProperty("SQLSERVER_LOG_Port", SQLSERVER_LOG_Port.toString());
				
			}
			
			if(SQLSERVER_LOG_Schema != null){
				
					this.setProperty("SQLSERVER_LOG_Schema", SQLSERVER_LOG_Schema.toString());
				
			}
			
			if(SQLSERVER_LOG_Server != null){
				
					this.setProperty("SQLSERVER_LOG_Server", SQLSERVER_LOG_Server.toString());
				
			}
			
			if(SQLSERVER_LOG_Table != null){
				
					this.setProperty("SQLSERVER_LOG_Table", SQLSERVER_LOG_Table.toString());
				
			}
			
		}

public String Eans;
public String getEans(){
	return this.Eans;
}
public String AccountIds;
public String getAccountIds(){
	return this.AccountIds;
}
public String SalesforceAccessToken;
public String getSalesforceAccessToken(){
	return this.SalesforceAccessToken;
}
public java.lang.String SMTP_Password;
public java.lang.String getSMTP_Password(){
	return this.SMTP_Password;
}
public String SMTP_Port;
public String getSMTP_Port(){
	return this.SMTP_Port;
}
public String SMTP_RecipientList;
public String getSMTP_RecipientList(){
	return this.SMTP_RecipientList;
}
public String SMTP_Sender;
public String getSMTP_Sender(){
	return this.SMTP_Sender;
}
public String SMTP_Server;
public String getSMTP_Server(){
	return this.SMTP_Server;
}
public String SMTP_User;
public String getSMTP_User(){
	return this.SMTP_User;
}
public String colectDirectoryArchive;
public String getColectDirectoryArchive(){
	return this.colectDirectoryArchive;
}
public String colectDirectoryOutput;
public String getColectDirectoryOutput(){
	return this.colectDirectoryOutput;
}
public String colectFTPDirOrder;
public String getColectFTPDirOrder(){
	return this.colectFTPDirOrder;
}
public String colectFTPDirOrderPdf;
public String getColectFTPDirOrderPdf(){
	return this.colectFTPDirOrderPdf;
}
public String colectFTPHost;
public String getColectFTPHost(){
	return this.colectFTPHost;
}
public java.lang.String colectFTPPassword;
public java.lang.String getColectFTPPassword(){
	return this.colectFTPPassword;
}
public String colectFTPUser;
public String getColectFTPUser(){
	return this.colectFTPUser;
}
public String colectOrderXmlFileFolder;
public String getColectOrderXmlFileFolder(){
	return this.colectOrderXmlFileFolder;
}
public String colectOrderXmlFileName;
public String getColectOrderXmlFileName(){
	return this.colectOrderXmlFileName;
}
public String SalesforceApiVersion;
public String getSalesforceApiVersion(){
	return this.SalesforceApiVersion;
}
public java.lang.String SalesForceB2bPassword;
public java.lang.String getSalesForceB2bPassword(){
	return this.SalesForceB2bPassword;
}
public java.lang.String SalesForceB2bToken;
public java.lang.String getSalesForceB2bToken(){
	return this.SalesForceB2bToken;
}
public String SalesForceB2bUsername;
public String getSalesForceB2bUsername(){
	return this.SalesForceB2bUsername;
}
public java.lang.String SalesForceClientId;
public java.lang.String getSalesForceClientId(){
	return this.SalesForceClientId;
}
public java.lang.String SalesForceClientSecret;
public java.lang.String getSalesForceClientSecret(){
	return this.SalesForceClientSecret;
}
public String SalesforceMyDomainUrl;
public String getSalesforceMyDomainUrl(){
	return this.SalesforceMyDomainUrl;
}
public String SalesForceOAuthToken;
public String getSalesForceOAuthToken(){
	return this.SalesForceOAuthToken;
}
public String SalesforceOrderLibraryId;
public String getSalesforceOrderLibraryId(){
	return this.SalesforceOrderLibraryId;
}
public String SalesforceOrderPdfFolderId;
public String getSalesforceOrderPdfFolderId(){
	return this.SalesforceOrderPdfFolderId;
}
public String SalesforceOrderRT;
public String getSalesforceOrderRT(){
	return this.SalesforceOrderRT;
}
public String SalesforceOrderXmlFolderId;
public String getSalesforceOrderXmlFolderId(){
	return this.SalesforceOrderXmlFolderId;
}
public java.lang.String SalesForcePassword;
public java.lang.String getSalesForcePassword(){
	return this.SalesForcePassword;
}
public java.lang.String SalesForceToken;
public java.lang.String getSalesForceToken(){
	return this.SalesForceToken;
}
public String SalesForceURL;
public String getSalesForceURL(){
	return this.SalesForceURL;
}
public String SalesForceUsername;
public String getSalesForceUsername(){
	return this.SalesForceUsername;
}
public String SQLSERVER_LOG_AdditionalParams;
public String getSQLSERVER_LOG_AdditionalParams(){
	return this.SQLSERVER_LOG_AdditionalParams;
}
public String SQLSERVER_LOG_Database;
public String getSQLSERVER_LOG_Database(){
	return this.SQLSERVER_LOG_Database;
}
public String SQLSERVER_LOG_Login;
public String getSQLSERVER_LOG_Login(){
	return this.SQLSERVER_LOG_Login;
}
public java.lang.String SQLSERVER_LOG_Password;
public java.lang.String getSQLSERVER_LOG_Password(){
	return this.SQLSERVER_LOG_Password;
}
public String SQLSERVER_LOG_Port;
public String getSQLSERVER_LOG_Port(){
	return this.SQLSERVER_LOG_Port;
}
public String SQLSERVER_LOG_Schema;
public String getSQLSERVER_LOG_Schema(){
	return this.SQLSERVER_LOG_Schema;
}
public String SQLSERVER_LOG_Server;
public String getSQLSERVER_LOG_Server(){
	return this.SQLSERVER_LOG_Server;
}
public String SQLSERVER_LOG_Table;
public String getSQLSERVER_LOG_Table(){
	return this.SQLSERVER_LOG_Table;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "4.2";
	private final String jobName = "SFO_ImportLauncher";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				SFO_ImportLauncher.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(SFO_ImportLauncher.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPGet_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPGet_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLibraryLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_1_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_1_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_1_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tRunJob_3Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tWarn_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLibraryLoad_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class rowTokenStruct implements routines.system.IPersistableRow<rowTokenStruct> {
    final static byte[] commonByteArrayLock_DEV_SFO_ImportLauncher = new byte[0];
    static byte[] commonByteArray_DEV_SFO_ImportLauncher = new byte[0];

	
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_SFO_ImportLauncher.length) {
				if(length < 1024 && commonByteArray_DEV_SFO_ImportLauncher.length == 0) {
   					commonByteArray_DEV_SFO_ImportLauncher = new byte[1024];
				} else {
   					commonByteArray_DEV_SFO_ImportLauncher = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_SFO_ImportLauncher, 0, length);
			strReturn = new String(commonByteArray_DEV_SFO_ImportLauncher, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_SFO_ImportLauncher) {

        	try {

        		int length = 0;
		
					this.access_token = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.access_token,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("access_token="+access_token);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rowTokenStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		rowTokenStruct rowToken = new rowTokenStruct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"rowToken");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Full");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = context.SalesforceMyDomainUrl;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param SalesforceMyDomainUrl=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param SalesforceMyDomainUrl=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("SalesforceMyDomainUrl", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.SalesForceClientId;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param SalesForceClientId=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param SalesForceClientId=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("SalesForceClientId", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.SalesForceClientSecret;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param SalesForceClientSecret=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param SalesForceClientSecret=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("SalesForceClientSecret", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.SalesForceB2bUsername;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param SalesForceB2bUsername=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param SalesForceB2bUsername=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("SalesForceB2bUsername", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.SalesForceB2bPassword;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param SalesForceB2bPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param SalesForceB2bPassword=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("SalesForceB2bPassword", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.SalesForceB2bToken;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param SalesForceB2bToken=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param SalesForceB2bToken=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("SalesForceB2bToken", obj_tRunJob_2);
	
	
		dev.sfo_getsalesforcetoken_4_0.SFO_GetSalesforceToken childJob_tRunJob_2 = new dev.sfo_getsalesforcetoken_4_0.SFO_GetSalesforceToken();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
					java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
				}
			
	  	
			for (String[] item_tRunJob_2 : childReturn_tRunJob_2) { 
				if(childJob_tRunJob_2.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_2.length){				
			           		
				           		rowToken.access_token = item_tRunJob_2[0];
			           		
		           		}else{
			           		rowToken.access_token = null;
		           		}
					
				}
		

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"rowToken");
					}
					

    System.out.println(rowToken.access_token);
context.SalesForceOAuthToken = rowToken.access_token;


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"rowToken");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tWarn_3Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO","","SFO_ImportLauncher -- FTP retrieve files start","", "");
	globalMap.put("tWarn_3_WARN_MESSAGES", "SFO_ImportLauncher -- FTP retrieve files start"); 
	globalMap.put("tWarn_3_WARN_PRIORITY", 3);
	globalMap.put("tWarn_3_WARN_CODE", 3);
	
} catch (Exception e_tWarn_3) {
	logIgnoredError(String.format("tWarn_3 - tWarn failed to log message due to internal error: %s", e_tWarn_3), e_tWarn_3);
}


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	
	/**
	 * [tWarn_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_end ] stop
 */
	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFTPConnection_1Process(globalMap);



/**
 * [tWarn_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}
	

public void tFTPConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPConnection_1", false);
		start_Hash.put("tFTPConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPConnection_1";

	
		int tos_count_tFTPConnection_1 = 0;
		

 
int connectionTimeout_tFTPConnection_1 = Integer.valueOf(0);
	class MyUserInfo implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
	 
      		String decryptedPassphrase_tFTPConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[/c1EaNEUdkhJcWjNd4jwgrfDuiO4xm85M6NU8LqjMpd9PQ==]");

		String passphrase_tFTPConnection_1 = decryptedPassphrase_tFTPConnection_1;

		public String getPassphrase() { return passphrase_tFTPConnection_1; }

		public String getPassword() { return null; } 

		public boolean promptPassword(String arg0) { return true; } 

		public boolean promptPassphrase(String arg0) { return true; } 

		public boolean promptYesNo(String arg0) { return true; } 

		public void showMessage(String arg0) { } 

		public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
		boolean[] echo) {
		
    	 
    	
    	
	final String decryptedPassword_tFTPConnection_1 = context.colectFTPPassword; 
    	
			String[] password_tFTPConnection_1 = {decryptedPassword_tFTPConnection_1};
			return password_tFTPConnection_1;
		}
	};
	final com.jcraft.jsch.UserInfo defaultUserInfo_tFTPConnection_1 = new MyUserInfo();
	
	
	
	

boolean retry_tFTPConnection_1 = false;
int retry_count_tFTPConnection_1 = 0;
int retry_max_tFTPConnection_1 = 5;

com.jcraft.jsch.Session session_tFTPConnection_1 = null;
com.jcraft.jsch.Channel channel_tFTPConnection_1 = null;
do {
    retry_tFTPConnection_1 = false;

    com.jcraft.jsch.JSch jsch_tFTPConnection_1 = new com.jcraft.jsch.JSch(); 


    session_tFTPConnection_1 = jsch_tFTPConnection_1.getSession(context.colectFTPUser, context.colectFTPHost, 22);
    session_tFTPConnection_1.setConfig("PreferredAuthentications", "publickey,password,keyboard-interactive,gssapi-with-mic");
 

	final String decryptedPassword_tFTPConnection_1 = context.colectFTPPassword; 

        session_tFTPConnection_1.setPassword(decryptedPassword_tFTPConnection_1); 

    session_tFTPConnection_1.setUserInfo(defaultUserInfo_tFTPConnection_1); 
        if(("true").equals(System.getProperty("http.proxySet"))) {
            com.jcraft.jsch.ProxyHTTP proxy_tFTPConnection_1 = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
            if(!"".equals(System.getProperty("http.proxyUser"))){
                proxy_tFTPConnection_1.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
            }
            session_tFTPConnection_1.setProxy(proxy_tFTPConnection_1);
        } else if ("local".equals(System.getProperty("http.proxySet"))) {
            String uriString = context.colectFTPHost + ":" + 22;
            java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString(uriString);

            if (!proxyToUse.equals(java.net.Proxy.NO_PROXY)) {
                java.net.InetSocketAddress proxyAddress = (java.net.InetSocketAddress) proxyToUse.address();
                String proxyHost = proxyAddress.getAddress().getHostAddress();
                int proxyPort = proxyAddress.getPort();

                com.jcraft.jsch.ProxyHTTP proxy_tFTPConnection_1 = new com.jcraft.jsch.ProxyHTTP(proxyHost, proxyPort);

                org.talend.proxy.ProxyCreds proxyCreds = org.talend.proxy.TalendProxyAuthenticator.getInstance().getCredsForProxyURI(proxyHost + ":" + proxyPort);
                if (proxyCreds != null) {
                    proxy_tFTPConnection_1.setUserPasswd(proxyCreds.getUser(), proxyCreds.getPass());
                }

                session_tFTPConnection_1.setProxy(proxy_tFTPConnection_1);
            }
        }


    channel_tFTPConnection_1 = null;
    try {
        if (connectionTimeout_tFTPConnection_1 > 0) {
            session_tFTPConnection_1.connect(connectionTimeout_tFTPConnection_1);
        } else {
            session_tFTPConnection_1.connect();
        }
        channel_tFTPConnection_1 = session_tFTPConnection_1.openChannel("sftp");
        if (connectionTimeout_tFTPConnection_1 > 0) {
            channel_tFTPConnection_1.connect(connectionTimeout_tFTPConnection_1);
        } else {
            channel_tFTPConnection_1.connect();
        }
    } catch (com.jcraft.jsch.JSchException e_tFTPConnection_1) {
        try {
            if(channel_tFTPConnection_1!=null) {
                channel_tFTPConnection_1.disconnect();
            }

            if(session_tFTPConnection_1!=null) {
                session_tFTPConnection_1.disconnect();
            }
        } catch(java.lang.Exception ce_tFTPConnection_1) {
        }

        String message_tFTPConnection_1 = new TalendException(null, null, null).getExceptionCauseMessage(e_tFTPConnection_1);
        if(message_tFTPConnection_1.contains("Signature length not correct") || message_tFTPConnection_1.contains("connection is closed by foreign host")) {
            retry_tFTPConnection_1 = true;
            retry_count_tFTPConnection_1++;
        } else {
            throw e_tFTPConnection_1;
        }
    }
} while(retry_tFTPConnection_1 && (retry_count_tFTPConnection_1 < retry_max_tFTPConnection_1));

com.jcraft.jsch.ChannelSftp c_tFTPConnection_1 = (com.jcraft.jsch.ChannelSftp)channel_tFTPConnection_1;
	
	
	
	globalMap.put("conn_tFTPConnection_1", c_tFTPConnection_1);

 



/**
 * [tFTPConnection_1 begin ] stop
 */
	
	/**
	 * [tFTPConnection_1 main ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 


	tos_count_tFTPConnection_1++;

/**
 * [tFTPConnection_1 main ] stop
 */
	
	/**
	 * [tFTPConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPConnection_1 end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 

ok_Hash.put("tFTPConnection_1", true);
end_Hash.put("tFTPConnection_1", System.currentTimeMillis());




/**
 * [tFTPConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFTPConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFTPFileList_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFTPGet_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFTPFileList_1", false);
		start_Hash.put("tFTPFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPFileList_1";

	
		int tos_count_tFTPFileList_1 = 0;
		

 
	java.util.List<String> maskList_tFTPFileList_1 = new java.util.ArrayList<String>();
 
		maskList_tFTPFileList_1.add("*-*.xml"); 	
		com.jcraft.jsch.ChannelSftp c_tFTPFileList_1 = (com.jcraft.jsch.ChannelSftp)globalMap.get("conn_tFTPConnection_1");
		
		if(c_tFTPFileList_1.getHome()!=null && !c_tFTPFileList_1.getHome().equals(c_tFTPFileList_1.pwd())){
	  		c_tFTPFileList_1.cd(c_tFTPFileList_1.getHome());
	  	}
	String remotedir_tFTPFileList_1 = context.colectFTPDirOrder.replaceAll("\\\\", "/");
	java.util.Vector<com.jcraft.jsch.ChannelSftp.LsEntry> vector_tFTPFileList_1 = c_tFTPFileList_1.ls(remotedir_tFTPFileList_1);
	com.jcraft.jsch.ChannelSftp.LsEntry[] sftpFiles_tFTPFileList_1 = vector_tFTPFileList_1.toArray(new com.jcraft.jsch.ChannelSftp.LsEntry[0]);
	int nb_file_tFTPFileList_1 = 0;  
	List<String> fileListTemp_tFTPFileList_1 = new java.util.ArrayList<String>();

	for (String filemask_tFTPFileList_1 : maskList_tFTPFileList_1) {
		java.util.regex.Pattern fileNamePattern_tFTPFileList_1 = java.util.regex.Pattern.compile(filemask_tFTPFileList_1.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*"));
	
		for (com.jcraft.jsch.ChannelSftp.LsEntry filemaskTemp_tFTPFileList_1 : sftpFiles_tFTPFileList_1) {
			String fileName_tFTPFileList_1 = filemaskTemp_tFTPFileList_1.getFilename();
			if ((".").equals(fileName_tFTPFileList_1) || ("..").equals(fileName_tFTPFileList_1)) {
				continue;
			}
			if (fileNamePattern_tFTPFileList_1.matcher(fileName_tFTPFileList_1).matches()) {
				fileListTemp_tFTPFileList_1.add(fileName_tFTPFileList_1);
			}
		}
	}

	
	for (int counter_tFTPFileList_1 = 0; counter_tFTPFileList_1 < fileListTemp_tFTPFileList_1.size(); counter_tFTPFileList_1++) {
		String currentFileName_tFTPFileList_1 = fileListTemp_tFTPFileList_1.get(counter_tFTPFileList_1);
		String currentFilePath_tFTPFileList_1 = remotedir_tFTPFileList_1;
		if(!remotedir_tFTPFileList_1.endsWith("/")&&!remotedir_tFTPFileList_1.endsWith("\\")){
			currentFilePath_tFTPFileList_1 += "/";
		}
		currentFilePath_tFTPFileList_1 += currentFileName_tFTPFileList_1;
		
			globalMap.put("tFTPFileList_1_CURRENT_FILE", currentFileName_tFTPFileList_1);
		globalMap.put("tFTPFileList_1_CURRENT_FILEPATH", currentFilePath_tFTPFileList_1);
		nb_file_tFTPFileList_1++;

 



/**
 * [tFTPFileList_1 begin ] stop
 */
	
	/**
	 * [tFTPFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFTPFileList_1";

	

 


	tos_count_tFTPFileList_1++;

/**
 * [tFTPFileList_1 main ] stop
 */
	
	/**
	 * [tFTPFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPFileList_1";

	

 



/**
 * [tFTPFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFTPGet_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFTPGet_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFTPGet_1 begin ] start
	 */

				
			int NB_ITERATE_tFTPGet_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFTPGet_1", false);
		start_Hash.put("tFTPGet_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPGet_1";

	
		int tos_count_tFTPGet_1 = 0;
		

 
int nb_file_tFTPGet_1 = 0;  
	final java.util.List<String> msg_tFTPGet_1 = new java.util.ArrayList<String>();

	

			class MyProgressMonitor_tFTPGet_1 implements com.jcraft.jsch.SftpProgressMonitor {

				private long percent = -1;

				public void init(int op, String src, String dest, long max) {}

				public boolean count(long count) {return true;}

				public void end() {}
			} 

			class SFTPGetter_tFTPGet_1 {

				private com.jcraft.jsch.ChannelSftp cnlSFTP = null;

				private com.jcraft.jsch.SftpProgressMonitor monitor = null;

				private int count = 0;

				public void getAllFiles(String remoteDirectory, String localDirectory) throws com.jcraft.jsch.SftpException {
      
					chdir(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
						continue;
						}

						if (attrs.isDir()) {
							java.io.File localFile = new java.io.File(localDirectory + "/" + lsEntry.getFilename());
							if (!localFile.exists()) {
								localFile.mkdir();
							}
							getAllFiles(remoteDirectory + "/" + lsEntry.getFilename(), localDirectory + "/" + lsEntry.getFilename());
							chdir(remoteDirectory);
						} else if (!attrs.isLink()) {
							downloadFile(localDirectory, lsEntry.getFilename());
						}
					}
				}

				public void getFiles(String remoteDirectory, String localDirectory, String maskStr) throws com.jcraft.jsch.SftpException {
      
					chdir(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
							continue;
						}

						if (!attrs.isDir() && !attrs.isLink()) {

							if (lsEntry.getFilename().matches(maskStr)) {
            					downloadFile(localDirectory, lsEntry.getFilename());
          					}
        				}
      				}
				}

				public void chdir(String path) throws com.jcraft.jsch.SftpException{
					if (!".".equals(path)) {
						cnlSFTP.cd(path);
					}
				}

				public String pwd() throws com.jcraft.jsch.SftpException{
					return cnlSFTP.pwd();
				}

				private void downloadFile(String localFileName, String remoteFileName) throws com.jcraft.jsch.SftpException {

					try {
        				cnlSFTP.get(remoteFileName, localFileName, monitor,          
            				com.jcraft.jsch.ChannelSftp.OVERWRITE
					);
						
        				msg_tFTPGet_1.add("file [" + remoteFileName + "] downloaded successfully.");
        				
				    	globalMap.put("tFTPGet_1_CURRENT_STATUS", "File transfer OK.");
			      	} catch (com.jcraft.jsch.SftpException e){

        				if (e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_FAILURE || e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_BAD_MESSAGE) {
							msg_tFTPGet_1.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
							globalMap.put("tFTPGet_1_CURRENT_STATUS", "File transfer fail.");
						}
				        throw e;
					}
					count++;
				}
			}

				com.jcraft.jsch.ChannelSftp c_tFTPGet_1 = (com.jcraft.jsch.ChannelSftp)globalMap.get("conn_tFTPConnection_1");
				
				if(c_tFTPGet_1.getHome()!=null && !c_tFTPGet_1.getHome().equals(c_tFTPGet_1.pwd())){
			  		c_tFTPGet_1.cd(c_tFTPGet_1.getHome());
			  	}
			com.jcraft.jsch.SftpProgressMonitor monitor_tFTPGet_1 = new MyProgressMonitor_tFTPGet_1();
			SFTPGetter_tFTPGet_1 getter_tFTPGet_1 = new SFTPGetter_tFTPGet_1();
			getter_tFTPGet_1.cnlSFTP = c_tFTPGet_1;
			getter_tFTPGet_1.monitor = monitor_tFTPGet_1;
			String remotedir_tFTPGet_1 = context.colectFTPDirOrder;
			if (!".".equals(remotedir_tFTPGet_1)) {
				c_tFTPGet_1.cd(remotedir_tFTPGet_1);
			}
java.util.List<String> maskList_tFTPGet_1 = new java.util.ArrayList<String>();
    
  maskList_tFTPGet_1.add(((String)globalMap.get("tFTPFileList_1_CURRENT_FILE")) == null ? "*.nofile" : ((String)globalMap.get("tFTPFileList_1_CURRENT_FILE")));       
String localdir_tFTPGet_1  = context.colectOrderXmlFileFolder;  
//create folder if local direcotry (assigned by property) not exists
java.io.File dirHandle_tFTPGet_1 = new java.io.File(localdir_tFTPGet_1);

if (!dirHandle_tFTPGet_1.exists()) {
  dirHandle_tFTPGet_1.mkdirs();
}
String root_tFTPGet_1 = getter_tFTPGet_1.pwd();
if ("/".equals(root_tFTPGet_1)) {
	root_tFTPGet_1 = ".";
}

for (String maskStr_tFTPGet_1 : maskList_tFTPGet_1) { 

 



/**
 * [tFTPGet_1 begin ] stop
 */
	
	/**
	 * [tFTPGet_1 main ] start
	 */

	

	
	
	currentComponent="tFTPGet_1";

	

	try {
		globalMap.put("tFTPGet_1_CURRENT_STATUS", "No file transfered.");
		String dir_tFTPGet_1 = root_tFTPGet_1;
		
			String mask_tFTPGet_1 = maskStr_tFTPGet_1.replaceAll("\\\\", "/") ;
		
		int i_tFTPGet_1 = mask_tFTPGet_1.lastIndexOf('/'); 

		if (i_tFTPGet_1 != -1){
			dir_tFTPGet_1 = mask_tFTPGet_1.substring(0, i_tFTPGet_1); 
			mask_tFTPGet_1 = mask_tFTPGet_1.substring(i_tFTPGet_1+1);  
		}
  
		
			mask_tFTPGet_1 = org.apache.oro.text.GlobCompiler.globToPerl5(mask_tFTPGet_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
		
  
		if (dir_tFTPGet_1!=null && !"".equals(dir_tFTPGet_1)){
			if ((".*").equals(mask_tFTPGet_1)) {
				getter_tFTPGet_1.getAllFiles(dir_tFTPGet_1, localdir_tFTPGet_1);
			} else {
				getter_tFTPGet_1.getFiles(dir_tFTPGet_1, localdir_tFTPGet_1 ,mask_tFTPGet_1);
			}
		}
		getter_tFTPGet_1.chdir(root_tFTPGet_1);
	} catch(java.lang.Exception e) {
		
    		throw(e);
  		
	}
 


	tos_count_tFTPGet_1++;

/**
 * [tFTPGet_1 main ] stop
 */
	
	/**
	 * [tFTPGet_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPGet_1";

	

 



/**
 * [tFTPGet_1 process_data_begin ] stop
 */
	NB_ITERATE_tFTPGet_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tFTPGet_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFTPGet_2 begin ] start
	 */

				
			int NB_ITERATE_tFTPDelete_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFTPGet_2", false);
		start_Hash.put("tFTPGet_2", System.currentTimeMillis());
		
	
	currentComponent="tFTPGet_2";

	
		int tos_count_tFTPGet_2 = 0;
		

 
int nb_file_tFTPGet_2 = 0;  
	final java.util.List<String> msg_tFTPGet_2 = new java.util.ArrayList<String>();

	

			class MyProgressMonitor_tFTPGet_2 implements com.jcraft.jsch.SftpProgressMonitor {

				private long percent = -1;

				public void init(int op, String src, String dest, long max) {}

				public boolean count(long count) {return true;}

				public void end() {}
			} 

			class SFTPGetter_tFTPGet_2 {

				private com.jcraft.jsch.ChannelSftp cnlSFTP = null;

				private com.jcraft.jsch.SftpProgressMonitor monitor = null;

				private int count = 0;

				public void getAllFiles(String remoteDirectory, String localDirectory) throws com.jcraft.jsch.SftpException {
      
					chdir(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
						continue;
						}

						if (attrs.isDir()) {
							java.io.File localFile = new java.io.File(localDirectory + "/" + lsEntry.getFilename());
							if (!localFile.exists()) {
								localFile.mkdir();
							}
							getAllFiles(remoteDirectory + "/" + lsEntry.getFilename(), localDirectory + "/" + lsEntry.getFilename());
							chdir(remoteDirectory);
						} else if (!attrs.isLink()) {
							downloadFile(localDirectory, lsEntry.getFilename());
						}
					}
				}

				public void getFiles(String remoteDirectory, String localDirectory, String maskStr) throws com.jcraft.jsch.SftpException {
      
					chdir(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
							continue;
						}

						if (!attrs.isDir() && !attrs.isLink()) {

							if (lsEntry.getFilename().matches(maskStr)) {
            					downloadFile(localDirectory, lsEntry.getFilename());
          					}
        				}
      				}
				}

				public void chdir(String path) throws com.jcraft.jsch.SftpException{
					if (!".".equals(path)) {
						cnlSFTP.cd(path);
					}
				}

				public String pwd() throws com.jcraft.jsch.SftpException{
					return cnlSFTP.pwd();
				}

				private void downloadFile(String localFileName, String remoteFileName) throws com.jcraft.jsch.SftpException {

					try {
        				cnlSFTP.get(remoteFileName, localFileName, monitor,          
            				com.jcraft.jsch.ChannelSftp.OVERWRITE
					);
						
        				msg_tFTPGet_2.add("file [" + remoteFileName + "] downloaded successfully.");
        				
				    	globalMap.put("tFTPGet_2_CURRENT_STATUS", "File transfer OK.");
			      	} catch (com.jcraft.jsch.SftpException e){

        				if (e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_FAILURE || e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_BAD_MESSAGE) {
							msg_tFTPGet_2.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
							globalMap.put("tFTPGet_2_CURRENT_STATUS", "File transfer fail.");
						}
				        throw e;
					}
					count++;
				}
			}

				com.jcraft.jsch.ChannelSftp c_tFTPGet_2 = (com.jcraft.jsch.ChannelSftp)globalMap.get("conn_tFTPConnection_1");
				
				if(c_tFTPGet_2.getHome()!=null && !c_tFTPGet_2.getHome().equals(c_tFTPGet_2.pwd())){
			  		c_tFTPGet_2.cd(c_tFTPGet_2.getHome());
			  	}
			com.jcraft.jsch.SftpProgressMonitor monitor_tFTPGet_2 = new MyProgressMonitor_tFTPGet_2();
			SFTPGetter_tFTPGet_2 getter_tFTPGet_2 = new SFTPGetter_tFTPGet_2();
			getter_tFTPGet_2.cnlSFTP = c_tFTPGet_2;
			getter_tFTPGet_2.monitor = monitor_tFTPGet_2;
			String remotedir_tFTPGet_2 = context.colectFTPDirOrderPdf;
			if (!".".equals(remotedir_tFTPGet_2)) {
				c_tFTPGet_2.cd(remotedir_tFTPGet_2);
			}
java.util.List<String> maskList_tFTPGet_2 = new java.util.ArrayList<String>();
    
  maskList_tFTPGet_2.add(((String)globalMap.get("tFTPFileList_1_CURRENT_FILE")) == null ? "*.nofile" : (StringHandling.LEFT(((String)globalMap.get("tFTPFileList_1_CURRENT_FILE")),StringHandling.INDEX(((String)globalMap.get("tFTPFileList_1_CURRENT_FILE")), "-")) + ".pdf"));       
String localdir_tFTPGet_2  = context.colectOrderXmlFileFolder;  
//create folder if local direcotry (assigned by property) not exists
java.io.File dirHandle_tFTPGet_2 = new java.io.File(localdir_tFTPGet_2);

if (!dirHandle_tFTPGet_2.exists()) {
  dirHandle_tFTPGet_2.mkdirs();
}
String root_tFTPGet_2 = getter_tFTPGet_2.pwd();
if ("/".equals(root_tFTPGet_2)) {
	root_tFTPGet_2 = ".";
}

for (String maskStr_tFTPGet_2 : maskList_tFTPGet_2) { 

 



/**
 * [tFTPGet_2 begin ] stop
 */
	
	/**
	 * [tFTPGet_2 main ] start
	 */

	

	
	
	currentComponent="tFTPGet_2";

	

	try {
		globalMap.put("tFTPGet_2_CURRENT_STATUS", "No file transfered.");
		String dir_tFTPGet_2 = root_tFTPGet_2;
		
			String mask_tFTPGet_2 = maskStr_tFTPGet_2.replaceAll("\\\\", "/") ;
		
		int i_tFTPGet_2 = mask_tFTPGet_2.lastIndexOf('/'); 

		if (i_tFTPGet_2 != -1){
			dir_tFTPGet_2 = mask_tFTPGet_2.substring(0, i_tFTPGet_2); 
			mask_tFTPGet_2 = mask_tFTPGet_2.substring(i_tFTPGet_2+1);  
		}
  
		
			mask_tFTPGet_2 = org.apache.oro.text.GlobCompiler.globToPerl5(mask_tFTPGet_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
		
  
		if (dir_tFTPGet_2!=null && !"".equals(dir_tFTPGet_2)){
			if ((".*").equals(mask_tFTPGet_2)) {
				getter_tFTPGet_2.getAllFiles(dir_tFTPGet_2, localdir_tFTPGet_2);
			} else {
				getter_tFTPGet_2.getFiles(dir_tFTPGet_2, localdir_tFTPGet_2 ,mask_tFTPGet_2);
			}
		}
		getter_tFTPGet_2.chdir(root_tFTPGet_2);
	} catch(java.lang.Exception e) {
		
    		throw(e);
  		
	}
 


	tos_count_tFTPGet_2++;

/**
 * [tFTPGet_2 main ] stop
 */
	
	/**
	 * [tFTPGet_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPGet_2";

	

 



/**
 * [tFTPGet_2 process_data_begin ] stop
 */
	NB_ITERATE_tFTPDelete_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tFTPDelete_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFTPDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPDelete_1", false);
		start_Hash.put("tFTPDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPDelete_1";

	
		int tos_count_tFTPDelete_1 = 0;
		

 
int nb_file_tFTPDelete_1 = 0;
    
			com.jcraft.jsch.ChannelSftp c_tFTPDelete_1 = (com.jcraft.jsch.ChannelSftp)globalMap.get("conn_tFTPConnection_1");
			
		    if(c_tFTPDelete_1.getHome()!=null && !c_tFTPDelete_1.getHome().equals(c_tFTPDelete_1.pwd())){
		  		c_tFTPDelete_1.cd(c_tFTPDelete_1.getHome());
			}
		
		java.util.List<java.util.Map<String,String>> listtFTPDelete_1 = new java.util.ArrayList<java.util.Map<String,String>>();

		    
				java.util.Map<String,String> maptFTPDelete_10 = new java.util.HashMap<String,String>();
		    	maptFTPDelete_10.put(((String)globalMap.get("tFTPFileList_1_CURRENT_FILE")) == null ? "*.nofile" : ((String)globalMap.get("tFTPFileList_1_CURRENT_FILE")),"");
		    	listtFTPDelete_1.add(maptFTPDelete_10);       
  		  

		
		for (java.util.Map<String, String> maptFTPDelete_1 : listtFTPDelete_1) {


 



/**
 * [tFTPDelete_1 begin ] stop
 */
	
	/**
	 * [tFTPDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFTPDelete_1";

	

	try{
		globalMap.put("tFTPDelete_1_CURRENT_STATUS", "No file deleted.");
		java.util.Set<String> keySettFTPDelete_1 = maptFTPDelete_1.keySet(); 
			for (String keytFTPDelete_1 : keySettFTPDelete_1) {     
				String filemasktFTPDelete_1 = keytFTPDelete_1; 
		    	String dirtFTPDelete_1 = null;
        		
		        	String masktFTPDelete_1 = filemasktFTPDelete_1.replaceAll("\\\\", "/") ;
        		
		    	int itFTPDelete_1 = masktFTPDelete_1.lastIndexOf('/');
				if (itFTPDelete_1!=-1) {
					dirtFTPDelete_1 = masktFTPDelete_1.substring(0, itFTPDelete_1); 
					masktFTPDelete_1 = masktFTPDelete_1.substring(itFTPDelete_1+1); 
    			} 
		        
        			masktFTPDelete_1 = org.apache.oro.text.GlobCompiler.globToPerl5(masktFTPDelete_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
		        
				java.util.Vector listingstFTPDelete_1 = c_tFTPDelete_1.ls(context.colectFTPDirOrder);
				for (int mtFTPDelete_1 = 0; mtFTPDelete_1 < listingstFTPDelete_1.size(); mtFTPDelete_1++) { 
					String filePathtFTPDelete_1 =  ((com.jcraft.jsch.ChannelSftp.LsEntry) listingstFTPDelete_1.elementAt(mtFTPDelete_1)).getFilename() ;
					if ( filePathtFTPDelete_1.matches(masktFTPDelete_1)) {
						try {			
							 	c_tFTPDelete_1.rm((context.colectFTPDirOrder)+"/"+ filePathtFTPDelete_1);
								
							 globalMap.put("tFTPDelete_1_CURRENT_STATUS", "File deleted.");
						} catch (com.jcraft.jsch.SftpException e_tFTPDelete_1) {
							globalMap.put("tFTPDelete_1_CURRENT_STATUS", "Deleting file action error");
            	           throw e_tFTPDelete_1;
                		}
						nb_file_tFTPDelete_1++;
					}
				}	     
			}  


   
    
	}catch(java.lang.Exception e_tFTPDelete_1){
    		throw(e_tFTPDelete_1);
	}

 


	tos_count_tFTPDelete_1++;

/**
 * [tFTPDelete_1 main ] stop
 */
	
	/**
	 * [tFTPDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPDelete_1";

	

 



/**
 * [tFTPDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPDelete_1";

	

 



/**
 * [tFTPDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFTPDelete_1";

	

	} 


globalMap.put("tFTPDelete_1_NB_FILE",nb_file_tFTPDelete_1);

 

ok_Hash.put("tFTPDelete_1", true);
end_Hash.put("tFTPDelete_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tWarn_4Process(globalMap);



/**
 * [tFTPDelete_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tFTPDelete_1);
						}				
					




	
	/**
	 * [tFTPGet_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPGet_2";

	

 



/**
 * [tFTPGet_2 process_data_end ] stop
 */
	
	/**
	 * [tFTPGet_2 end ] start
	 */

	

	
	
	currentComponent="tFTPGet_2";

	
}
nb_file_tFTPGet_2 = getter_tFTPGet_2.count;

	msg_tFTPGet_2.add(getter_tFTPGet_2.count + " files have been downloaded.");
	StringBuffer sb_tFTPGet_2 = new StringBuffer();

	for (String item_tFTPGet_2 : msg_tFTPGet_2) {
		sb_tFTPGet_2.append(item_tFTPGet_2).append("\n");
	}
	globalMap.put("tFTPGet_2_TRANSFER_MESSAGES", sb_tFTPGet_2.toString());

	    
	globalMap.put("tFTPGet_2_NB_FILE",nb_file_tFTPGet_2);


 

ok_Hash.put("tFTPGet_2", true);
end_Hash.put("tFTPGet_2", System.currentTimeMillis());




/**
 * [tFTPGet_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tFTPGet_2);
						}				
					




	
	/**
	 * [tFTPGet_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPGet_1";

	

 



/**
 * [tFTPGet_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPGet_1 end ] start
	 */

	

	
	
	currentComponent="tFTPGet_1";

	
}
nb_file_tFTPGet_1 = getter_tFTPGet_1.count;

	msg_tFTPGet_1.add(getter_tFTPGet_1.count + " files have been downloaded.");
	StringBuffer sb_tFTPGet_1 = new StringBuffer();

	for (String item_tFTPGet_1 : msg_tFTPGet_1) {
		sb_tFTPGet_1.append(item_tFTPGet_1).append("\n");
	}
	globalMap.put("tFTPGet_1_TRANSFER_MESSAGES", sb_tFTPGet_1.toString());

	    
	globalMap.put("tFTPGet_1_NB_FILE",nb_file_tFTPGet_1);


 

ok_Hash.put("tFTPGet_1", true);
end_Hash.put("tFTPGet_1", System.currentTimeMillis());




/**
 * [tFTPGet_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFTPGet_1);
						}				
					




	
	/**
	 * [tFTPFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPFileList_1";

	

 



/**
 * [tFTPFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFTPFileList_1";

	
}
globalMap.put("tFTPFileList_1_NB_FILE",nb_file_tFTPFileList_1);

 

ok_Hash.put("tFTPFileList_1", true);
end_Hash.put("tFTPFileList_1", System.currentTimeMillis());




/**
 * [tFTPFileList_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFTPFileList_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFTPClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPFileList_1";

	

 



/**
 * [tFTPFileList_1 finally ] stop
 */

	
	/**
	 * [tFTPGet_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPGet_1";

	

 



/**
 * [tFTPGet_1 finally ] stop
 */

	
	/**
	 * [tFTPGet_2 finally ] start
	 */

	

	
	
	currentComponent="tFTPGet_2";

	

 



/**
 * [tFTPGet_2 finally ] stop
 */

	
	/**
	 * [tFTPDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPDelete_1";

	

 



/**
 * [tFTPDelete_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPFileList_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_4", false);
		start_Hash.put("tWarn_4", System.currentTimeMillis());
		
	
	currentComponent="tWarn_4";

	
		int tos_count_tWarn_4 = 0;
		

 



/**
 * [tWarn_4 begin ] stop
 */
	
	/**
	 * [tWarn_4 main ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "INFO","","SFO_ImportLauncher -- FTP retrieve files end","", "");
	globalMap.put("tWarn_4_WARN_MESSAGES", "SFO_ImportLauncher -- FTP retrieve files end"); 
	globalMap.put("tWarn_4_WARN_PRIORITY", 3);
	globalMap.put("tWarn_4_WARN_CODE", 3);
	
} catch (Exception e_tWarn_4) {
	logIgnoredError(String.format("tWarn_4 - tWarn failed to log message due to internal error: %s", e_tWarn_4), e_tWarn_4);
}


 


	tos_count_tWarn_4++;

/**
 * [tWarn_4 main ] stop
 */
	
	/**
	 * [tWarn_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 process_data_end ] stop
 */
	
	/**
	 * [tWarn_4 end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 

ok_Hash.put("tWarn_4", true);
end_Hash.put("tWarn_4", System.currentTimeMillis());




/**
 * [tWarn_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_4 finally ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}
	

public void tFTPClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPClose_1", false);
		start_Hash.put("tFTPClose_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPClose_1";

	
		int tos_count_tFTPClose_1 = 0;
		
	 Object connObj = globalMap.get("conn_tFTPConnection_1");
	 if (connObj != null) {
      try {
			
              com.jcraft.jsch.ChannelSftp channel = (com.jcraft.jsch.ChannelSftp) connObj; 
              com.jcraft.jsch.Session session = channel.getSession();
			  channel.disconnect();
              session.disconnect();
			
      } catch (Exception e) {
           globalMap.put("tFTPClose_1_ERROR_MESSAGE", e.getMessage()); 
           throw e;
      }
  }
 



/**
 * [tFTPClose_1 begin ] stop
 */
	
	/**
	 * [tFTPClose_1 main ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 


	tos_count_tFTPClose_1++;

/**
 * [tFTPClose_1 main ] stop
 */
	
	/**
	 * [tFTPClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 



/**
 * [tFTPClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 



/**
 * [tFTPClose_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPClose_1 end ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 

ok_Hash.put("tFTPClose_1", true);
end_Hash.put("tFTPClose_1", System.currentTimeMillis());




/**
 * [tFTPClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFTPClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileList_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPClose_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	
	 Object connObj = globalMap.get("conn_tFTPConnection_1");
	 if (connObj != null) {   
              com.jcraft.jsch.ChannelSftp channel = (com.jcraft.jsch.ChannelSftp) connObj; 
              com.jcraft.jsch.Session session = channel.getSession();
              channel.disconnect();
			  session.disconnect();
     
  }
 



/**
 * [tFTPClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class eansStruct implements routines.system.IPersistableRow<eansStruct> {
    final static byte[] commonByteArrayLock_DEV_SFO_ImportLauncher = new byte[0];
    static byte[] commonByteArray_DEV_SFO_ImportLauncher = new byte[0];

	
			    public String eanCode;

				public String getEanCode () {
					return this.eanCode;
				}
				
			    public String accountId;

				public String getAccountId () {
					return this.accountId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_SFO_ImportLauncher.length) {
				if(length < 1024 && commonByteArray_DEV_SFO_ImportLauncher.length == 0) {
   					commonByteArray_DEV_SFO_ImportLauncher = new byte[1024];
				} else {
   					commonByteArray_DEV_SFO_ImportLauncher = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_SFO_ImportLauncher, 0, length);
			strReturn = new String(commonByteArray_DEV_SFO_ImportLauncher, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_SFO_ImportLauncher) {

        	try {

        		int length = 0;
		
					this.eanCode = readString(dis);
					
					this.accountId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.eanCode,dos);
					
					// String
				
						writeString(this.accountId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("eanCode="+eanCode);
		sb.append(",accountId="+accountId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eansStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class xmlDocStruct implements routines.system.IPersistableRow<xmlDocStruct> {
    final static byte[] commonByteArrayLock_DEV_SFO_ImportLauncher = new byte[0];
    static byte[] commonByteArray_DEV_SFO_ImportLauncher = new byte[0];

	
			    public routines.system.Document XmlDoc;

				public routines.system.Document getXmlDoc () {
					return this.XmlDoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_SFO_ImportLauncher) {

        	try {

        		int length = 0;
		
						this.XmlDoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.XmlDoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("XmlDoc="+String.valueOf(XmlDoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(xmlDocStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class readXmlDocStruct implements routines.system.IPersistableRow<readXmlDocStruct> {
    final static byte[] commonByteArrayLock_DEV_SFO_ImportLauncher = new byte[0];
    static byte[] commonByteArray_DEV_SFO_ImportLauncher = new byte[0];

	
			    public routines.system.Document XmlDoc;

				public routines.system.Document getXmlDoc () {
					return this.XmlDoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_SFO_ImportLauncher) {

        	try {

        		int length = 0;
		
						this.XmlDoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.XmlDoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("XmlDoc="+String.valueOf(XmlDoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(readXmlDocStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		readXmlDocStruct readXmlDoc = new readXmlDocStruct();
xmlDocStruct xmlDoc = new xmlDocStruct();
eansStruct eans = new eansStruct();



	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tFileInputXML_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";

	
		int tos_count_tFileList_2 = 0;
		
	
 
     
    
  String directory_tFileList_2 = context.colectOrderXmlFileFolder;
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_2.add("*.xml");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = false;
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
     
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	
	/**
	 * [tFileList_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputXML_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("readXmlDoc", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("xmlDoc", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("eans", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk9", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputXML_1);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"xmlDoc");
					}
				
		int tos_count_tXMLMap_1_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_1_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_1_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_1_TXMLMAP_OUT__Struct Var__tXMLMap_1_TXMLMAP_OUT = new Var__tXMLMap_1_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
eansStruct eans_tmp = new eansStruct();
eansStruct eans_save = null;
//the aggregate variable
eansStruct eans_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_1 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_1",allOutsForAggregate_tXMLMap_1);
// ###############################
class TreeNode_API_tXMLMap_1_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
}
			TreeNode_API_tXMLMap_1_TXMLMAP_OUT treeNodeAPI_tXMLMap_1_TXMLMAP_OUT = new TreeNode_API_tXMLMap_1_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_1_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_1_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_1_TXMLMAP_OUT xml_api_tXMLMap_1_TXMLMAP_OUT = new XML_API_tXMLMap_1_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_1_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_1_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"readXmlDoc");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";

	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = ((String)globalMap.get("tFileList_2_CURRENT_FILEDIRECTORY")) + "/" + ((String)globalMap.get("tFileList_2_CURRENT_FILE"));
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/orders"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/orders"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
		nb_line_tFileInputXML_1++;
		
	readXmlDoc = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	readXmlDoc = new readXmlDocStruct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
		str_tFileInputXML_1 = null;
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
		str_tFileInputXML_1 = node_tFileInputXML_1.asXML();
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
		str_tFileInputXML_1 = node_tFileInputXML_1==null?null:node_tFileInputXML_1.asXML();
	}
								readXmlDoc.XmlDoc = ParserUtils.parseTo_Document(str_tFileInputXML_1,false,"UTF-8"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                readXmlDoc = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "readXmlDoc"
if(readXmlDoc != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"readXmlDoc");
					}
					

    context.Eans = "";
context.AccountIds = "";
xmlDoc.XmlDoc = readXmlDoc.XmlDoc;
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"xmlDoc");
					}
					

	boolean rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setOriginalLoop("/orders/order/orderLines/orderLine");
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setIsOptional(false);
				if(xmlDoc.XmlDoc == null || xmlDoc.XmlDoc.getDocument() == null) {
					throw new RuntimeException("xmlDoc.XmlDoc can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT = xmlDoc.XmlDoc.getDocument();
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setDoc(doc_tXMLMap_1_TXMLMAP_OUT);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setDefineNS(false);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
				
					//old version, find NS from doc
					nsTool_tXMLMap_1_TXMLMAP_OUT.countNSMap(doc_tXMLMap_1_TXMLMAP_OUT.getRootElement());
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT = nsTool_tXMLMap_1_TXMLMAP_OUT.xmlNameSpaceMap;
				
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[2];
				String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT = new String[2];
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "xmlDoc.XmlDoc:/orders/order/orderLines/orderLine/eanCode";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[0] = "eanCode";
				
				absolutePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "xmlDoc.XmlDoc:/orders/order/customerUserDefinedField";
				relativePathMappings_tXMLMap_1_TXMLMAP_OUT[1] = "../../customerUserDefinedField";
				
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT);
				docToFlat_tXMLMap_1_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_1_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT = docToFlat_tXMLMap_1_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT: resultSet_tXMLMap_1_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_1_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT : oneRow_tXMLMap_1_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT.getKey(),entry_tXMLMap_1_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output tables

eans = null;


// # Output table : 'eans'

eans_tmp = new eansStruct();
eans_tmp.eanCode =  treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("xmlDoc.XmlDoc:/orders/order/orderLines/orderLine/eanCode");
eans_tmp.accountId =  treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("xmlDoc.XmlDoc:/orders/order/customerUserDefinedField");allOutsForAggregate_tXMLMap_1.add(eans_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_1_TXMLMAP_OUT++;

/**
 * [tXMLMap_1_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "readXmlDoc"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	
 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"readXmlDoc");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	




				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"xmlDoc");
			  	}
			  	
 

ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eans");
					}
				
		int tos_count_tJavaFlex_1 = 0;
		


// start part of your Java code




 



/**
 * [tJavaFlex_1 begin ] stop
 */



	
	/**
	 * [tXMLMap_1_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	
		int tos_count_tXMLMap_1_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_1 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_1");
for(Object  row_out_tXMLMap_1_TXMLMAP_IN : outs_tXMLMap_1) {//TD512
 



/**
 * [tXMLMap_1_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

	eans = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof eansStruct) {
		eans = (eansStruct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_1_TXMLMAP_IN++;

/**
 * [tXMLMap_1_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "eans"
if(eans != null) { 



	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eans");
					}
					



// here is the main part of the component,
// a piece of code executed in the row
// loop
context.Eans = context.Eans + ", '" + eans.eanCode + "'";
context.AccountIds = context.AccountIds + ", '" + eans.accountId + "'";



 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_end ] stop
 */

} // End of branch "eans"




	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_1_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
if(context.Eans.startsWith(", ")) {
	context.Eans = context.Eans.substring(2);
}
System.out.println("EANS:" + context.Eans);

if(context.AccountIds.startsWith(", ")) {
	context.AccountIds = context.AccountIds.substring(2);
}
System.out.println("AccountIds:" + context.AccountIds);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eans");
			  	}
			  	
 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tWarn_6Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJavaFlex_1 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputXML_1);
						}				
					




	
	/**
	 * [tFileList_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_end ] stop
 */
	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());




/**
 * [tFileList_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tWarn_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_6", false);
		start_Hash.put("tWarn_6", System.currentTimeMillis());
		
	
	currentComponent="tWarn_6";

	
		int tos_count_tWarn_6 = 0;
		

 



/**
 * [tWarn_6 begin ] stop
 */
	
	/**
	 * [tWarn_6 main ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_6", "", Thread.currentThread().getId() + "", "INFO","","SFO_ImportLauncher -- Process order: " + context.colectOrderXmlFileName,"", "");
	globalMap.put("tWarn_6_WARN_MESSAGES", "SFO_ImportLauncher -- Process order: " + context.colectOrderXmlFileName); 
	globalMap.put("tWarn_6_WARN_PRIORITY", 3);
	globalMap.put("tWarn_6_WARN_CODE", 3);
	
} catch (Exception e_tWarn_6) {
	logIgnoredError(String.format("tWarn_6 - tWarn failed to log message due to internal error: %s", e_tWarn_6), e_tWarn_6);
}


 


	tos_count_tWarn_6++;

/**
 * [tWarn_6 main ] stop
 */
	
	/**
	 * [tWarn_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 process_data_end ] stop
 */
	
	/**
	 * [tWarn_6 end ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 

ok_Hash.put("tWarn_6", true);
end_Hash.put("tWarn_6", System.currentTimeMillis());




/**
 * [tWarn_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_6 finally ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_6_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Full");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = context.Eans;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param Eans=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param Eans=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("Eans", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.AccountIds;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param AccountIds=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param AccountIds=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("AccountIds", obj_tRunJob_1);
	
		obj_tRunJob_1 = StringHandling.LEFT(((String)globalMap.get("tFileList_2_CURRENT_FILE")),StringHandling.INDEX(((String)globalMap.get("tFileList_2_CURRENT_FILE")), "-")) + ".pdf";
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param PdfFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param PdfFileName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("PdfFileName", obj_tRunJob_1);
	
		obj_tRunJob_1 = ((String)globalMap.get("tFileList_2_CURRENT_FILEDIRECTORY"));
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param colectOrderXmlFileFolder=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param colectOrderXmlFileFolder=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("colectOrderXmlFileFolder", obj_tRunJob_1);
	
		obj_tRunJob_1 = ((String)globalMap.get("tFileList_2_CURRENT_FILE"));
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param colectOrderXmlFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param colectOrderXmlFileName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("colectOrderXmlFileName", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesForceOAuthToken;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesForceOAuthToken=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesForceOAuthToken=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesForceOAuthToken", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesforceOrderRT;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesforceOrderRT=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesforceOrderRT=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesforceOrderRT", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesForceURL;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesForceURL=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesForceURL=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesForceURL", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesForceURL;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesForceURL=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesForceURL=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesForceURL", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesForceB2bUsername;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesForceB2bUsername=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesForceB2bUsername=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesForceB2bUsername", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesForceB2bPassword;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesForceB2bPassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesForceB2bPassword=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesForceB2bPassword", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesForceB2bToken;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesForceB2bToken=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesForceB2bToken=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesForceB2bToken", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesForceUsername;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesForceUsername=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesForceUsername=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesForceUsername", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesForcePassword;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesForcePassword=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesForcePassword=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesForcePassword", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesForceToken;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesForceToken=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesForceToken=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesForceToken", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesforceMyDomainUrl;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesforceMyDomainUrl=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesforceMyDomainUrl=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesforceMyDomainUrl", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesforceOrderLibraryId;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesforceOrderLibraryId=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesforceOrderLibraryId=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesforceOrderLibraryId", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesforceOrderPdfFolderId;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesforceOrderPdfFolderId=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesforceOrderPdfFolderId=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesforceOrderPdfFolderId", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SalesforceOrderXmlFolderId;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SalesforceOrderXmlFolderId=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SalesforceOrderXmlFolderId=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SalesforceOrderXmlFolderId", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SQLSERVER_LOG_AdditionalParams;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_AdditionalParams=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_AdditionalParams=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SQLSERVER_LOG_AdditionalParams", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SQLSERVER_LOG_Database;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Database=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Database=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Database", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SQLSERVER_LOG_Login;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Login=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Login=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Login", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SQLSERVER_LOG_Password;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Password=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Password=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Password", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SQLSERVER_LOG_Port;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Port=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Port=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Port", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SQLSERVER_LOG_Schema;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Schema=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Schema=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Schema", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SQLSERVER_LOG_Server;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Server=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Server=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Server", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.SQLSERVER_LOG_Table;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Table=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param SQLSERVER_LOG_Table=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Table", obj_tRunJob_1);
	
	
		dev.sfo_importorder_4_2.SFO_ImportOrder childJob_tRunJob_1 = new dev.sfo_importorder_4_2.SFO_ImportOrder();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_5", false);
		start_Hash.put("tWarn_5", System.currentTimeMillis());
		
	
	currentComponent="tWarn_5";

	
		int tos_count_tWarn_5 = 0;
		

 



/**
 * [tWarn_5 begin ] stop
 */
	
	/**
	 * [tWarn_5 main ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "INFO","","SFO_ImportLauncher -- job end","", "");
	globalMap.put("tWarn_5_WARN_MESSAGES", "SFO_ImportLauncher -- job end"); 
	globalMap.put("tWarn_5_WARN_PRIORITY", 3);
	globalMap.put("tWarn_5_WARN_CODE", 3);
	
} catch (Exception e_tWarn_5) {
	logIgnoredError(String.format("tWarn_5 - tWarn failed to log message due to internal error: %s", e_tWarn_5), e_tWarn_5);
}


 


	tos_count_tWarn_5++;

/**
 * [tWarn_5 main ] stop
 */
	
	/**
	 * [tWarn_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 process_data_end ] stop
 */
	
	/**
	 * [tWarn_5 end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 

ok_Hash.put("tWarn_5", true);
end_Hash.put("tWarn_5", System.currentTimeMillis());




/**
 * [tWarn_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_5 finally ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_3.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_3 = null;

	
		obj_tRunJob_3 = "[Talend Interface] Import Order SF - Colect: KO connection error";
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param Subject=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param Subject=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("Subject", obj_tRunJob_3);
	
		obj_tRunJob_3 = "Connection error occurred during process import order from Colect to Salesforce.";
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param Content=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param Content=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("Content", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.SMTP_RecipientList;
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param ToAddress=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param ToAddress=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("ToAddress", obj_tRunJob_3);
	
	
		dev.sendmailoffice365_0_1.SendMailOffice365 childJob_tRunJob_3 = new dev.sendmailoffice365_0_1.SendMailOffice365();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
	  	
				errorCode = childJob_tRunJob_3.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_3.getErrorCode() == null){
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
		    }
		    if (childJob_tRunJob_3.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
					java.lang.Exception ce_tRunJob_3 = childJob_tRunJob_3.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_3!=null) ? (ce_tRunJob_3.getClass().getName() + ": " + ce_tRunJob_3.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tWarn_2Process(globalMap);



/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
		int tos_count_tWarn_2 = 0;
		

 



/**
 * [tWarn_2 begin ] stop
 */
	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "ERROR","","SFO_ImportLauncher -- job Error: Salesforce connection KO","", "");
	globalMap.put("tWarn_2_WARN_MESSAGES", "SFO_ImportLauncher -- job Error: Salesforce connection KO"); 
	globalMap.put("tWarn_2_WARN_PRIORITY", 5);
	globalMap.put("tWarn_2_WARN_CODE", 3);
	
} catch (Exception e_tWarn_2) {
	logIgnoredError(String.format("tWarn_2 - tWarn failed to log message due to internal error: %s", e_tWarn_2), e_tWarn_2);
}


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */
	
	/**
	 * [tWarn_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_end ] stop
 */
	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());




/**
 * [tWarn_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tLibraryLoad_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tLibraryLoad_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tLibraryLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLibraryLoad_1", false);
		start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tLibraryLoad_1";

	
		int tos_count_tLibraryLoad_1 = 0;
		



 



/**
 * [tLibraryLoad_1 begin ] stop
 */
	
	/**
	 * [tLibraryLoad_1 main ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 


	tos_count_tLibraryLoad_1++;

/**
 * [tLibraryLoad_1 main ] stop
 */
	
	/**
	 * [tLibraryLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 



/**
 * [tLibraryLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tLibraryLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 



/**
 * [tLibraryLoad_1 process_data_end ] stop
 */
	
	/**
	 * [tLibraryLoad_1 end ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 

ok_Hash.put("tLibraryLoad_1", true);
end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tWarn_1Process(globalMap);



/**
 * [tLibraryLoad_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLibraryLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 



/**
 * [tLibraryLoad_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","SFO_ImportLauncher -- job start","", "");
	globalMap.put("tWarn_1_WARN_MESSAGES", "SFO_ImportLauncher -- job start"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 3);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Full";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final SFO_ImportLauncher SFO_ImportLauncherClass = new SFO_ImportLauncher();

        int exitCode = SFO_ImportLauncherClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = SFO_ImportLauncher.class.getClassLoader().getResourceAsStream("dev/sfo_importlauncher_4_2/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = SFO_ImportLauncher.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("Eans", "id_String");
                            context.Eans=(String) context.getProperty("Eans");
                        context.setContextType("AccountIds", "id_String");
                            context.AccountIds=(String) context.getProperty("AccountIds");
                        context.setContextType("SalesforceAccessToken", "id_String");
                            context.SalesforceAccessToken=(String) context.getProperty("SalesforceAccessToken");
                        context.setContextType("SMTP_Password", "id_Password");
                            String pwd_SMTP_Password_value = context.getProperty("SMTP_Password");
                            context.SMTP_Password = null;
                            if(pwd_SMTP_Password_value!=null) {
                                if(context_param.containsKey("SMTP_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SMTP_Password = pwd_SMTP_Password_value;
                                } else if (!pwd_SMTP_Password_value.isEmpty()) {
                                    try {
                                        context.SMTP_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SMTP_Password_value);
                                        context.put("SMTP_Password",context.SMTP_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SMTP_Port", "id_String");
                            context.SMTP_Port=(String) context.getProperty("SMTP_Port");
                        context.setContextType("SMTP_RecipientList", "id_String");
                            context.SMTP_RecipientList=(String) context.getProperty("SMTP_RecipientList");
                        context.setContextType("SMTP_Sender", "id_String");
                            context.SMTP_Sender=(String) context.getProperty("SMTP_Sender");
                        context.setContextType("SMTP_Server", "id_String");
                            context.SMTP_Server=(String) context.getProperty("SMTP_Server");
                        context.setContextType("SMTP_User", "id_String");
                            context.SMTP_User=(String) context.getProperty("SMTP_User");
                        context.setContextType("colectDirectoryArchive", "id_String");
                            context.colectDirectoryArchive=(String) context.getProperty("colectDirectoryArchive");
                        context.setContextType("colectDirectoryOutput", "id_String");
                            context.colectDirectoryOutput=(String) context.getProperty("colectDirectoryOutput");
                        context.setContextType("colectFTPDirOrder", "id_String");
                            context.colectFTPDirOrder=(String) context.getProperty("colectFTPDirOrder");
                        context.setContextType("colectFTPDirOrderPdf", "id_String");
                            context.colectFTPDirOrderPdf=(String) context.getProperty("colectFTPDirOrderPdf");
                        context.setContextType("colectFTPHost", "id_String");
                            context.colectFTPHost=(String) context.getProperty("colectFTPHost");
                        context.setContextType("colectFTPPassword", "id_Password");
                            String pwd_colectFTPPassword_value = context.getProperty("colectFTPPassword");
                            context.colectFTPPassword = null;
                            if(pwd_colectFTPPassword_value!=null) {
                                if(context_param.containsKey("colectFTPPassword")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.colectFTPPassword = pwd_colectFTPPassword_value;
                                } else if (!pwd_colectFTPPassword_value.isEmpty()) {
                                    try {
                                        context.colectFTPPassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_colectFTPPassword_value);
                                        context.put("colectFTPPassword",context.colectFTPPassword);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("colectFTPUser", "id_String");
                            context.colectFTPUser=(String) context.getProperty("colectFTPUser");
                        context.setContextType("colectOrderXmlFileFolder", "id_String");
                            context.colectOrderXmlFileFolder=(String) context.getProperty("colectOrderXmlFileFolder");
                        context.setContextType("colectOrderXmlFileName", "id_String");
                            context.colectOrderXmlFileName=(String) context.getProperty("colectOrderXmlFileName");
                        context.setContextType("SalesforceApiVersion", "id_String");
                            context.SalesforceApiVersion=(String) context.getProperty("SalesforceApiVersion");
                        context.setContextType("SalesForceB2bPassword", "id_Password");
                            String pwd_SalesForceB2bPassword_value = context.getProperty("SalesForceB2bPassword");
                            context.SalesForceB2bPassword = null;
                            if(pwd_SalesForceB2bPassword_value!=null) {
                                if(context_param.containsKey("SalesForceB2bPassword")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForceB2bPassword = pwd_SalesForceB2bPassword_value;
                                } else if (!pwd_SalesForceB2bPassword_value.isEmpty()) {
                                    try {
                                        context.SalesForceB2bPassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForceB2bPassword_value);
                                        context.put("SalesForceB2bPassword",context.SalesForceB2bPassword);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesForceB2bToken", "id_Password");
                            String pwd_SalesForceB2bToken_value = context.getProperty("SalesForceB2bToken");
                            context.SalesForceB2bToken = null;
                            if(pwd_SalesForceB2bToken_value!=null) {
                                if(context_param.containsKey("SalesForceB2bToken")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForceB2bToken = pwd_SalesForceB2bToken_value;
                                } else if (!pwd_SalesForceB2bToken_value.isEmpty()) {
                                    try {
                                        context.SalesForceB2bToken = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForceB2bToken_value);
                                        context.put("SalesForceB2bToken",context.SalesForceB2bToken);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesForceB2bUsername", "id_String");
                            context.SalesForceB2bUsername=(String) context.getProperty("SalesForceB2bUsername");
                        context.setContextType("SalesForceClientId", "id_Password");
                            String pwd_SalesForceClientId_value = context.getProperty("SalesForceClientId");
                            context.SalesForceClientId = null;
                            if(pwd_SalesForceClientId_value!=null) {
                                if(context_param.containsKey("SalesForceClientId")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForceClientId = pwd_SalesForceClientId_value;
                                } else if (!pwd_SalesForceClientId_value.isEmpty()) {
                                    try {
                                        context.SalesForceClientId = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForceClientId_value);
                                        context.put("SalesForceClientId",context.SalesForceClientId);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesForceClientSecret", "id_Password");
                            String pwd_SalesForceClientSecret_value = context.getProperty("SalesForceClientSecret");
                            context.SalesForceClientSecret = null;
                            if(pwd_SalesForceClientSecret_value!=null) {
                                if(context_param.containsKey("SalesForceClientSecret")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForceClientSecret = pwd_SalesForceClientSecret_value;
                                } else if (!pwd_SalesForceClientSecret_value.isEmpty()) {
                                    try {
                                        context.SalesForceClientSecret = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForceClientSecret_value);
                                        context.put("SalesForceClientSecret",context.SalesForceClientSecret);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesforceMyDomainUrl", "id_String");
                            context.SalesforceMyDomainUrl=(String) context.getProperty("SalesforceMyDomainUrl");
                        context.setContextType("SalesForceOAuthToken", "id_String");
                            context.SalesForceOAuthToken=(String) context.getProperty("SalesForceOAuthToken");
                        context.setContextType("SalesforceOrderLibraryId", "id_String");
                            context.SalesforceOrderLibraryId=(String) context.getProperty("SalesforceOrderLibraryId");
                        context.setContextType("SalesforceOrderPdfFolderId", "id_String");
                            context.SalesforceOrderPdfFolderId=(String) context.getProperty("SalesforceOrderPdfFolderId");
                        context.setContextType("SalesforceOrderRT", "id_String");
                            context.SalesforceOrderRT=(String) context.getProperty("SalesforceOrderRT");
                        context.setContextType("SalesforceOrderXmlFolderId", "id_String");
                            context.SalesforceOrderXmlFolderId=(String) context.getProperty("SalesforceOrderXmlFolderId");
                        context.setContextType("SalesForcePassword", "id_Password");
                            String pwd_SalesForcePassword_value = context.getProperty("SalesForcePassword");
                            context.SalesForcePassword = null;
                            if(pwd_SalesForcePassword_value!=null) {
                                if(context_param.containsKey("SalesForcePassword")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForcePassword = pwd_SalesForcePassword_value;
                                } else if (!pwd_SalesForcePassword_value.isEmpty()) {
                                    try {
                                        context.SalesForcePassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForcePassword_value);
                                        context.put("SalesForcePassword",context.SalesForcePassword);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesForceToken", "id_Password");
                            String pwd_SalesForceToken_value = context.getProperty("SalesForceToken");
                            context.SalesForceToken = null;
                            if(pwd_SalesForceToken_value!=null) {
                                if(context_param.containsKey("SalesForceToken")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForceToken = pwd_SalesForceToken_value;
                                } else if (!pwd_SalesForceToken_value.isEmpty()) {
                                    try {
                                        context.SalesForceToken = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForceToken_value);
                                        context.put("SalesForceToken",context.SalesForceToken);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesForceURL", "id_String");
                            context.SalesForceURL=(String) context.getProperty("SalesForceURL");
                        context.setContextType("SalesForceUsername", "id_String");
                            context.SalesForceUsername=(String) context.getProperty("SalesForceUsername");
                        context.setContextType("SQLSERVER_LOG_AdditionalParams", "id_String");
                            context.SQLSERVER_LOG_AdditionalParams=(String) context.getProperty("SQLSERVER_LOG_AdditionalParams");
                        context.setContextType("SQLSERVER_LOG_Database", "id_String");
                            context.SQLSERVER_LOG_Database=(String) context.getProperty("SQLSERVER_LOG_Database");
                        context.setContextType("SQLSERVER_LOG_Login", "id_String");
                            context.SQLSERVER_LOG_Login=(String) context.getProperty("SQLSERVER_LOG_Login");
                        context.setContextType("SQLSERVER_LOG_Password", "id_Password");
                            String pwd_SQLSERVER_LOG_Password_value = context.getProperty("SQLSERVER_LOG_Password");
                            context.SQLSERVER_LOG_Password = null;
                            if(pwd_SQLSERVER_LOG_Password_value!=null) {
                                if(context_param.containsKey("SQLSERVER_LOG_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SQLSERVER_LOG_Password = pwd_SQLSERVER_LOG_Password_value;
                                } else if (!pwd_SQLSERVER_LOG_Password_value.isEmpty()) {
                                    try {
                                        context.SQLSERVER_LOG_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SQLSERVER_LOG_Password_value);
                                        context.put("SQLSERVER_LOG_Password",context.SQLSERVER_LOG_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SQLSERVER_LOG_Port", "id_String");
                            context.SQLSERVER_LOG_Port=(String) context.getProperty("SQLSERVER_LOG_Port");
                        context.setContextType("SQLSERVER_LOG_Schema", "id_String");
                            context.SQLSERVER_LOG_Schema=(String) context.getProperty("SQLSERVER_LOG_Schema");
                        context.setContextType("SQLSERVER_LOG_Server", "id_String");
                            context.SQLSERVER_LOG_Server=(String) context.getProperty("SQLSERVER_LOG_Server");
                        context.setContextType("SQLSERVER_LOG_Table", "id_String");
                            context.SQLSERVER_LOG_Table=(String) context.getProperty("SQLSERVER_LOG_Table");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Eans")) {
                context.Eans = (String) parentContextMap.get("Eans");
            }if (parentContextMap.containsKey("AccountIds")) {
                context.AccountIds = (String) parentContextMap.get("AccountIds");
            }if (parentContextMap.containsKey("SalesforceAccessToken")) {
                context.SalesforceAccessToken = (String) parentContextMap.get("SalesforceAccessToken");
            }if (parentContextMap.containsKey("SMTP_Password")) {
                context.SMTP_Password = (java.lang.String) parentContextMap.get("SMTP_Password");
            }if (parentContextMap.containsKey("SMTP_Port")) {
                context.SMTP_Port = (String) parentContextMap.get("SMTP_Port");
            }if (parentContextMap.containsKey("SMTP_RecipientList")) {
                context.SMTP_RecipientList = (String) parentContextMap.get("SMTP_RecipientList");
            }if (parentContextMap.containsKey("SMTP_Sender")) {
                context.SMTP_Sender = (String) parentContextMap.get("SMTP_Sender");
            }if (parentContextMap.containsKey("SMTP_Server")) {
                context.SMTP_Server = (String) parentContextMap.get("SMTP_Server");
            }if (parentContextMap.containsKey("SMTP_User")) {
                context.SMTP_User = (String) parentContextMap.get("SMTP_User");
            }if (parentContextMap.containsKey("colectDirectoryArchive")) {
                context.colectDirectoryArchive = (String) parentContextMap.get("colectDirectoryArchive");
            }if (parentContextMap.containsKey("colectDirectoryOutput")) {
                context.colectDirectoryOutput = (String) parentContextMap.get("colectDirectoryOutput");
            }if (parentContextMap.containsKey("colectFTPDirOrder")) {
                context.colectFTPDirOrder = (String) parentContextMap.get("colectFTPDirOrder");
            }if (parentContextMap.containsKey("colectFTPDirOrderPdf")) {
                context.colectFTPDirOrderPdf = (String) parentContextMap.get("colectFTPDirOrderPdf");
            }if (parentContextMap.containsKey("colectFTPHost")) {
                context.colectFTPHost = (String) parentContextMap.get("colectFTPHost");
            }if (parentContextMap.containsKey("colectFTPPassword")) {
                context.colectFTPPassword = (java.lang.String) parentContextMap.get("colectFTPPassword");
            }if (parentContextMap.containsKey("colectFTPUser")) {
                context.colectFTPUser = (String) parentContextMap.get("colectFTPUser");
            }if (parentContextMap.containsKey("colectOrderXmlFileFolder")) {
                context.colectOrderXmlFileFolder = (String) parentContextMap.get("colectOrderXmlFileFolder");
            }if (parentContextMap.containsKey("colectOrderXmlFileName")) {
                context.colectOrderXmlFileName = (String) parentContextMap.get("colectOrderXmlFileName");
            }if (parentContextMap.containsKey("SalesforceApiVersion")) {
                context.SalesforceApiVersion = (String) parentContextMap.get("SalesforceApiVersion");
            }if (parentContextMap.containsKey("SalesForceB2bPassword")) {
                context.SalesForceB2bPassword = (java.lang.String) parentContextMap.get("SalesForceB2bPassword");
            }if (parentContextMap.containsKey("SalesForceB2bToken")) {
                context.SalesForceB2bToken = (java.lang.String) parentContextMap.get("SalesForceB2bToken");
            }if (parentContextMap.containsKey("SalesForceB2bUsername")) {
                context.SalesForceB2bUsername = (String) parentContextMap.get("SalesForceB2bUsername");
            }if (parentContextMap.containsKey("SalesForceClientId")) {
                context.SalesForceClientId = (java.lang.String) parentContextMap.get("SalesForceClientId");
            }if (parentContextMap.containsKey("SalesForceClientSecret")) {
                context.SalesForceClientSecret = (java.lang.String) parentContextMap.get("SalesForceClientSecret");
            }if (parentContextMap.containsKey("SalesforceMyDomainUrl")) {
                context.SalesforceMyDomainUrl = (String) parentContextMap.get("SalesforceMyDomainUrl");
            }if (parentContextMap.containsKey("SalesForceOAuthToken")) {
                context.SalesForceOAuthToken = (String) parentContextMap.get("SalesForceOAuthToken");
            }if (parentContextMap.containsKey("SalesforceOrderLibraryId")) {
                context.SalesforceOrderLibraryId = (String) parentContextMap.get("SalesforceOrderLibraryId");
            }if (parentContextMap.containsKey("SalesforceOrderPdfFolderId")) {
                context.SalesforceOrderPdfFolderId = (String) parentContextMap.get("SalesforceOrderPdfFolderId");
            }if (parentContextMap.containsKey("SalesforceOrderRT")) {
                context.SalesforceOrderRT = (String) parentContextMap.get("SalesforceOrderRT");
            }if (parentContextMap.containsKey("SalesforceOrderXmlFolderId")) {
                context.SalesforceOrderXmlFolderId = (String) parentContextMap.get("SalesforceOrderXmlFolderId");
            }if (parentContextMap.containsKey("SalesForcePassword")) {
                context.SalesForcePassword = (java.lang.String) parentContextMap.get("SalesForcePassword");
            }if (parentContextMap.containsKey("SalesForceToken")) {
                context.SalesForceToken = (java.lang.String) parentContextMap.get("SalesForceToken");
            }if (parentContextMap.containsKey("SalesForceURL")) {
                context.SalesForceURL = (String) parentContextMap.get("SalesForceURL");
            }if (parentContextMap.containsKey("SalesForceUsername")) {
                context.SalesForceUsername = (String) parentContextMap.get("SalesForceUsername");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_AdditionalParams")) {
                context.SQLSERVER_LOG_AdditionalParams = (String) parentContextMap.get("SQLSERVER_LOG_AdditionalParams");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Database")) {
                context.SQLSERVER_LOG_Database = (String) parentContextMap.get("SQLSERVER_LOG_Database");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Login")) {
                context.SQLSERVER_LOG_Login = (String) parentContextMap.get("SQLSERVER_LOG_Login");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Password")) {
                context.SQLSERVER_LOG_Password = (java.lang.String) parentContextMap.get("SQLSERVER_LOG_Password");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Port")) {
                context.SQLSERVER_LOG_Port = (String) parentContextMap.get("SQLSERVER_LOG_Port");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Schema")) {
                context.SQLSERVER_LOG_Schema = (String) parentContextMap.get("SQLSERVER_LOG_Schema");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Server")) {
                context.SQLSERVER_LOG_Server = (String) parentContextMap.get("SQLSERVER_LOG_Server");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Table")) {
                context.SQLSERVER_LOG_Table = (String) parentContextMap.get("SQLSERVER_LOG_Table");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("SMTP_Password");
			parametersToEncrypt.add("colectFTPPassword");
			parametersToEncrypt.add("SalesForceB2bPassword");
			parametersToEncrypt.add("SalesForceB2bToken");
			parametersToEncrypt.add("SalesForceClientId");
			parametersToEncrypt.add("SalesForceClientSecret");
			parametersToEncrypt.add("SalesForcePassword");
			parametersToEncrypt.add("SalesForceToken");
			parametersToEncrypt.add("SQLSERVER_LOG_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_2) {
globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);

e_tRunJob_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SFO_ImportLauncher");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeFtpConnections();


    }






    private void closeFtpConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tFTPConnection_1");
            if (obj_conn != null) {
                ((com.jcraft.jsch.ChannelSftp) obj_conn).quit();
            }
        } catch (java.lang.Exception e) {
        }
    }








    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tFTPConnection_1", globalMap.get("conn_tFTPConnection_1"));





        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     212289 characters generated by Talend Open Studio for Data Integration 
 *     on the 3 octobre 2023 12:10:25 CEST
 ************************************************************************************************/