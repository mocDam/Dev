// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.updateassetsinbynder_prod_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.BynderOauthHeaderGenerator;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: updateAssetsInBynder_PROD Purpose: createAssetsInBynder_PROD<br>
 * Description: createAssetsInBynder_PROD <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class updateAssetsInBynder_PROD implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(bynderDirectory != null){
				
					this.setProperty("bynderDirectory", bynderDirectory.toString());
				
			}
			
			if(errorFile != null){
				
					this.setProperty("errorFile", errorFile.toString());
				
			}
			
		}

public String bynderDirectory;
public String getBynderDirectory(){
	return this.bynderDirectory;
}
public String errorFile;
public String getErrorFile(){
	return this.errorFile;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "updateAssetsInBynder_PROD";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				updateAssetsInBynder_PROD.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(updateAssetsInBynder_PROD.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
			try{
				tLogCatcher_1Process(globalMap);
			}finally{
				talendLogs_LOGSProcess(globalMap);
			}
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRESTClient_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String token_type;

				public String getToken_type () {
					return this.token_type;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.access_token = readString(dis);
					
					this.token_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.token_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("access_token="+access_token);
		sb.append(",token_type="+token_type);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class toSetVariableStruct implements routines.system.IPersistableRow<toSetVariableStruct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String token_type;

				public String getToken_type () {
					return this.token_type;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.access_token = readString(dis);
					
					this.token_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.token_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("access_token="+access_token);
		sb.append(",token_type="+token_type);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(toSetVariableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String instance_url;

				public String getInstance_url () {
					return this.instance_url;
				}
				
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String token_type;

				public String getToken_type () {
					return this.token_type;
				}
				
			    public String issued_at;

				public String getIssued_at () {
					return this.issued_at;
				}
				
			    public String signature;

				public String getSignature () {
					return this.signature;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.access_token = readString(dis);
					
					this.instance_url = readString(dis);
					
					this.id = readString(dis);
					
					this.token_type = readString(dis);
					
					this.issued_at = readString(dis);
					
					this.signature = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.instance_url,dos);
					
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.token_type,dos);
					
					// String
				
						writeString(this.issued_at,dos);
					
					// String
				
						writeString(this.signature,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("access_token="+access_token);
		sb.append(",instance_url="+instance_url);
		sb.append(",id="+id);
		sb.append(",token_type="+token_type);
		sb.append(",issued_at="+issued_at);
		sb.append(",signature="+signature);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
						this.statusCode = readInteger(dis);
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
					// Integer
				
						writeInteger(this.statusCode,dos);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
		sb.append(",statusCode="+String.valueOf(statusCode));
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRESTClient_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRESTClient_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();
toSetVariableStruct toSetVariable = new toSetVariableStruct();
toSetVariableStruct row15 = toSetVariable;







	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"toSetVariable");
					}
				
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
toSetVariableStruct toSetVariable_tmp = new toSetVariableStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_2", false);
		start_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tExtractJSONFields_2 = 0;
		

int nb_line_tExtractJSONFields_2 = 0;
String jsonStr_tExtractJSONFields_2 = "";

	

class JsonPathCache_tExtractJSONFields_2 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_2 jsonPathCache_tExtractJSONFields_2 = new JsonPathCache_tExtractJSONFields_2();

 



/**
 * [tExtractJSONFields_2 begin ] stop
 */



	
	/**
	 * [tRESTClient_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_3", false);
		start_Hash.put("tRESTClient_3", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_3";

	
		int tos_count_tRESTClient_3 = 0;
		

 



/**
 * [tRESTClient_3 begin ] stop
 */
	
	/**
	 * [tRESTClient_3 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_3";

	
	row2 = null;

// expected response body
javax.ws.rs.core.Response responseDoc_tRESTClient_3 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_3 = null;
	String requestString_tRESTClient_3 = null;

	Object requestBody_tRESTClient_3 = requestDoc_tRESTClient_3 != null ? requestDoc_tRESTClient_3 : requestString_tRESTClient_3;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_3
		= String.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_3 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_3 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = "https://haddadbrand.bynder.com/v6/authentication/oauth2/token";
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_3.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_3.setAddress(url);
	

	

	

	

	factoryBean_tRESTClient_3.setFeatures(features_tRESTClient_3);


	java.util.List<Object> providers_tRESTClient_3 = new java.util.ArrayList<Object>();
	providers_tRESTClient_3.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_3) {
					e_tRESTClient_3.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_3 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_3.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_3.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_3.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_3.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_3.setDropRootElement(false);
		jsonProvider_tRESTClient_3.setConvertTypesToStrings(true);
	providers_tRESTClient_3.add(jsonProvider_tRESTClient_3);
	factoryBean_tRESTClient_3.setProviders(providers_tRESTClient_3);
	factoryBean_tRESTClient_3.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_3 = false;
	if (use_auth_tRESTClient_3 && "SAML".equals("BASIC")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[HNM1ZxtCDQFibU2ATUeLL6wy5iBcOXLYEPkaBkE/w5Cetv14j5M=]");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_3.getBus(),
				"otman.nikraj@haddadeurope.com.partial", decryptedPassword_tRESTClient_3);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_3, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_3 = factoryBean_tRESTClient_3.createWebClient();

	// set request path
	webClient_tRESTClient_3.path("");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_3 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_3);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_3 = clientConfig_tRESTClient_3.getHttpConduit();

    if (clientConfig_tRESTClient_3.getEndpoint() != null
            && clientConfig_tRESTClient_3.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_3.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

	if (use_auth_tRESTClient_3 && "BASIC".equals("BASIC")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[16CsC/+8QkNFKstRPm65KzpphaoosNhhnGxZEL1t+wh62h1mpxY=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_3 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_3.setAuthorizationType("Basic");
			authPolicy_tRESTClient_3.setUserName("otman.nikraj@haddadeurope.com.partial");
			authPolicy_tRESTClient_3.setPassword(decryptedPassword_tRESTClient_3);
		conduit_tRESTClient_3.setAuthorization(authPolicy_tRESTClient_3);
	} else if (use_auth_tRESTClient_3 && "HTTP Digest".equals("BASIC")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[md/Vskjrk3tQYkettQSyTen3y2+EuH+dvgPC1lGV5ElaajilN80=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_3 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_3.setAuthorizationType("Digest");
		authPolicy_tRESTClient_3.setUserName("otman.nikraj@haddadeurope.com.partial");
		authPolicy_tRESTClient_3.setPassword(decryptedPassword_tRESTClient_3);
		conduit_tRESTClient_3.setAuthorization(authPolicy_tRESTClient_3);
	}

	if (!inOSGi) {
		conduit_tRESTClient_3.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_3.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_3 = false;
		if (use_proxy_tRESTClient_3) {
			
			 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[Im9lE2ClheVvEcbquDXJxDpOqA8IUHA2b5Yqqw==]");

			conduit_tRESTClient_3.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_3.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_3.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_3.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_3);
		}
	}
	
	

	

	
		// set Content-Type
		webClient_tRESTClient_3.type("application/x-www-form-urlencoded");
	

	
		// set Accept-Type
		webClient_tRESTClient_3.accept("*/*");
	

	
		// set optional query and header properties if any
	
		webClient_tRESTClient_3.header("Accept", "application/json");
	
		webClient_tRESTClient_3.header("Content-Type", "application/x-www-form-urlencoded");
	
	if (use_auth_tRESTClient_3 && "OAUTH2_BEARER".equals("BASIC")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_3.header("Authorization", "Bearer " + "3MVG904d7VkkD2aPrr0Zo7vyDfR3BCIidArA2fM9ScQUYkPPCOmOthm7TndYB9pZJPFlDTAIJZNkwl7X_HFWx");
	}
	
	if (use_auth_tRESTClient_3 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {
 
	final String decryptedPassword_tRESTClient_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[0yAyEva0MYg49PoQKPSwLG6FV7cnWuGq0kFYoNYzAQD3fc+TP8o=]");

        String username_tRESTClient_3 = "otman.nikraj@haddadeurope.com.partial";
        String password_tRESTClient_3 = decryptedPassword_tRESTClient_3;

        String bearerHeader_tRESTClient_3 = null;

        try {
			if (!inOSGi) {
				org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_3 =
					new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/oidc-context.xml");
				org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_3 = context_tRESTClient_3.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
				bearerHeader_tRESTClient_3 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_3, password_tRESTClient_3, oidcConfiguration_tRESTClient_3);
			}else{
				bearerHeader_tRESTClient_3 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_3, password_tRESTClient_3);
			}
		} catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_3.header("Authorization", bearerHeader_tRESTClient_3);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		javax.ws.rs.core.Form form_tRESTClient_3 = new javax.ws.rs.core.Form();
		
			form_tRESTClient_3.param("response_type" ,"code");
		
			form_tRESTClient_3.param("client_id" ,"e088065f-ea19-4863-a605-5ba3f35ec9f3");
		
			form_tRESTClient_3.param("client_secret" ,"d6d1804a-be89-4d1b-8d4b-2fc39f3eea3b");
		
			form_tRESTClient_3.param("username" ,"hanaa.beniaz@haddadeurope.com");
		
			form_tRESTClient_3.param("grant_type" ,"client_credentials");
		
			form_tRESTClient_3.param("redirect_uri" ,"https://haddadbrand.bynder.com");
		
		requestBody_tRESTClient_3 = form_tRESTClient_3;
	


	try {
		// start send request
		
			
				responseDoc_tRESTClient_3 = webClient_tRESTClient_3.post(requestBody_tRESTClient_3);
			
		


		int webClientResponseStatus_tRESTClient_3 = webClient_tRESTClient_3.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_3 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_3.getResponse());
		}

		
			if (row2 == null) {
				row2 = new row2Struct();
			}

			row2.statusCode = webClientResponseStatus_tRESTClient_3;
			
				
				Object responseObj_tRESTClient_3 = null;
				if(responseDoc_tRESTClient_3 != null && responseDoc_tRESTClient_3.hasEntity()){
					responseObj_tRESTClient_3 = responseDoc_tRESTClient_3.readEntity(responseClass_tRESTClient_3);
				
				if(responseObj_tRESTClient_3 != null){
					if (responseClass_tRESTClient_3 == String.class) {
						row2.string = (String) responseObj_tRESTClient_3;
					} else {
						routines.system.Document responseTalendDoc_tRESTClient_3 = null;
						if (null != responseObj_tRESTClient_3) {
							responseTalendDoc_tRESTClient_3 = new routines.system.Document();
							responseTalendDoc_tRESTClient_3.setDocument((org.dom4j.Document) responseObj_tRESTClient_3);
						}
						row2.body = responseTalendDoc_tRESTClient_3;
					}
				}
			}
			


			globalMap.put("tRESTClient_3_HEADERS", webClient_tRESTClient_3.getResponse().getHeaders());
			
			
			
			// handle "oneway" for PUT, POST and PATCH with empty response payload
			if (webClientResponseStatus_tRESTClient_3 == 202 && responseObj_tRESTClient_3 == null){
				row2.string = "";
				return;
			}
			
		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_3) {
		
			throw ex_tRESTClient_3;
		
	}

} catch(Exception e_tRESTClient_3) {
	
		throw new TalendException(e_tRESTClient_3, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_3++;

/**
 * [tRESTClient_3 main ] stop
 */
	
	/**
	 * [tRESTClient_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTClient_3";

	

 



/**
 * [tRESTClient_3 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tExtractJSONFields_2 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

            if(row2.string!=null){// C_01
                jsonStr_tExtractJSONFields_2 = row2.string.toString();
   
row3 = null;

	

String loopPath_tExtractJSONFields_2 = "$";
java.util.List<Object> resultset_tExtractJSONFields_2 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_2 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_2 = null;
try {
	document_tExtractJSONFields_2 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_2);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(loopPath_tExtractJSONFields_2);
	Object result_tExtractJSONFields_2 = document_tExtractJSONFields_2.read(compiledLoopPath_tExtractJSONFields_2,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_2 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_2 = (net.minidev.json.JSONArray) result_tExtractJSONFields_2;
	} else {
		resultset_tExtractJSONFields_2.add(result_tExtractJSONFields_2);
	}
	
	isStructError_tExtractJSONFields_2 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_2) {
		System.err.println(ex_tExtractJSONFields_2.getMessage());
}

String jsonPath_tExtractJSONFields_2 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_2 = null;

Object value_tExtractJSONFields_2 = null;

Object root_tExtractJSONFields_2 = null;
for(int i_tExtractJSONFields_2=0; isStructError_tExtractJSONFields_2 || (i_tExtractJSONFields_2 < resultset_tExtractJSONFields_2.size());i_tExtractJSONFields_2++){
	if(!isStructError_tExtractJSONFields_2){
		Object row_tExtractJSONFields_2 = resultset_tExtractJSONFields_2.get(i_tExtractJSONFields_2);
            row3 = null;
	row3 = new row3Struct();
	nb_line_tExtractJSONFields_2++;
	try {
		jsonPath_tExtractJSONFields_2 = "$.access_token";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				row3.access_token = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			row3.access_token = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.instance_url";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				row3.instance_url = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			row3.instance_url = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.id";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				row3.id = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			row3.id = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.token_type";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				row3.token_type = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			row3.token_type = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.issued_at";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				row3.issued_at = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			row3.issued_at = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.signature";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				row3.signature = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			row3.signature = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_2) {
		    System.err.println(ex_tExtractJSONFields_2.getMessage());
		    row3 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_2 = false;
	
//}


 


	tos_count_tExtractJSONFields_2++;

/**
 * [tExtractJSONFields_2 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

toSetVariable = null;


// # Output table : 'toSetVariable'
toSetVariable_tmp.access_token = row3.access_token ;
toSetVariable_tmp.token_type = row3.token_type ;
toSetVariable = toSetVariable_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "toSetVariable"
if(toSetVariable != null) { 



	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"toSetVariable");
					}
					

globalMap.put("tokentype", toSetVariable.token_type);
globalMap.put("accesstoken", toSetVariable.access_token);
globalMap.put("StyleColors", "");

 
     row15 = toSetVariable;


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = row15.id * 2;
//
// lowercase the name
// output_row.name = row15.name.toLowerCase();
System.out.println("TEST OAUTH " + globalMap.get("tokentype")+ " " +globalMap.get("accesstoken") );


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */

} // End of branch "toSetVariable"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row3"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tRESTClient_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTClient_3";

	

 



/**
 * [tRESTClient_3 process_data_end ] stop
 */
	
	/**
	 * [tRESTClient_3 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_3";

	


if (globalMap.get("tRESTClient_3_NB_LINE") == null) {
	globalMap.put("tRESTClient_3_NB_LINE", 1);
}

// [tRESTCliend_end]
 

ok_Hash.put("tRESTClient_3", true);
end_Hash.put("tRESTClient_3", System.currentTimeMillis());




/**
 * [tRESTClient_3 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	
   globalMap.put("tExtractJSONFields_2_NB_LINE", nb_line_tExtractJSONFields_2);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_2", true);
end_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());




/**
 * [tExtractJSONFields_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"toSetVariable");
			  	}
			  	
 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRESTClient_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tFileInputDelimited_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRESTClient_3 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_3";

	

 



/**
 * [tRESTClient_3 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRESTClient_3_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String FileName;

				public String getFileName () {
					return this.FileName;
				}
				
			    public String AssetName;

				public String getAssetName () {
					return this.AssetName;
				}
				
			    public String StyleCode;

				public String getStyleCode () {
					return this.StyleCode;
				}
				
			    public String ColorCode;

				public String getColorCode () {
					return this.ColorCode;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.FileName = readString(dis);
					
					this.AssetName = readString(dis);
					
					this.StyleCode = readString(dis);
					
					this.ColorCode = readString(dis);
					
					this.NewTags = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FileName,dos);
					
					// String
				
						writeString(this.AssetName,dos);
					
					// String
				
						writeString(this.StyleCode,dos);
					
					// String
				
						writeString(this.ColorCode,dos);
					
					// String
				
						writeString(this.NewTags,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FileName="+FileName);
		sb.append(",AssetName="+AssetName);
		sb.append(",StyleCode="+StyleCode);
		sb.append(",ColorCode="+ColorCode);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String FileName;

				public String getFileName () {
					return this.FileName;
				}
				
			    public String AssetName;

				public String getAssetName () {
					return this.AssetName;
				}
				
			    public String StyleCode;

				public String getStyleCode () {
					return this.StyleCode;
				}
				
			    public String ColorCode;

				public String getColorCode () {
					return this.ColorCode;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.FileName = readString(dis);
					
					this.AssetName = readString(dis);
					
					this.StyleCode = readString(dis);
					
					this.ColorCode = readString(dis);
					
					this.NewTags = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FileName,dos);
					
					// String
				
						writeString(this.AssetName,dos);
					
					// String
				
						writeString(this.StyleCode,dos);
					
					// String
				
						writeString(this.ColorCode,dos);
					
					// String
				
						writeString(this.NewTags,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FileName="+FileName);
		sb.append(",AssetName="+AssetName);
		sb.append(",StyleCode="+StyleCode);
		sb.append(",ColorCode="+ColorCode);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();
row17Struct row17 = new row17Struct();





	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_8", false);
		start_Hash.put("tUniqRow_8", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tUniqRow_8 = 0;
		

	
		class KeyStruct_tUniqRow_8 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String StyleCode;
					String ColorCode;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.StyleCode == null) ? 0 : this.StyleCode.hashCode());
								
								result = prime * result + ((this.ColorCode == null) ? 0 : this.ColorCode.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;
				
									if (this.StyleCode == null) {
										if (other.StyleCode != null) 
											return false;
								
									} else if (!this.StyleCode.equals(other.StyleCode))
								 
										return false;
								
									if (this.ColorCode == null) {
										if (other.ColorCode != null) 
											return false;
								
									} else if (!this.ColorCode.equals(other.ColorCode))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_8 = 0;
int nb_duplicates_tUniqRow_8 = 0;
KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>(); 

 



/**
 * [tUniqRow_8 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = context.bynderDirectory + "/input/FileAssetsName.csv";
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(context.bynderDirectory + "/input/FileAssetsName.csv", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row16 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row16 = new row16Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
							row16.FileName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
							row16.AssetName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 2;
					
							row16.StyleCode = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 3;
					
							row16.ColorCode = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 4;
					
							row16.NewTags = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 5;
					
							row16.PhotoView = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row16 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tUniqRow_8 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					
row17 = null;			
if(row16.StyleCode == null){
	finder_tUniqRow_8.StyleCode = null;
}else{
	finder_tUniqRow_8.StyleCode = row16.StyleCode.toLowerCase();
}
if(row16.ColorCode == null){
	finder_tUniqRow_8.ColorCode = null;
}else{
	finder_tUniqRow_8.ColorCode = row16.ColorCode.toLowerCase();
}	
finder_tUniqRow_8.hashCodeDirty = true;
if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
		KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

		
if(row16.StyleCode == null){
	new_tUniqRow_8.StyleCode = null;
}else{
	new_tUniqRow_8.StyleCode = row16.StyleCode.toLowerCase();
}
if(row16.ColorCode == null){
	new_tUniqRow_8.ColorCode = null;
}else{
	new_tUniqRow_8.ColorCode = row16.ColorCode.toLowerCase();
}
		
		keystUniqRow_8.add(new_tUniqRow_8);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.FileName = row16.FileName;			row17.AssetName = row16.AssetName;			row17.StyleCode = row16.StyleCode;			row17.ColorCode = row16.ColorCode;			row17.NewTags = row16.NewTags;			row17.PhotoView = row16.PhotoView;					
		nb_uniques_tUniqRow_8++;
	} else {
	  nb_duplicates_tUniqRow_8++;
	}

 


	tos_count_tUniqRow_8++;

/**
 * [tUniqRow_8 main ] stop
 */
	
	/**
	 * [tUniqRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = row17.id * 2;
//
// lowercase the name

String StyleColor = "'" + row17.StyleCode + "-" + row17.ColorCode + "',";

System.out.println("StyleColor :: " + StyleColor);


globalMap.put("StyleColors", (String)globalMap.get("StyleColors") + StyleColor ); 
System.out.println("(String)globalMap.get() ::  " + (String)globalMap.get("StyleColors")  );






    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)(context.bynderDirectory + "/input/FileAssetsName.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tUniqRow_8 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

globalMap.put("tUniqRow_8_NB_UNIQUES",nb_uniques_tUniqRow_8);
globalMap.put("tUniqRow_8_NB_DUPLICATES",nb_duplicates_tUniqRow_8);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tUniqRow_8", true);
end_Hash.put("tUniqRow_8", System.currentTimeMillis());




/**
 * [tUniqRow_8 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tSalesforceInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tUniqRow_8 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		



//(String)globalMap.get("StyleColors").remove(Character.valueOf(','));
//System.out.println("(String)globalMap.get()length ::  " + globalMap.get("StyleColors").toString().length()  );

//StringHandling.RIGHT((String)globalMap.get("StyleColors")  , globalMap.get("StyleColors").toString().length() - 1 )


if ( globalMap.get("StyleColors") == null ) {
	
	globalMap.put("StyleColors", "'-'");

} else if( globalMap.get("StyleColors").toString().length() > 0) {
  	
  	globalMap.put("StyleColors", StringHandling.LEFT((String)globalMap.get("StyleColors") , globalMap.get("StyleColors").toString().length() - 1 ));
  
  	System.out.println("(String)globalMap.get()2 ::  " + (String)globalMap.get("StyleColors")  );
}else{

	globalMap.put("StyleColors", "'-'");
}



/*
if ( globalMap.get("StyleColors").toString().length() > 0) {
  globalMap.put("StyleColors", StringHandling.LEFT((String)globalMap.get("StyleColors") , globalMap.get("StyleColors").toString().length() - 1 ));
  
  System.out.println("(String)globalMap.get()2 ::  " + (String)globalMap.get("StyleColors")  );
} else {
  globalMap.put("StyleColors", null);
}
*/





 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String Age_Group_Haddad__c;

				public String getAge_Group_Haddad__c () {
					return this.Age_Group_Haddad__c;
				}
				
			    public String Brand_Haddad__r_Name;

				public String getBrand_Haddad__r_Name () {
					return this.Brand_Haddad__r_Name;
				}
				
			    public String Category_Haddad__r_Name;

				public String getCategory_Haddad__r_Name () {
					return this.Category_Haddad__r_Name;
				}
				
			    public String Color_Code_Haddad__c;

				public String getColor_Code_Haddad__c () {
					return this.Color_Code_Haddad__c;
				}
				
			    public String Color_Haddad__r_Name;

				public String getColor_Haddad__r_Name () {
					return this.Color_Haddad__r_Name;
				}
				
			    public String Color_Haddad__r_Color_Name_External__c;

				public String getColor_Haddad__r_Color_Name_External__c () {
					return this.Color_Haddad__r_Color_Name_External__c;
				}
				
			    public String Country_of_origin_Haddad__c;

				public String getCountry_of_origin_Haddad__c () {
					return this.Country_of_origin_Haddad__c;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String Gender_Haddad__c;

				public String getGender_Haddad__c () {
					return this.Gender_Haddad__c;
				}
				
			    public boolean IsActive;

				public boolean getIsActive () {
					return this.IsActive;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Product_Status__c;

				public String getProduct_Status__c () {
					return this.Product_Status__c;
				}
				
			    public String Ref__c;

				public String getRef__c () {
					return this.Ref__c;
				}
				
			    public String Season_Product_Haddad__r_Name;

				public String getSeason_Product_Haddad__r_Name () {
					return this.Season_Product_Haddad__r_Name;
				}
				
			    public String Style_Haddad__r_Name;

				public String getStyle_Haddad__r_Name () {
					return this.Style_Haddad__r_Name;
				}
				
			    public String Year;

				public String getYear () {
					return this.Year;
				}
				
			    public String SeasonBynder;

				public String getSeasonBynder () {
					return this.SeasonBynder;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.Age_Group_Haddad__c = readString(dis);
					
					this.Brand_Haddad__r_Name = readString(dis);
					
					this.Category_Haddad__r_Name = readString(dis);
					
					this.Color_Code_Haddad__c = readString(dis);
					
					this.Color_Haddad__r_Name = readString(dis);
					
					this.Color_Haddad__r_Color_Name_External__c = readString(dis);
					
					this.Country_of_origin_Haddad__c = readString(dis);
					
					this.Description = readString(dis);
					
					this.Gender_Haddad__c = readString(dis);
					
			        this.IsActive = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Product_Status__c = readString(dis);
					
					this.Ref__c = readString(dis);
					
					this.Season_Product_Haddad__r_Name = readString(dis);
					
					this.Style_Haddad__r_Name = readString(dis);
					
					this.Year = readString(dis);
					
					this.SeasonBynder = readString(dis);
					
					this.NewTags = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Age_Group_Haddad__c,dos);
					
					// String
				
						writeString(this.Brand_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Category_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Code_Haddad__c,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Color_Name_External__c,dos);
					
					// String
				
						writeString(this.Country_of_origin_Haddad__c,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.Gender_Haddad__c,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsActive);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Product_Status__c,dos);
					
					// String
				
						writeString(this.Ref__c,dos);
					
					// String
				
						writeString(this.Season_Product_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Style_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Year,dos);
					
					// String
				
						writeString(this.SeasonBynder,dos);
					
					// String
				
						writeString(this.NewTags,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Age_Group_Haddad__c="+Age_Group_Haddad__c);
		sb.append(",Brand_Haddad__r_Name="+Brand_Haddad__r_Name);
		sb.append(",Category_Haddad__r_Name="+Category_Haddad__r_Name);
		sb.append(",Color_Code_Haddad__c="+Color_Code_Haddad__c);
		sb.append(",Color_Haddad__r_Name="+Color_Haddad__r_Name);
		sb.append(",Color_Haddad__r_Color_Name_External__c="+Color_Haddad__r_Color_Name_External__c);
		sb.append(",Country_of_origin_Haddad__c="+Country_of_origin_Haddad__c);
		sb.append(",Description="+Description);
		sb.append(",Gender_Haddad__c="+Gender_Haddad__c);
		sb.append(",IsActive="+String.valueOf(IsActive));
		sb.append(",Name="+Name);
		sb.append(",Product_Status__c="+Product_Status__c);
		sb.append(",Ref__c="+Ref__c);
		sb.append(",Season_Product_Haddad__r_Name="+Season_Product_Haddad__r_Name);
		sb.append(",Style_Haddad__r_Name="+Style_Haddad__r_Name);
		sb.append(",Year="+Year);
		sb.append(",SeasonBynder="+SeasonBynder);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String property_Photo_View;

				public String getProperty_Photo_View () {
					return this.property_Photo_View;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.property_Photo_View = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.property_Photo_View,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",extension="+extension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",property_Division="+property_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",property_Photo_View="+property_Photo_View);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String property_Photo_View;

				public String getProperty_Photo_View () {
					return this.property_Photo_View;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.property_Photo_View = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.property_Photo_View,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",extension="+extension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",property_Division="+property_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",property_Photo_View="+property_Photo_View);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
						this.statusCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
					// Integer
				
						writeInteger(this.statusCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
		sb.append(",string="+string);
		sb.append(",statusCode="+String.valueOf(statusCode));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String Age_Group_Haddad__c;

				public String getAge_Group_Haddad__c () {
					return this.Age_Group_Haddad__c;
				}
				
			    public String Brand_Haddad__r_Name;

				public String getBrand_Haddad__r_Name () {
					return this.Brand_Haddad__r_Name;
				}
				
			    public String Category_Haddad__r_Name;

				public String getCategory_Haddad__r_Name () {
					return this.Category_Haddad__r_Name;
				}
				
			    public String Color_Code_Haddad__c;

				public String getColor_Code_Haddad__c () {
					return this.Color_Code_Haddad__c;
				}
				
			    public String Color_Haddad__r_Name;

				public String getColor_Haddad__r_Name () {
					return this.Color_Haddad__r_Name;
				}
				
			    public String Color_Haddad__r_Color_Name_External__c;

				public String getColor_Haddad__r_Color_Name_External__c () {
					return this.Color_Haddad__r_Color_Name_External__c;
				}
				
			    public String Country_of_origin_Haddad__c;

				public String getCountry_of_origin_Haddad__c () {
					return this.Country_of_origin_Haddad__c;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String Gender_Haddad__c;

				public String getGender_Haddad__c () {
					return this.Gender_Haddad__c;
				}
				
			    public boolean IsActive;

				public boolean getIsActive () {
					return this.IsActive;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Product_Status__c;

				public String getProduct_Status__c () {
					return this.Product_Status__c;
				}
				
			    public String Ref__c;

				public String getRef__c () {
					return this.Ref__c;
				}
				
			    public String Season_Product_Haddad__r_Name;

				public String getSeason_Product_Haddad__r_Name () {
					return this.Season_Product_Haddad__r_Name;
				}
				
			    public String Style_Haddad__r_Name;

				public String getStyle_Haddad__r_Name () {
					return this.Style_Haddad__r_Name;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.Age_Group_Haddad__c = readString(dis);
					
					this.Brand_Haddad__r_Name = readString(dis);
					
					this.Category_Haddad__r_Name = readString(dis);
					
					this.Color_Code_Haddad__c = readString(dis);
					
					this.Color_Haddad__r_Name = readString(dis);
					
					this.Color_Haddad__r_Color_Name_External__c = readString(dis);
					
					this.Country_of_origin_Haddad__c = readString(dis);
					
					this.Description = readString(dis);
					
					this.Gender_Haddad__c = readString(dis);
					
			        this.IsActive = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Product_Status__c = readString(dis);
					
					this.Ref__c = readString(dis);
					
					this.Season_Product_Haddad__r_Name = readString(dis);
					
					this.Style_Haddad__r_Name = readString(dis);
					
					this.NewTags = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Age_Group_Haddad__c,dos);
					
					// String
				
						writeString(this.Brand_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Category_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Code_Haddad__c,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Color_Name_External__c,dos);
					
					// String
				
						writeString(this.Country_of_origin_Haddad__c,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.Gender_Haddad__c,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsActive);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Product_Status__c,dos);
					
					// String
				
						writeString(this.Ref__c,dos);
					
					// String
				
						writeString(this.Season_Product_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Style_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.NewTags,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Age_Group_Haddad__c="+Age_Group_Haddad__c);
		sb.append(",Brand_Haddad__r_Name="+Brand_Haddad__r_Name);
		sb.append(",Category_Haddad__r_Name="+Category_Haddad__r_Name);
		sb.append(",Color_Code_Haddad__c="+Color_Code_Haddad__c);
		sb.append(",Color_Haddad__r_Name="+Color_Haddad__r_Name);
		sb.append(",Color_Haddad__r_Color_Name_External__c="+Color_Haddad__r_Color_Name_External__c);
		sb.append(",Country_of_origin_Haddad__c="+Country_of_origin_Haddad__c);
		sb.append(",Description="+Description);
		sb.append(",Gender_Haddad__c="+Gender_Haddad__c);
		sb.append(",IsActive="+String.valueOf(IsActive));
		sb.append(",Name="+Name);
		sb.append(",Product_Status__c="+Product_Status__c);
		sb.append(",Ref__c="+Ref__c);
		sb.append(",Season_Product_Haddad__r_Name="+Season_Product_Haddad__r_Name);
		sb.append(",Style_Haddad__r_Name="+Style_Haddad__r_Name);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String Age_Group_Haddad__c;

				public String getAge_Group_Haddad__c () {
					return this.Age_Group_Haddad__c;
				}
				
			    public String Brand_Haddad__r_Name;

				public String getBrand_Haddad__r_Name () {
					return this.Brand_Haddad__r_Name;
				}
				
			    public String Category_Haddad__r_Name;

				public String getCategory_Haddad__r_Name () {
					return this.Category_Haddad__r_Name;
				}
				
			    public String Color_Code_Haddad__c;

				public String getColor_Code_Haddad__c () {
					return this.Color_Code_Haddad__c;
				}
				
			    public String Color_Haddad__r_Name;

				public String getColor_Haddad__r_Name () {
					return this.Color_Haddad__r_Name;
				}
				
			    public String Color_Haddad__r_Color_Name_External__c;

				public String getColor_Haddad__r_Color_Name_External__c () {
					return this.Color_Haddad__r_Color_Name_External__c;
				}
				
			    public String Country_of_origin_Haddad__c;

				public String getCountry_of_origin_Haddad__c () {
					return this.Country_of_origin_Haddad__c;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String Gender_Haddad__c;

				public String getGender_Haddad__c () {
					return this.Gender_Haddad__c;
				}
				
			    public boolean IsActive;

				public boolean getIsActive () {
					return this.IsActive;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Product_Status__c;

				public String getProduct_Status__c () {
					return this.Product_Status__c;
				}
				
			    public String Ref__c;

				public String getRef__c () {
					return this.Ref__c;
				}
				
			    public String Season_Product_Haddad__r_Name;

				public String getSeason_Product_Haddad__r_Name () {
					return this.Season_Product_Haddad__r_Name;
				}
				
			    public String Style_Haddad__r_Name;

				public String getStyle_Haddad__r_Name () {
					return this.Style_Haddad__r_Name;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.Age_Group_Haddad__c = readString(dis);
					
					this.Brand_Haddad__r_Name = readString(dis);
					
					this.Category_Haddad__r_Name = readString(dis);
					
					this.Color_Code_Haddad__c = readString(dis);
					
					this.Color_Haddad__r_Name = readString(dis);
					
					this.Color_Haddad__r_Color_Name_External__c = readString(dis);
					
					this.Country_of_origin_Haddad__c = readString(dis);
					
					this.Description = readString(dis);
					
					this.Gender_Haddad__c = readString(dis);
					
			        this.IsActive = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Product_Status__c = readString(dis);
					
					this.Ref__c = readString(dis);
					
					this.Season_Product_Haddad__r_Name = readString(dis);
					
					this.Style_Haddad__r_Name = readString(dis);
					
					this.NewTags = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Age_Group_Haddad__c,dos);
					
					// String
				
						writeString(this.Brand_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Category_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Code_Haddad__c,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Color_Name_External__c,dos);
					
					// String
				
						writeString(this.Country_of_origin_Haddad__c,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.Gender_Haddad__c,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsActive);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Product_Status__c,dos);
					
					// String
				
						writeString(this.Ref__c,dos);
					
					// String
				
						writeString(this.Season_Product_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Style_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.NewTags,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Age_Group_Haddad__c="+Age_Group_Haddad__c);
		sb.append(",Brand_Haddad__r_Name="+Brand_Haddad__r_Name);
		sb.append(",Category_Haddad__r_Name="+Category_Haddad__r_Name);
		sb.append(",Color_Code_Haddad__c="+Color_Code_Haddad__c);
		sb.append(",Color_Haddad__r_Name="+Color_Haddad__r_Name);
		sb.append(",Color_Haddad__r_Color_Name_External__c="+Color_Haddad__r_Color_Name_External__c);
		sb.append(",Country_of_origin_Haddad__c="+Country_of_origin_Haddad__c);
		sb.append(",Description="+Description);
		sb.append(",Gender_Haddad__c="+Gender_Haddad__c);
		sb.append(",IsActive="+String.valueOf(IsActive));
		sb.append(",Name="+Name);
		sb.append(",Product_Status__c="+Product_Status__c);
		sb.append(",Ref__c="+Ref__c);
		sb.append(",Season_Product_Haddad__r_Name="+Season_Product_Haddad__r_Name);
		sb.append(",Style_Haddad__r_Name="+Style_Haddad__r_Name);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputSFStruct implements routines.system.IPersistableRow<outputSFStruct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String Age_Group_Haddad__c;

				public String getAge_Group_Haddad__c () {
					return this.Age_Group_Haddad__c;
				}
				
			    public String Brand_Haddad__r_Name;

				public String getBrand_Haddad__r_Name () {
					return this.Brand_Haddad__r_Name;
				}
				
			    public String Category_Haddad__r_Name;

				public String getCategory_Haddad__r_Name () {
					return this.Category_Haddad__r_Name;
				}
				
			    public String Color_Code_Haddad__c;

				public String getColor_Code_Haddad__c () {
					return this.Color_Code_Haddad__c;
				}
				
			    public String Color_Haddad__r_Name;

				public String getColor_Haddad__r_Name () {
					return this.Color_Haddad__r_Name;
				}
				
			    public String Color_Haddad__r_Color_Name_External__c;

				public String getColor_Haddad__r_Color_Name_External__c () {
					return this.Color_Haddad__r_Color_Name_External__c;
				}
				
			    public String Country_of_origin_Haddad__c;

				public String getCountry_of_origin_Haddad__c () {
					return this.Country_of_origin_Haddad__c;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String Gender_Haddad__c;

				public String getGender_Haddad__c () {
					return this.Gender_Haddad__c;
				}
				
			    public boolean IsActive;

				public boolean getIsActive () {
					return this.IsActive;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Product_Status__c;

				public String getProduct_Status__c () {
					return this.Product_Status__c;
				}
				
			    public String Ref__c;

				public String getRef__c () {
					return this.Ref__c;
				}
				
			    public String Season_Product_Haddad__r_Name;

				public String getSeason_Product_Haddad__r_Name () {
					return this.Season_Product_Haddad__r_Name;
				}
				
			    public String Style_Haddad__r_Name;

				public String getStyle_Haddad__r_Name () {
					return this.Style_Haddad__r_Name;
				}
				
			    public String Year;

				public String getYear () {
					return this.Year;
				}
				
			    public String SeasonBynder;

				public String getSeasonBynder () {
					return this.SeasonBynder;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.Age_Group_Haddad__c = readString(dis);
					
					this.Brand_Haddad__r_Name = readString(dis);
					
					this.Category_Haddad__r_Name = readString(dis);
					
					this.Color_Code_Haddad__c = readString(dis);
					
					this.Color_Haddad__r_Name = readString(dis);
					
					this.Color_Haddad__r_Color_Name_External__c = readString(dis);
					
					this.Country_of_origin_Haddad__c = readString(dis);
					
					this.Description = readString(dis);
					
					this.Gender_Haddad__c = readString(dis);
					
			        this.IsActive = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Product_Status__c = readString(dis);
					
					this.Ref__c = readString(dis);
					
					this.Season_Product_Haddad__r_Name = readString(dis);
					
					this.Style_Haddad__r_Name = readString(dis);
					
					this.Year = readString(dis);
					
					this.SeasonBynder = readString(dis);
					
					this.NewTags = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Age_Group_Haddad__c,dos);
					
					// String
				
						writeString(this.Brand_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Category_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Code_Haddad__c,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Color_Name_External__c,dos);
					
					// String
				
						writeString(this.Country_of_origin_Haddad__c,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.Gender_Haddad__c,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsActive);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Product_Status__c,dos);
					
					// String
				
						writeString(this.Ref__c,dos);
					
					// String
				
						writeString(this.Season_Product_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Style_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Year,dos);
					
					// String
				
						writeString(this.SeasonBynder,dos);
					
					// String
				
						writeString(this.NewTags,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Age_Group_Haddad__c="+Age_Group_Haddad__c);
		sb.append(",Brand_Haddad__r_Name="+Brand_Haddad__r_Name);
		sb.append(",Category_Haddad__r_Name="+Category_Haddad__r_Name);
		sb.append(",Color_Code_Haddad__c="+Color_Code_Haddad__c);
		sb.append(",Color_Haddad__r_Name="+Color_Haddad__r_Name);
		sb.append(",Color_Haddad__r_Color_Name_External__c="+Color_Haddad__r_Color_Name_External__c);
		sb.append(",Country_of_origin_Haddad__c="+Country_of_origin_Haddad__c);
		sb.append(",Description="+Description);
		sb.append(",Gender_Haddad__c="+Gender_Haddad__c);
		sb.append(",IsActive="+String.valueOf(IsActive));
		sb.append(",Name="+Name);
		sb.append(",Product_Status__c="+Product_Status__c);
		sb.append(",Ref__c="+Ref__c);
		sb.append(",Season_Product_Haddad__r_Name="+Season_Product_Haddad__r_Name);
		sb.append(",Style_Haddad__r_Name="+Style_Haddad__r_Name);
		sb.append(",Year="+Year);
		sb.append(",SeasonBynder="+SeasonBynder);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputSFStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String ProductCode;

				public String getProductCode () {
					return this.ProductCode;
				}
				
			    public String Product_Code_External_Id__c;

				public String getProduct_Code_External_Id__c () {
					return this.Product_Code_External_Id__c;
				}
				
			    public String Age_Group_Haddad__c;

				public String getAge_Group_Haddad__c () {
					return this.Age_Group_Haddad__c;
				}
				
			    public String Brand_Haddad__r_Name;

				public String getBrand_Haddad__r_Name () {
					return this.Brand_Haddad__r_Name;
				}
				
			    public String Category_Haddad__r_Name;

				public String getCategory_Haddad__r_Name () {
					return this.Category_Haddad__r_Name;
				}
				
			    public String Color_Code_Haddad__c;

				public String getColor_Code_Haddad__c () {
					return this.Color_Code_Haddad__c;
				}
				
			    public String Color_Haddad__r_Name;

				public String getColor_Haddad__r_Name () {
					return this.Color_Haddad__r_Name;
				}
				
			    public String Color_Haddad__r_Color_Name_External__c;

				public String getColor_Haddad__r_Color_Name_External__c () {
					return this.Color_Haddad__r_Color_Name_External__c;
				}
				
			    public String Country_of_origin_Haddad__c;

				public String getCountry_of_origin_Haddad__c () {
					return this.Country_of_origin_Haddad__c;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String Gender_Haddad__c;

				public String getGender_Haddad__c () {
					return this.Gender_Haddad__c;
				}
				
			    public boolean IsActive;

				public boolean getIsActive () {
					return this.IsActive;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Product_Status__c;

				public String getProduct_Status__c () {
					return this.Product_Status__c;
				}
				
			    public String Ref__c;

				public String getRef__c () {
					return this.Ref__c;
				}
				
			    public String Season_Product_Haddad__r_Name;

				public String getSeason_Product_Haddad__r_Name () {
					return this.Season_Product_Haddad__r_Name;
				}
				
			    public String Style_Haddad__r_Name;

				public String getStyle_Haddad__r_Name () {
					return this.Style_Haddad__r_Name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.ProductCode = readString(dis);
					
					this.Product_Code_External_Id__c = readString(dis);
					
					this.Age_Group_Haddad__c = readString(dis);
					
					this.Brand_Haddad__r_Name = readString(dis);
					
					this.Category_Haddad__r_Name = readString(dis);
					
					this.Color_Code_Haddad__c = readString(dis);
					
					this.Color_Haddad__r_Name = readString(dis);
					
					this.Color_Haddad__r_Color_Name_External__c = readString(dis);
					
					this.Country_of_origin_Haddad__c = readString(dis);
					
					this.Description = readString(dis);
					
					this.Gender_Haddad__c = readString(dis);
					
			        this.IsActive = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Product_Status__c = readString(dis);
					
					this.Ref__c = readString(dis);
					
					this.Season_Product_Haddad__r_Name = readString(dis);
					
					this.Style_Haddad__r_Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProductCode,dos);
					
					// String
				
						writeString(this.Product_Code_External_Id__c,dos);
					
					// String
				
						writeString(this.Age_Group_Haddad__c,dos);
					
					// String
				
						writeString(this.Brand_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Category_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Code_Haddad__c,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Color_Name_External__c,dos);
					
					// String
				
						writeString(this.Country_of_origin_Haddad__c,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.Gender_Haddad__c,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsActive);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Product_Status__c,dos);
					
					// String
				
						writeString(this.Ref__c,dos);
					
					// String
				
						writeString(this.Season_Product_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Style_Haddad__r_Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductCode="+ProductCode);
		sb.append(",Product_Code_External_Id__c="+Product_Code_External_Id__c);
		sb.append(",Age_Group_Haddad__c="+Age_Group_Haddad__c);
		sb.append(",Brand_Haddad__r_Name="+Brand_Haddad__r_Name);
		sb.append(",Category_Haddad__r_Name="+Category_Haddad__r_Name);
		sb.append(",Color_Code_Haddad__c="+Color_Code_Haddad__c);
		sb.append(",Color_Haddad__r_Name="+Color_Haddad__r_Name);
		sb.append(",Color_Haddad__r_Color_Name_External__c="+Color_Haddad__r_Color_Name_External__c);
		sb.append(",Country_of_origin_Haddad__c="+Country_of_origin_Haddad__c);
		sb.append(",Description="+Description);
		sb.append(",Gender_Haddad__c="+Gender_Haddad__c);
		sb.append(",IsActive="+String.valueOf(IsActive));
		sb.append(",Name="+Name);
		sb.append(",Product_Status__c="+Product_Status__c);
		sb.append(",Ref__c="+Ref__c);
		sb.append(",Season_Product_Haddad__r_Name="+Season_Product_Haddad__r_Name);
		sb.append(",Style_Haddad__r_Name="+Style_Haddad__r_Name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String ProductCode;

				public String getProductCode () {
					return this.ProductCode;
				}
				
			    public String Product_Code_External_Id__c;

				public String getProduct_Code_External_Id__c () {
					return this.Product_Code_External_Id__c;
				}
				
			    public String Age_Group_Haddad__c;

				public String getAge_Group_Haddad__c () {
					return this.Age_Group_Haddad__c;
				}
				
			    public String Brand_Haddad__r_Name;

				public String getBrand_Haddad__r_Name () {
					return this.Brand_Haddad__r_Name;
				}
				
			    public String Category_Haddad__r_Name;

				public String getCategory_Haddad__r_Name () {
					return this.Category_Haddad__r_Name;
				}
				
			    public String Color_Code_Haddad__c;

				public String getColor_Code_Haddad__c () {
					return this.Color_Code_Haddad__c;
				}
				
			    public String Color_Haddad__r_Name;

				public String getColor_Haddad__r_Name () {
					return this.Color_Haddad__r_Name;
				}
				
			    public String Color_Haddad__r_Color_Name_External__c;

				public String getColor_Haddad__r_Color_Name_External__c () {
					return this.Color_Haddad__r_Color_Name_External__c;
				}
				
			    public String Country_of_origin_Haddad__c;

				public String getCountry_of_origin_Haddad__c () {
					return this.Country_of_origin_Haddad__c;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String Gender_Haddad__c;

				public String getGender_Haddad__c () {
					return this.Gender_Haddad__c;
				}
				
			    public boolean IsActive;

				public boolean getIsActive () {
					return this.IsActive;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Product_Status__c;

				public String getProduct_Status__c () {
					return this.Product_Status__c;
				}
				
			    public String Ref__c;

				public String getRef__c () {
					return this.Ref__c;
				}
				
			    public String Season_Product_Haddad__r_Name;

				public String getSeason_Product_Haddad__r_Name () {
					return this.Season_Product_Haddad__r_Name;
				}
				
			    public String Style_Haddad__r_Name;

				public String getStyle_Haddad__r_Name () {
					return this.Style_Haddad__r_Name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.ProductCode = readString(dis);
					
					this.Product_Code_External_Id__c = readString(dis);
					
					this.Age_Group_Haddad__c = readString(dis);
					
					this.Brand_Haddad__r_Name = readString(dis);
					
					this.Category_Haddad__r_Name = readString(dis);
					
					this.Color_Code_Haddad__c = readString(dis);
					
					this.Color_Haddad__r_Name = readString(dis);
					
					this.Color_Haddad__r_Color_Name_External__c = readString(dis);
					
					this.Country_of_origin_Haddad__c = readString(dis);
					
					this.Description = readString(dis);
					
					this.Gender_Haddad__c = readString(dis);
					
			        this.IsActive = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Product_Status__c = readString(dis);
					
					this.Ref__c = readString(dis);
					
					this.Season_Product_Haddad__r_Name = readString(dis);
					
					this.Style_Haddad__r_Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProductCode,dos);
					
					// String
				
						writeString(this.Product_Code_External_Id__c,dos);
					
					// String
				
						writeString(this.Age_Group_Haddad__c,dos);
					
					// String
				
						writeString(this.Brand_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Category_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Code_Haddad__c,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Color_Name_External__c,dos);
					
					// String
				
						writeString(this.Country_of_origin_Haddad__c,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.Gender_Haddad__c,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsActive);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Product_Status__c,dos);
					
					// String
				
						writeString(this.Ref__c,dos);
					
					// String
				
						writeString(this.Season_Product_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Style_Haddad__r_Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductCode="+ProductCode);
		sb.append(",Product_Code_External_Id__c="+Product_Code_External_Id__c);
		sb.append(",Age_Group_Haddad__c="+Age_Group_Haddad__c);
		sb.append(",Brand_Haddad__r_Name="+Brand_Haddad__r_Name);
		sb.append(",Category_Haddad__r_Name="+Category_Haddad__r_Name);
		sb.append(",Color_Code_Haddad__c="+Color_Code_Haddad__c);
		sb.append(",Color_Haddad__r_Name="+Color_Haddad__r_Name);
		sb.append(",Color_Haddad__r_Color_Name_External__c="+Color_Haddad__r_Color_Name_External__c);
		sb.append(",Country_of_origin_Haddad__c="+Country_of_origin_Haddad__c);
		sb.append(",Description="+Description);
		sb.append(",Gender_Haddad__c="+Gender_Haddad__c);
		sb.append(",IsActive="+String.valueOf(IsActive));
		sb.append(",Name="+Name);
		sb.append(",Product_Status__c="+Product_Status__c);
		sb.append(",Ref__c="+Ref__c);
		sb.append(",Season_Product_Haddad__r_Name="+Season_Product_Haddad__r_Name);
		sb.append(",Style_Haddad__r_Name="+Style_Haddad__r_Name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tSalesforceInput_1Struct implements routines.system.IPersistableRow<after_tSalesforceInput_1Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String ProductCode;

				public String getProductCode () {
					return this.ProductCode;
				}
				
			    public String Product_Code_External_Id__c;

				public String getProduct_Code_External_Id__c () {
					return this.Product_Code_External_Id__c;
				}
				
			    public String Age_Group_Haddad__c;

				public String getAge_Group_Haddad__c () {
					return this.Age_Group_Haddad__c;
				}
				
			    public String Brand_Haddad__r_Name;

				public String getBrand_Haddad__r_Name () {
					return this.Brand_Haddad__r_Name;
				}
				
			    public String Category_Haddad__r_Name;

				public String getCategory_Haddad__r_Name () {
					return this.Category_Haddad__r_Name;
				}
				
			    public String Color_Code_Haddad__c;

				public String getColor_Code_Haddad__c () {
					return this.Color_Code_Haddad__c;
				}
				
			    public String Color_Haddad__r_Name;

				public String getColor_Haddad__r_Name () {
					return this.Color_Haddad__r_Name;
				}
				
			    public String Color_Haddad__r_Color_Name_External__c;

				public String getColor_Haddad__r_Color_Name_External__c () {
					return this.Color_Haddad__r_Color_Name_External__c;
				}
				
			    public String Country_of_origin_Haddad__c;

				public String getCountry_of_origin_Haddad__c () {
					return this.Country_of_origin_Haddad__c;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String Gender_Haddad__c;

				public String getGender_Haddad__c () {
					return this.Gender_Haddad__c;
				}
				
			    public boolean IsActive;

				public boolean getIsActive () {
					return this.IsActive;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Product_Status__c;

				public String getProduct_Status__c () {
					return this.Product_Status__c;
				}
				
			    public String Ref__c;

				public String getRef__c () {
					return this.Ref__c;
				}
				
			    public String Season_Product_Haddad__r_Name;

				public String getSeason_Product_Haddad__r_Name () {
					return this.Season_Product_Haddad__r_Name;
				}
				
			    public String Style_Haddad__r_Name;

				public String getStyle_Haddad__r_Name () {
					return this.Style_Haddad__r_Name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.ProductCode = readString(dis);
					
					this.Product_Code_External_Id__c = readString(dis);
					
					this.Age_Group_Haddad__c = readString(dis);
					
					this.Brand_Haddad__r_Name = readString(dis);
					
					this.Category_Haddad__r_Name = readString(dis);
					
					this.Color_Code_Haddad__c = readString(dis);
					
					this.Color_Haddad__r_Name = readString(dis);
					
					this.Color_Haddad__r_Color_Name_External__c = readString(dis);
					
					this.Country_of_origin_Haddad__c = readString(dis);
					
					this.Description = readString(dis);
					
					this.Gender_Haddad__c = readString(dis);
					
			        this.IsActive = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Product_Status__c = readString(dis);
					
					this.Ref__c = readString(dis);
					
					this.Season_Product_Haddad__r_Name = readString(dis);
					
					this.Style_Haddad__r_Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProductCode,dos);
					
					// String
				
						writeString(this.Product_Code_External_Id__c,dos);
					
					// String
				
						writeString(this.Age_Group_Haddad__c,dos);
					
					// String
				
						writeString(this.Brand_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Category_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Code_Haddad__c,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Color_Haddad__r_Color_Name_External__c,dos);
					
					// String
				
						writeString(this.Country_of_origin_Haddad__c,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.Gender_Haddad__c,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IsActive);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Product_Status__c,dos);
					
					// String
				
						writeString(this.Ref__c,dos);
					
					// String
				
						writeString(this.Season_Product_Haddad__r_Name,dos);
					
					// String
				
						writeString(this.Style_Haddad__r_Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductCode="+ProductCode);
		sb.append(",Product_Code_External_Id__c="+Product_Code_External_Id__c);
		sb.append(",Age_Group_Haddad__c="+Age_Group_Haddad__c);
		sb.append(",Brand_Haddad__r_Name="+Brand_Haddad__r_Name);
		sb.append(",Category_Haddad__r_Name="+Category_Haddad__r_Name);
		sb.append(",Color_Code_Haddad__c="+Color_Code_Haddad__c);
		sb.append(",Color_Haddad__r_Name="+Color_Haddad__r_Name);
		sb.append(",Color_Haddad__r_Color_Name_External__c="+Color_Haddad__r_Color_Name_External__c);
		sb.append(",Country_of_origin_Haddad__c="+Country_of_origin_Haddad__c);
		sb.append(",Description="+Description);
		sb.append(",Gender_Haddad__c="+Gender_Haddad__c);
		sb.append(",IsActive="+String.valueOf(IsActive));
		sb.append(",Name="+Name);
		sb.append(",Product_Status__c="+Product_Status__c);
		sb.append(",Ref__c="+Ref__c);
		sb.append(",Season_Product_Haddad__r_Name="+Season_Product_Haddad__r_Name);
		sb.append(",Style_Haddad__r_Name="+Style_Haddad__r_Name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tSalesforceInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_3Process(globalMap);

		row5Struct row5 = new row5Struct();
row12Struct row12 = new row12Struct();
out5Struct out5 = new out5Struct();
row7Struct row7 = new row7Struct();
row1Struct row1 = new row1Struct();
row4Struct row4 = new row4Struct();
out3Struct out3 = new out3Struct();
outputSFStruct outputSF = new outputSFStruct();
row11Struct row11 = new row11Struct();










	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.bynderDirectory + "/temp/tempBynderExtract.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("description");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("idHash");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("tags");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("brandId");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("name");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Color_Code");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Style_Code");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Brand");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("extension");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Style_Reference");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("isPublic");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Season");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Year");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Asset_Type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Asset_Subtype");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("userCreated");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("filename");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Gender");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Age_Group");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Sub_Division");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Division");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Terms_of_Use");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("property_Photo_View");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_1", false);
		start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tExtractJSONFields_1 = 0;
		

int nb_line_tExtractJSONFields_1 = 0;
String jsonStr_tExtractJSONFields_1 = "";

	

class JsonPathCache_tExtractJSONFields_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

 



/**
 * [tExtractJSONFields_1 begin ] stop
 */



	
	/**
	 * [tRESTClient_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_4", false);
		start_Hash.put("tRESTClient_4", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tRESTClient_4 = 0;
		

 



/**
 * [tRESTClient_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String Color_Haddad__r_Color_Name_External__c;
					String Style_Haddad__r_Name;
					String PhotoView;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.Color_Haddad__r_Color_Name_External__c == null) ? 0 : this.Color_Haddad__r_Color_Name_External__c.hashCode());
								
								result = prime * result + ((this.Style_Haddad__r_Name == null) ? 0 : this.Style_Haddad__r_Name.hashCode());
								
								result = prime * result + ((this.PhotoView == null) ? 0 : this.PhotoView.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.Color_Haddad__r_Color_Name_External__c == null) {
										if (other.Color_Haddad__r_Color_Name_External__c != null) 
											return false;
								
									} else if (!this.Color_Haddad__r_Color_Name_External__c.equals(other.Color_Haddad__r_Color_Name_External__c))
								 
										return false;
								
									if (this.Style_Haddad__r_Name == null) {
										if (other.Style_Haddad__r_Name != null) 
											return false;
								
									} else if (!this.Style_Haddad__r_Name.equals(other.Style_Haddad__r_Name))
								 
										return false;
								
									if (this.PhotoView == null) {
										if (other.PhotoView != null) 
											return false;
								
									} else if (!this.PhotoView.equals(other.PhotoView))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.bynderDirectory + "/temp/tempSFExtract.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("Age_Group_Haddad__c");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Brand_Haddad__r_Name");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Category_Haddad__r_Name");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Color_Code_Haddad__c");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Color_Haddad__r_Name");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Color_Haddad__r_Color_Name_External__c");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Country_of_origin_Haddad__c");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Description");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Gender_Haddad__c");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("IsActive");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Name");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Product_Status__c");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Ref__c");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Season_Product_Haddad__r_Name");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Style_Haddad__r_Name");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Year");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SeasonBynder");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("NewTags");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("PhotoView");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"outputSF");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0; 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	String var1;
	String var2;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
outputSFStruct outputSF_tmp = new outputSFStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_4", false);
		start_Hash.put("tUniqRow_4", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tUniqRow_4 = 0;
		

int nb_uniques_tUniqRow_4 = 0;
int nb_duplicates_tUniqRow_4 = 0; 

 



/**
 * [tUniqRow_4 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_1", false);
		start_Hash.put("tSalesforceInput_1", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_1";

	
		int tos_count_tSalesforceInput_1 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_1 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_1 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_1.createRuntimeProperties();
 		                    props_tSalesforceInput_1.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_1.setValue("manualQuery",
 		                    true);
 		                    
 		                    props_tSalesforceInput_1.setValue("query",
 		                    "SELECT  ProductCode,Product_Code_External_Id__c, Age_Group_Haddad__c,Brand_Haddad__r.Name,Category_Haddad__r.Name,Color"
+"_Code_Haddad__c,Color_Haddad__r.Name, Color_Haddad__r.Color_Name_External__c, Country_of_origin_Haddad__c,Description,Ge"
+"nder_Haddad__c,IsActive,Name,Product_Status__c,Ref__c,Season_Product_Haddad__r.Name,Style_Haddad__r.Name FROM Product2 W"
+"here  Style_Haddad__c!='' and Name in (" + (String)globalMap.get("StyleColors") + ") ");
 		                    
 		                    props_tSalesforceInput_1.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_1.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_1.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("endpoint",
 		                    "https://login.salesforce.com/services/Soap/u/45.0");
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("timeout",
 		                    300000);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("clientId",
 		                    "");
 		                    
 		                        props_tSalesforceInput_1.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[M9/Qx571Y2Tt7eMtGBLz3OfjPZlLIOD/j3KTNhUNJo3mXVvIANl643+6W4zzXeFtL9A+/F4=]"));
 		                        
 		                    props_tSalesforceInput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.userPassword.setValue("userId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_1.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[R9mHNgPfbwnBDl4425AW9ZiQOW3bG63jcHN8nbARl9ubBEzJOP4ADcl/CE5q]"));
 		                        
 		                    props_tSalesforceInput_1.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_1.module.setValue("moduleName",
 		                    "");
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("endpoint",
 		                    "https://login.salesforce.com/services/Soap/u/45.0");
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("timeout",
 		                    300000);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("clientId",
 		                    "");
 		                    
 		                        props_tSalesforceInput_1.module.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[c2Dfvly9SQ+Z3PtlCQsRbz04JvnqdCSRiFNvsHWdJSk2pN2paUwWpbfUoJpD0DbsbK3z2pQ=]"));
 		                        
 		                    props_tSalesforceInput_1.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.userPassword.setValue("userId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_1.module.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[uxmeWM6kGRvDb5ksxffcy2q/cDc00O+9zRaqDvqyfvPRCXXZmfCOawJOR1ZU]"));
 		                        
 		                    props_tSalesforceInput_1.module.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"GuessedSchema\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"ProductCode\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Product_Code_External_Id__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Age_Group_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Brand_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Category_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Color_Code_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"1300\"},{",s);
     		                    						
     		                    						a("\"name\":\"Color_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Color_Haddad__r_Color_Name_External__c\",\"type\":\"string\"},{",s);
     		                    						
     		                    						a("\"name\":\"Country_of_origin_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Description\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"4000\"},{",s);
     		                    						
     		                    						a("\"name\":\"Gender_Haddad__c\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsActive\",\"type\":\"boolean\"},{",s);
     		                    						
     		                    						a("\"name\":\"Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Product_Status__c\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Ref__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"1300\"},{",s);
     		                    						
     		                    						a("\"name\":\"Season_Product_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Style_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_1_1_fisrt sst_tSalesforceInput_1_1_fisrt = new SchemaSettingTool_tSalesforceInput_1_1_fisrt();
 		                    
 		                    props_tSalesforceInput_1.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_1_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
globalMap.put("tSalesforceInput_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.0.SNAPSHOT");
java.net.URL mappings_url_tSalesforceInput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_1_MAPPINGS_URL", mappings_url_tSalesforceInput_1);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_1 = null;
topology_tSalesforceInput_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_1 = def_tSalesforceInput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_1, topology_tSalesforceInput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_1 = def_tSalesforceInput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_1 = componentRuntime_tSalesforceInput_1.initialize(container_tSalesforceInput_1, props_tSalesforceInput_1);

if (initVr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_1.getMessage());
}

if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_1;
	compDriverInitialization_tSalesforceInput_1.runAtDriver(container_tSalesforceInput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_1 = null;
if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_1;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_1 = sourceOrSink_tSalesforceInput_1.validate(container_tSalesforceInput_1);
	if (vr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_1.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_1 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_1;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_1 =
            source_tSalesforceInput_1.createReader(container_tSalesforceInput_1);
	reader_tSalesforceInput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_1, container_tSalesforceInput_1);

        boolean multi_output_is_allowed_tSalesforceInput_1 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_1 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_1.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_1 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_1 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_1 = props_tSalesforceInput_1.getSchema(c_tSalesforceInput_1, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_1 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_1, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_1 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_1 = reader_tSalesforceInput_1.start();

    resourceMap.put("reader_tSalesforceInput_1", reader_tSalesforceInput_1);

    for (; available_tSalesforceInput_1; available_tSalesforceInput_1 = reader_tSalesforceInput_1.advance()) {
    	nb_line_tSalesforceInput_1++;

    	
        if (multi_output_is_allowed_tSalesforceInput_1) {
                row5 = null;

        }

        try {
            Object data_tSalesforceInput_1 = reader_tSalesforceInput_1.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_1) {
                    row5 = new row5Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_1 == null) {
            factory_tSalesforceInput_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_1.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_1.setWrapped(factory_tSalesforceInput_1.convertToAvro(data_tSalesforceInput_1));
                Object columnValue_0_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(0);
                        row5.ProductCode = (String) (columnValue_0_tSalesforceInput_1);
                Object columnValue_1_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(1);
                        row5.Product_Code_External_Id__c = (String) (columnValue_1_tSalesforceInput_1);
                Object columnValue_2_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(2);
                        row5.Age_Group_Haddad__c = (String) (columnValue_2_tSalesforceInput_1);
                Object columnValue_3_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(3);
                        row5.Brand_Haddad__r_Name = (String) (columnValue_3_tSalesforceInput_1);
                Object columnValue_4_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(4);
                        row5.Category_Haddad__r_Name = (String) (columnValue_4_tSalesforceInput_1);
                Object columnValue_5_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(5);
                        row5.Color_Code_Haddad__c = (String) (columnValue_5_tSalesforceInput_1);
                Object columnValue_6_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(6);
                        row5.Color_Haddad__r_Name = (String) (columnValue_6_tSalesforceInput_1);
                Object columnValue_7_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(7);
                        row5.Color_Haddad__r_Color_Name_External__c = (String) (columnValue_7_tSalesforceInput_1);
                Object columnValue_8_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(8);
                        row5.Country_of_origin_Haddad__c = (String) (columnValue_8_tSalesforceInput_1);
                Object columnValue_9_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(9);
                        row5.Description = (String) (columnValue_9_tSalesforceInput_1);
                Object columnValue_10_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(10);
                        row5.Gender_Haddad__c = (String) (columnValue_10_tSalesforceInput_1);
                Object columnValue_11_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(11);
                    if (columnValue_11_tSalesforceInput_1 == null) {
                        row5.IsActive = false;
                    } else {
                            row5.IsActive = (boolean) (columnValue_11_tSalesforceInput_1);
                    }
                Object columnValue_12_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(12);
                        row5.Name = (String) (columnValue_12_tSalesforceInput_1);
                Object columnValue_13_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(13);
                        row5.Product_Status__c = (String) (columnValue_13_tSalesforceInput_1);
                Object columnValue_14_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(14);
                        row5.Ref__c = (String) (columnValue_14_tSalesforceInput_1);
                Object columnValue_15_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(15);
                        row5.Season_Product_Haddad__r_Name = (String) (columnValue_15_tSalesforceInput_1);
                Object columnValue_16_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(16);
                        row5.Style_Haddad__r_Name = (String) (columnValue_16_tSalesforceInput_1);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_1) {
        	java.util.Map<String,Object> info_tSalesforceInput_1 = e_tSalesforceInput_1.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_1 = null;
            	if(info_tSalesforceInput_1.containsKey("error")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("error");
        		}else if(info_tSalesforceInput_1.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_1 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_1 = "Row "+ nb_line_tSalesforceInput_1 + ": "+errorMessage_tSalesforceInput_1;
    			System.err.println(errorMessage_tSalesforceInput_1);
            	// If the record is reject, the main line record should put NULL
            	row5 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_1 = null;


 



/**
 * [tSalesforceInput_1 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_1 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 


	tos_count_tSalesforceInput_1++;

/**
 * [tSalesforceInput_1 main ] stop
 */
	
	/**
	 * [tSalesforceInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_4 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					
row12.ProductCode = row5.ProductCode;			row12.Product_Code_External_Id__c = row5.Product_Code_External_Id__c;			row12.Age_Group_Haddad__c = row5.Age_Group_Haddad__c;			row12.Brand_Haddad__r_Name = row5.Brand_Haddad__r_Name;			row12.Category_Haddad__r_Name = row5.Category_Haddad__r_Name;			row12.Color_Code_Haddad__c = row5.Color_Code_Haddad__c;			row12.Color_Haddad__r_Name = row5.Color_Haddad__r_Name;			row12.Color_Haddad__r_Color_Name_External__c = row5.Color_Haddad__r_Color_Name_External__c;			row12.Country_of_origin_Haddad__c = row5.Country_of_origin_Haddad__c;			row12.Description = row5.Description;			row12.Gender_Haddad__c = row5.Gender_Haddad__c;			row12.IsActive = row5.IsActive;			row12.Name = row5.Name;			row12.Product_Status__c = row5.Product_Status__c;			row12.Ref__c = row5.Ref__c;			row12.Season_Product_Haddad__r_Name = row5.Season_Product_Haddad__r_Name;			row12.Style_Haddad__r_Name = row5.Style_Haddad__r_Name;			

 


	tos_count_tUniqRow_4++;

/**
 * [tUniqRow_4 main ] stop
 */
	
	/**
	 * [tUniqRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row13HashKey.StyleCode = StringHandling.LEFT(row12.Name,6) ;
                        		    		
                        		    		row13HashKey.ColorCode = StringHandling.RIGHT(row12.Name,3) ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.StyleCode = '" + row13HashKey.StyleCode + "', row13.ColorCode = '" + row13HashKey.ColorCode + "'");
								} // G 071
							

							row13Struct row13 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.var1 = ( row12.Product_Code_External_Id__c == null ? "A" :  "20" + StringHandling.RIGHT(row12.Season_Product_Haddad__r_Name, 2) ) ;
Var.var2 = (row12.Brand_Haddad__r_Name.equals("LEVIS") && row12.Season_Product_Haddad__r_Name.contains("FA") ? "Fall / Holiday":
	(row12.Brand_Haddad__r_Name.equals("LEVIS") && row12.Season_Product_Haddad__r_Name.contains("SP") ? "Spring / Summer":
		(Relational.NOT(row12.Brand_Haddad__r_Name.equals("LEVIS")) && row12.Season_Product_Haddad__r_Name.contains("SP") ? "Spring":
			(Relational.NOT(row12.Brand_Haddad__r_Name.equals("LEVIS")) && row12.Season_Product_Haddad__r_Name.contains("SU") ? "Summer":
				(Relational.NOT(row12.Brand_Haddad__r_Name.equals("LEVIS")) && row12.Season_Product_Haddad__r_Name.contains("HO") ? "Holiday":
					(Relational.NOT(row12.Brand_Haddad__r_Name.equals("LEVIS")) && row12.Season_Product_Haddad__r_Name.contains("FA") ? "Fall": "" )
				)
			)
		)
    )
) ;// ###############################
        // ###############################
        // # Output tables

out5 = null;
outputSF = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'out5'
out5_tmp.Age_Group_Haddad__c = row12.Age_Group_Haddad__c;
out5_tmp.Brand_Haddad__r_Name = row12.Brand_Haddad__r_Name;
out5_tmp.Category_Haddad__r_Name = row12.Category_Haddad__r_Name;
out5_tmp.Color_Code_Haddad__c = row12.Color_Code_Haddad__c;
out5_tmp.Color_Haddad__r_Name = row12.Color_Haddad__r_Name;
out5_tmp.Color_Haddad__r_Color_Name_External__c = StringHandling.LEFT(row12.Color_Haddad__r_Color_Name_External__c, 3) ;
out5_tmp.Country_of_origin_Haddad__c = row12.Country_of_origin_Haddad__c;
out5_tmp.Description = row12.Description;
out5_tmp.Gender_Haddad__c = row12.Gender_Haddad__c;
out5_tmp.IsActive = row12.IsActive;
out5_tmp.Name = row12.Name;
out5_tmp.Product_Status__c = row12.Product_Status__c;
out5_tmp.Ref__c = row12.Ref__c;
out5_tmp.Season_Product_Haddad__r_Name = row12.Season_Product_Haddad__r_Name;
out5_tmp.Style_Haddad__r_Name = row12.Style_Haddad__r_Name;
out5_tmp.NewTags = row13.NewTags ;
out5_tmp.PhotoView = row13.PhotoView ;
out5 = out5_tmp;

// # Output table : 'outputSF'
outputSF_tmp.Age_Group_Haddad__c = row12.Age_Group_Haddad__c ;
outputSF_tmp.Brand_Haddad__r_Name = row12.Brand_Haddad__r_Name ;
outputSF_tmp.Category_Haddad__r_Name = row12.Category_Haddad__r_Name ;
outputSF_tmp.Color_Code_Haddad__c = row12.Color_Code_Haddad__c ;
outputSF_tmp.Color_Haddad__r_Name = row12.Color_Haddad__r_Name ;
outputSF_tmp.Color_Haddad__r_Color_Name_External__c = StringHandling.LEFT(row12.Color_Haddad__r_Color_Name_External__c, 3) ;
outputSF_tmp.Country_of_origin_Haddad__c = row12.Country_of_origin_Haddad__c ;
outputSF_tmp.Description = row12.Description ;
outputSF_tmp.Gender_Haddad__c = row12.Gender_Haddad__c ;
outputSF_tmp.IsActive = row12.IsActive ;
outputSF_tmp.Name = row12.Name ;
outputSF_tmp.Product_Status__c = row12.Product_Status__c ;
outputSF_tmp.Ref__c = row12.Ref__c ;
outputSF_tmp.Season_Product_Haddad__r_Name = row12.Season_Product_Haddad__r_Name ;
outputSF_tmp.Style_Haddad__r_Name = row12.Style_Haddad__r_Name;
outputSF_tmp.Year = Var.var1 ;
outputSF_tmp.SeasonBynder = Var.var2 ;
outputSF_tmp.NewTags = row13.NewTags ;
outputSF_tmp.PhotoView = row13.PhotoView ;
outputSF = outputSF_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out5");
					}
					
row7 = null;			
if(out5.Color_Haddad__r_Color_Name_External__c == null){
	finder_tUniqRow_1.Color_Haddad__r_Color_Name_External__c = null;
}else{
	finder_tUniqRow_1.Color_Haddad__r_Color_Name_External__c = out5.Color_Haddad__r_Color_Name_External__c.toLowerCase();
}
if(out5.Style_Haddad__r_Name == null){
	finder_tUniqRow_1.Style_Haddad__r_Name = null;
}else{
	finder_tUniqRow_1.Style_Haddad__r_Name = out5.Style_Haddad__r_Name.toLowerCase();
}
if(out5.PhotoView == null){
	finder_tUniqRow_1.PhotoView = null;
}else{
	finder_tUniqRow_1.PhotoView = out5.PhotoView.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(out5.Color_Haddad__r_Color_Name_External__c == null){
	new_tUniqRow_1.Color_Haddad__r_Color_Name_External__c = null;
}else{
	new_tUniqRow_1.Color_Haddad__r_Color_Name_External__c = out5.Color_Haddad__r_Color_Name_External__c.toLowerCase();
}
if(out5.Style_Haddad__r_Name == null){
	new_tUniqRow_1.Style_Haddad__r_Name = null;
}else{
	new_tUniqRow_1.Style_Haddad__r_Name = out5.Style_Haddad__r_Name.toLowerCase();
}
if(out5.PhotoView == null){
	new_tUniqRow_1.PhotoView = null;
}else{
	new_tUniqRow_1.PhotoView = out5.PhotoView.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row7 == null){ 
	
	row7 = new row7Struct();
}row7.Age_Group_Haddad__c = out5.Age_Group_Haddad__c;			row7.Brand_Haddad__r_Name = out5.Brand_Haddad__r_Name;			row7.Category_Haddad__r_Name = out5.Category_Haddad__r_Name;			row7.Color_Code_Haddad__c = out5.Color_Code_Haddad__c;			row7.Color_Haddad__r_Name = out5.Color_Haddad__r_Name;			row7.Color_Haddad__r_Color_Name_External__c = out5.Color_Haddad__r_Color_Name_External__c;			row7.Country_of_origin_Haddad__c = out5.Country_of_origin_Haddad__c;			row7.Description = out5.Description;			row7.Gender_Haddad__c = out5.Gender_Haddad__c;			row7.IsActive = out5.IsActive;			row7.Name = out5.Name;			row7.Product_Status__c = out5.Product_Status__c;			row7.Ref__c = out5.Ref__c;			row7.Season_Product_Haddad__r_Name = out5.Season_Product_Haddad__r_Name;			row7.Style_Haddad__r_Name = out5.Style_Haddad__r_Name;			row7.NewTags = out5.NewTags;			row7.PhotoView = out5.PhotoView;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tRESTClient_4 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					
	row1 = null;

// expected response body
Object responseDoc_tRESTClient_4 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_4 = null;
	String requestString_tRESTClient_4 = null;

	Object requestBody_tRESTClient_4 = requestDoc_tRESTClient_4 != null ? requestDoc_tRESTClient_4 : requestString_tRESTClient_4;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_4
		= String.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_4 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_4 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = "https://haddadbrand.bynder.com/api/v4/media/?";
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_4.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_4.setAddress(url);
	

	

	
		features_tRESTClient_4.add(new org.apache.cxf.feature.LoggingFeature());
	

	

	factoryBean_tRESTClient_4.setFeatures(features_tRESTClient_4);


	java.util.List<Object> providers_tRESTClient_4 = new java.util.ArrayList<Object>();
	providers_tRESTClient_4.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_4) {
					e_tRESTClient_4.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_4 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_4.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_4.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_4.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_4.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_4.setDropRootElement(false);
		jsonProvider_tRESTClient_4.setConvertTypesToStrings(true);
	providers_tRESTClient_4.add(jsonProvider_tRESTClient_4);
	factoryBean_tRESTClient_4.setProviders(providers_tRESTClient_4);
	factoryBean_tRESTClient_4.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_4 = false;
	if (use_auth_tRESTClient_4 && "SAML".equals("OAUTH2_BEARER")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[M/iJQ0NbRyT1a6wVM1Oyw2bNMUfpZdPZGycH98OnMBpmNkZnKvM=]");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_4.getBus(),
				"otman.nikraj@haddadeurope.com.partial", decryptedPassword_tRESTClient_4);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_4, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_4 = factoryBean_tRESTClient_4.createWebClient();

	// set request path
	webClient_tRESTClient_4.path("");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_4 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_4);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_4 = clientConfig_tRESTClient_4.getHttpConduit();

    if (clientConfig_tRESTClient_4.getEndpoint() != null
            && clientConfig_tRESTClient_4.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_4.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

        org.apache.cxf.configuration.jsse.TLSClientParameters tlsClientParameters_tRESTClient_4 = new org.apache.cxf.configuration.jsse.TLSClientParameters();
        tlsClientParameters_tRESTClient_4.setDisableCNCheck(true);
        conduit_tRESTClient_4.setTlsClientParameters(tlsClientParameters_tRESTClient_4);

	

	if (use_auth_tRESTClient_4 && "BASIC".equals("OAUTH2_BEARER")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[wyXy00r77il/PdNQHrxIZaTl5R4koEKpEw+p+Thy7ecFRCWfmgo=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_4 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_4.setAuthorizationType("Basic");
			authPolicy_tRESTClient_4.setUserName("otman.nikraj@haddadeurope.com.partial");
			authPolicy_tRESTClient_4.setPassword(decryptedPassword_tRESTClient_4);
		conduit_tRESTClient_4.setAuthorization(authPolicy_tRESTClient_4);
	} else if (use_auth_tRESTClient_4 && "HTTP Digest".equals("OAUTH2_BEARER")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[EoIRvlpLCAnUfM+ypSkDNyuwdQ54Nt8MJN6jQd1XVWfsleex3f0=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_4 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_4.setAuthorizationType("Digest");
		authPolicy_tRESTClient_4.setUserName("otman.nikraj@haddadeurope.com.partial");
		authPolicy_tRESTClient_4.setPassword(decryptedPassword_tRESTClient_4);
		conduit_tRESTClient_4.setAuthorization(authPolicy_tRESTClient_4);
	}

	if (!inOSGi) {
		conduit_tRESTClient_4.getClient().setReceiveTimeout((long)(6000 * 1000L));
		conduit_tRESTClient_4.getClient().setConnectionTimeout((long)(6000 * 1000L));
		boolean use_proxy_tRESTClient_4 = false;
		if (use_proxy_tRESTClient_4) {
			
			 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[tbxcKYacD4rA5JDtBq9VjTxXB7De7xJTRRoJoQ==]");

			conduit_tRESTClient_4.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_4.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_4.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_4.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_4);
		}
	}
	
	
		conduit_tRESTClient_4.getClient().setAutoRedirect(true);
		clientConfig_tRESTClient_4.getRequestContext().put("http.redirect.relative.uri", true);
		clientConfig_tRESTClient_4.getRequestContext().put("http.redirect.same.host.only", false);
	

	

	

	
		// set Accept-Type
		webClient_tRESTClient_4.accept("application/json");
	

	
		// set optional query and header properties if any
	
		webClient_tRESTClient_4.header("Authorization", globalMap.get("tokentype")+ " " +globalMap.get("accesstoken"));
	
		webClient_tRESTClient_4.header("Accept", "application/json");
	
		webClient_tRESTClient_4.header("content-Type", "application/json");
	
	if (use_auth_tRESTClient_4 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_4.header("Authorization", "Bearer " + globalMap.get("tokentype")+ " " +globalMap.get("accesstoken"));
	}
	
	if (use_auth_tRESTClient_4 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {
 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[R+78cLMNAjAbbyhCbf+OjBlQg75ZyMf4F0qZD2YFOE1rTb8OYRE=]");

        String username_tRESTClient_4 = "otman.nikraj@haddadeurope.com.partial";
        String password_tRESTClient_4 = decryptedPassword_tRESTClient_4;

        String bearerHeader_tRESTClient_4 = null;

        try {
			if (!inOSGi) {
				org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_4 =
					new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/oidc-context.xml");
				org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_4 = context_tRESTClient_4.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
				bearerHeader_tRESTClient_4 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_4, password_tRESTClient_4, oidcConfiguration_tRESTClient_4);
			}else{
				bearerHeader_tRESTClient_4 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_4, password_tRESTClient_4);
			}
		} catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_4.header("Authorization", bearerHeader_tRESTClient_4);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		
			webClient_tRESTClient_4.query("property_Style_Code" ,row7.Style_Haddad__r_Name);
		
			webClient_tRESTClient_4.query("property_Color_Code" ,row7.Color_Code_Haddad__c);
		
	


	try {
		// start send request
		
			responseDoc_tRESTClient_4 = webClient_tRESTClient_4.get(responseClass_tRESTClient_4);
		


		int webClientResponseStatus_tRESTClient_4 = webClient_tRESTClient_4.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_4 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_4.getResponse());
		}

		
			if (row1 == null) {
				row1 = new row1Struct();
			}

			row1.statusCode = webClientResponseStatus_tRESTClient_4;
			
				
				{
					Object responseObj_tRESTClient_4 = responseDoc_tRESTClient_4;
				
				if(responseObj_tRESTClient_4 != null){
					if (responseClass_tRESTClient_4 == String.class) {
						row1.string = (String) responseObj_tRESTClient_4;
					} else {
						routines.system.Document responseTalendDoc_tRESTClient_4 = null;
						if (null != responseObj_tRESTClient_4) {
							responseTalendDoc_tRESTClient_4 = new routines.system.Document();
							responseTalendDoc_tRESTClient_4.setDocument((org.dom4j.Document) responseObj_tRESTClient_4);
						}
						row1.body = responseTalendDoc_tRESTClient_4;
					}
				}
			}
			


			globalMap.put("tRESTClient_4_HEADERS", webClient_tRESTClient_4.getResponse().getHeaders());
			
			
			
		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_4) {
		
			throw ex_tRESTClient_4;
		
	}

} catch(Exception e_tRESTClient_4) {
	
		throw new TalendException(e_tRESTClient_4, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_4++;

/**
 * [tRESTClient_4 main ] stop
 */
	
	/**
	 * [tRESTClient_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	

 



/**
 * [tRESTClient_4 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tExtractJSONFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

            if(row1.string!=null){// C_01
                jsonStr_tExtractJSONFields_1 = row1.string.toString();
   
row4 = null;

	

String loopPath_tExtractJSONFields_1 = "$";
java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_1 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
try {
	document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_1);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
	Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(compiledLoopPath_tExtractJSONFields_1,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
	} else {
		resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
	}
	
	isStructError_tExtractJSONFields_1 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_1) {
		System.err.println(ex_tExtractJSONFields_1.getMessage());
}

String jsonPath_tExtractJSONFields_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

Object value_tExtractJSONFields_1 = null;

Object root_tExtractJSONFields_1 = null;
for(int i_tExtractJSONFields_1=0; isStructError_tExtractJSONFields_1 || (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1.size());i_tExtractJSONFields_1++){
	if(!isStructError_tExtractJSONFields_1){
		Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1.get(i_tExtractJSONFields_1);
            row4 = null;
	row4 = new row4Struct();
	nb_line_tExtractJSONFields_1++;
	try {
		jsonPath_tExtractJSONFields_1 = "$.id";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.id = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.id = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.description";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.description = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.description = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.type";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.type = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.type = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.idHash";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.idHash = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.idHash = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.tags";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.tags = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.tags = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.brandId";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.brandId = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.brandId = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.name";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.name = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.name = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Color_Code";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Color_Code = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Color_Code = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Style_Code";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Style_Code = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Style_Code = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Brand";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Brand = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Brand = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.extension";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.extension = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.extension = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Style_Reference";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Style_Reference = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Style_Reference = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.isPublic";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.isPublic = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.isPublic = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Season";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Season = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Season = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Year";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Year = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Year = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Asset_Type";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Asset_Type = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Asset_Type = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Asset_Subtype";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Asset_Subtype = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Asset_Subtype = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.userCreated";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.userCreated = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.userCreated = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.filename";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.filename = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.filename = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Gender";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Gender = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Gender = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Age_Group";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Age_Group = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Age_Group = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Division";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Sub_Division = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Sub_Division = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Sub_Division";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Division = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Division = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.Terms_of_Use";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.Terms_of_Use = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.Terms_of_Use = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.property_Photo_View";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row4.property_Photo_View = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row4.property_Photo_View = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_1) {
		    System.err.println(ex_tExtractJSONFields_1.getMessage());
		    row4 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_1 = false;
	
//}


 


	tos_count_tExtractJSONFields_1++;

/**
 * [tExtractJSONFields_1 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.id = row4.id ;
out3_tmp.description = row4.description ;
out3_tmp.type = row4.type ;
out3_tmp.idHash = row4.idHash ;
out3_tmp.tags = StringHandling.CHANGE(StringHandling.CHANGE(StringHandling.CHANGE(row4.tags , "\"\\]", "")  , "\\[\"", "") , "\"" ,"") ;
out3_tmp.brandId = row4.brandId ;
out3_tmp.name = row4.name ;
out3_tmp.property_Color_Code = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Color_Code , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.property_Style_Code = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Style_Code , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.property_Brand = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Brand , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.extension = StringHandling.CHANGE(StringHandling.CHANGE(row4.extension , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.property_Style_Reference = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Style_Reference  , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.isPublic = row4.isPublic ;
out3_tmp.property_Season = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Season  , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.property_Year = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Year  , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.property_Asset_Type = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Asset_Type  , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.property_Asset_Subtype = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Asset_Subtype  , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.userCreated = row4.userCreated ;
out3_tmp.filename = row4.filename ;
out3_tmp.property_Gender = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Gender  , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.property_Age_Group = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Age_Group  , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.property_Sub_Division = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Sub_Division  , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.property_Division = StringHandling.CHANGE(StringHandling.CHANGE(row4.property_Division  , "\"\\]", "")  , "\\[\"", "") ;
out3_tmp.Terms_of_Use = row4.Terms_of_Use ;
out3_tmp.property_Photo_View = row4.property_Photo_View ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(out3.id != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.description != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.description
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.idHash != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.idHash
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.tags != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.tags
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.brandId != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.brandId
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.name != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Color_Code != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Color_Code
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Style_Code != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Style_Code
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Brand != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Brand
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.extension != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.extension
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Style_Reference != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Style_Reference
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.isPublic != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.isPublic
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Season != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Season
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Year != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Year
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Asset_Type != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Asset_Type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Asset_Subtype != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Asset_Subtype
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.userCreated != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.userCreated
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.filename != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.filename
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Gender != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Gender
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Age_Group != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Age_Group
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Sub_Division != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Sub_Division
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Division != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Division
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.Terms_of_Use != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.Terms_of_Use
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out3.property_Photo_View != null) {
                        sb_tFileOutputDelimited_1.append(
                            out3.property_Photo_View
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row4"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tRESTClient_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	

 



/**
 * [tRESTClient_4 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "out5"




// Start of branch "outputSF"
if(outputSF != null) { 



	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"outputSF");
					}
					
row11.Age_Group_Haddad__c = outputSF.Age_Group_Haddad__c;			row11.Brand_Haddad__r_Name = outputSF.Brand_Haddad__r_Name;			row11.Category_Haddad__r_Name = outputSF.Category_Haddad__r_Name;			row11.Color_Code_Haddad__c = outputSF.Color_Code_Haddad__c;			row11.Color_Haddad__r_Name = outputSF.Color_Haddad__r_Name;			row11.Color_Haddad__r_Color_Name_External__c = outputSF.Color_Haddad__r_Color_Name_External__c;			row11.Country_of_origin_Haddad__c = outputSF.Country_of_origin_Haddad__c;			row11.Description = outputSF.Description;			row11.Gender_Haddad__c = outputSF.Gender_Haddad__c;			row11.IsActive = outputSF.IsActive;			row11.Name = outputSF.Name;			row11.Product_Status__c = outputSF.Product_Status__c;			row11.Ref__c = outputSF.Ref__c;			row11.Season_Product_Haddad__r_Name = outputSF.Season_Product_Haddad__r_Name;			row11.Style_Haddad__r_Name = outputSF.Style_Haddad__r_Name;			row11.Year = outputSF.Year;			row11.SeasonBynder = outputSF.SeasonBynder;			row11.NewTags = outputSF.NewTags;			row11.PhotoView = outputSF.PhotoView;			

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row11.Age_Group_Haddad__c != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Age_Group_Haddad__c
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Brand_Haddad__r_Name != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Brand_Haddad__r_Name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Category_Haddad__r_Name != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Category_Haddad__r_Name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Color_Code_Haddad__c != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Color_Code_Haddad__c
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Color_Haddad__r_Name != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Color_Haddad__r_Name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Color_Haddad__r_Color_Name_External__c != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Color_Haddad__r_Color_Name_External__c
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Country_of_origin_Haddad__c != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Country_of_origin_Haddad__c
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Description != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Description
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Gender_Haddad__c != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Gender_Haddad__c
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                        sb_tFileOutputDelimited_2.append(
                            row11.IsActive
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Name != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Product_Status__c != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Product_Status__c
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Ref__c != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Ref__c
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Season_Product_Haddad__r_Name != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Season_Product_Haddad__r_Name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Style_Haddad__r_Name != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Style_Haddad__r_Name
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.Year != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.Year
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.SeasonBynder != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.SeasonBynder
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.NewTags != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.NewTags
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row11.PhotoView != null) {
                        sb_tFileOutputDelimited_2.append(
                            row11.PhotoView
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */

} // End of branch "outputSF"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tUniqRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_1 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_1", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_1.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_1 = reader_tSalesforceInput_1.getReturnValues();
if(resultMap_tSalesforceInput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_1 : resultMap_tSalesforceInput_1.entrySet()) {
		switch(entry_tSalesforceInput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "ERROR_MESSAGE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_LINE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_SUCCESS", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_REJECT", entry_tSalesforceInput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_1 = new StringBuilder();
            for (int i_tSalesforceInput_1 = 0; i_tSalesforceInput_1 < entry_tSalesforceInput_1.getKey().length(); i_tSalesforceInput_1++) {
                char ch_tSalesforceInput_1 = entry_tSalesforceInput_1.getKey().charAt(i_tSalesforceInput_1);
                if(Character.isUpperCase(ch_tSalesforceInput_1) && i_tSalesforceInput_1> 0) {
                	studio_key_tSalesforceInput_1.append('_');
                }
                studio_key_tSalesforceInput_1.append(ch_tSalesforceInput_1);
            }
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", studio_key_tSalesforceInput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_1.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_1", true);
end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());




/**
 * [tSalesforceInput_1 end ] stop
 */

	
	/**
	 * [tUniqRow_4 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

globalMap.put("tUniqRow_4_NB_UNIQUES",nb_uniques_tUniqRow_4);
globalMap.put("tUniqRow_4_NB_DUPLICATES",nb_duplicates_tUniqRow_4);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tUniqRow_4", true);
end_Hash.put("tUniqRow_4", System.currentTimeMillis());




/**
 * [tUniqRow_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tRESTClient_4 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	


if (globalMap.get("tRESTClient_4_NB_LINE") == null) {
	globalMap.put("tRESTClient_4_NB_LINE", 1);
}

// [tRESTCliend_end]
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tRESTClient_4", true);
end_Hash.put("tRESTClient_4", System.currentTimeMillis());




/**
 * [tRESTClient_4 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_1", true);
end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());




/**
 * [tExtractJSONFields_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */
















	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"outputSF");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSalesforceInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tFileInputDelimited_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tSalesforceInput_1 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_1")==null){
    if(resourceMap.get("reader_tSalesforceInput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_1")).close();
		} catch (java.io.IOException e_tSalesforceInput_1) {
			String errorMessage_tSalesforceInput_1 = "failed to release the resource in tSalesforceInput_1 :" + e_tSalesforceInput_1.getMessage();
			System.err.println(errorMessage_tSalesforceInput_1);
		}
	}
}
 



/**
 * [tSalesforceInput_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_4 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tRESTClient_4 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	

 



/**
 * [tRESTClient_4 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */
















	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class outputBynderStruct implements routines.system.IPersistableRow<outputBynderStruct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String newDescription;

				public String getNewDescription () {
					return this.newDescription;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String newTags;

				public String getNewTags () {
					return this.newTags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String newName;

				public String getNewName () {
					return this.newName;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String newProperty_Color_Code;

				public String getNewProperty_Color_Code () {
					return this.newProperty_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String newProperty_Style_Code;

				public String getNewProperty_Style_Code () {
					return this.newProperty_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String newProperty_Brand;

				public String getNewProperty_Brand () {
					return this.newProperty_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String newExtension;

				public String getNewExtension () {
					return this.newExtension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String newProperty_Style_Reference;

				public String getNewProperty_Style_Reference () {
					return this.newProperty_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String newIsPublic;

				public String getNewIsPublic () {
					return this.newIsPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String newProperty_Season;

				public String getNewProperty_Season () {
					return this.newProperty_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String newProperty_Year;

				public String getNewProperty_Year () {
					return this.newProperty_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String newProperty_Asset_Type;

				public String getNewProperty_Asset_Type () {
					return this.newProperty_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String newProperty_Asset_Subtype;

				public String getNewProperty_Asset_Subtype () {
					return this.newProperty_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String newProperty_Age_Group;

				public String getNewProperty_Age_Group () {
					return this.newProperty_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String newProperty_Gender;

				public String getNewProperty_Gender () {
					return this.newProperty_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String newProperty_Division;

				public String getNewProperty_Division () {
					return this.newProperty_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String newProperty_Sub_Division;

				public String getNewProperty_Sub_Division () {
					return this.newProperty_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String newTerms_of_Use;

				public String getNewTerms_of_Use () {
					return this.newTerms_of_Use;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.newDescription = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.newTags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.newName = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.newProperty_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.newProperty_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.newProperty_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.newExtension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.newProperty_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.newIsPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.newProperty_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.newProperty_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.newProperty_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.newProperty_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.newProperty_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.newProperty_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.newProperty_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.newProperty_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.newTerms_of_Use = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.newDescription,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.newTags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.newName,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.newProperty_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.newProperty_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.newProperty_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.newExtension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.newProperty_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.newIsPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.newProperty_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.newProperty_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.newProperty_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.newProperty_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.newProperty_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.newProperty_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.newTerms_of_Use,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",newDescription="+newDescription);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",newTags="+newTags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",newName="+newName);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",newProperty_Color_Code="+newProperty_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",newProperty_Style_Code="+newProperty_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",newProperty_Brand="+newProperty_Brand);
		sb.append(",extension="+extension);
		sb.append(",newExtension="+newExtension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",newProperty_Style_Reference="+newProperty_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",newIsPublic="+newIsPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",newProperty_Season="+newProperty_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",newProperty_Year="+newProperty_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",newProperty_Asset_Type="+newProperty_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",newProperty_Asset_Subtype="+newProperty_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",newProperty_Age_Group="+newProperty_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",newProperty_Gender="+newProperty_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",newProperty_Division="+newProperty_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",newProperty_Sub_Division="+newProperty_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",newTerms_of_Use="+newTerms_of_Use);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputBynderStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String newDescription;

				public String getNewDescription () {
					return this.newDescription;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String newTags;

				public String getNewTags () {
					return this.newTags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String newName;

				public String getNewName () {
					return this.newName;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String newProperty_Color_Code;

				public String getNewProperty_Color_Code () {
					return this.newProperty_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String newProperty_Style_Code;

				public String getNewProperty_Style_Code () {
					return this.newProperty_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String newProperty_Brand;

				public String getNewProperty_Brand () {
					return this.newProperty_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String newExtension;

				public String getNewExtension () {
					return this.newExtension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String newProperty_Style_Reference;

				public String getNewProperty_Style_Reference () {
					return this.newProperty_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String newIsPublic;

				public String getNewIsPublic () {
					return this.newIsPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String newProperty_Season;

				public String getNewProperty_Season () {
					return this.newProperty_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String newProperty_Year;

				public String getNewProperty_Year () {
					return this.newProperty_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String newProperty_Asset_Type;

				public String getNewProperty_Asset_Type () {
					return this.newProperty_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String newProperty_Asset_Subtype;

				public String getNewProperty_Asset_Subtype () {
					return this.newProperty_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String newProperty_Age_Group;

				public String getNewProperty_Age_Group () {
					return this.newProperty_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String newProperty_Gender;

				public String getNewProperty_Gender () {
					return this.newProperty_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String newProperty_Division;

				public String getNewProperty_Division () {
					return this.newProperty_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String newProperty_Sub_Division;

				public String getNewProperty_Sub_Division () {
					return this.newProperty_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String newTerms_of_Use;

				public String getNewTerms_of_Use () {
					return this.newTerms_of_Use;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.newDescription = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.newTags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.newName = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.newProperty_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.newProperty_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.newProperty_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.newExtension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.newProperty_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.newIsPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.newProperty_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.newProperty_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.newProperty_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.newProperty_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.newProperty_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.newProperty_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.newProperty_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.newProperty_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.newTerms_of_Use = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.newDescription,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.newTags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.newName,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.newProperty_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.newProperty_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.newProperty_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.newExtension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.newProperty_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.newIsPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.newProperty_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.newProperty_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.newProperty_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.newProperty_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.newProperty_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.newProperty_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.newTerms_of_Use,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",newDescription="+newDescription);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",newTags="+newTags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",newName="+newName);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",newProperty_Color_Code="+newProperty_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",newProperty_Style_Code="+newProperty_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",newProperty_Brand="+newProperty_Brand);
		sb.append(",extension="+extension);
		sb.append(",newExtension="+newExtension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",newProperty_Style_Reference="+newProperty_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",newIsPublic="+newIsPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",newProperty_Season="+newProperty_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",newProperty_Year="+newProperty_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",newProperty_Asset_Type="+newProperty_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",newProperty_Asset_Subtype="+newProperty_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",newProperty_Age_Group="+newProperty_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",newProperty_Gender="+newProperty_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",newProperty_Division="+newProperty_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",newProperty_Sub_Division="+newProperty_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",newTerms_of_Use="+newTerms_of_Use);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out9Struct implements routines.system.IPersistableRow<out9Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String newDescription;

				public String getNewDescription () {
					return this.newDescription;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String newTags;

				public String getNewTags () {
					return this.newTags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String newName;

				public String getNewName () {
					return this.newName;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String newProperty_Color_Code;

				public String getNewProperty_Color_Code () {
					return this.newProperty_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String newProperty_Style_Code;

				public String getNewProperty_Style_Code () {
					return this.newProperty_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String newProperty_Brand;

				public String getNewProperty_Brand () {
					return this.newProperty_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String newExtension;

				public String getNewExtension () {
					return this.newExtension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String newProperty_Style_Reference;

				public String getNewProperty_Style_Reference () {
					return this.newProperty_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String newIsPublic;

				public String getNewIsPublic () {
					return this.newIsPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String newProperty_Season;

				public String getNewProperty_Season () {
					return this.newProperty_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String newProperty_Year;

				public String getNewProperty_Year () {
					return this.newProperty_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String newProperty_Asset_Type;

				public String getNewProperty_Asset_Type () {
					return this.newProperty_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String newProperty_Asset_Subtype;

				public String getNewProperty_Asset_Subtype () {
					return this.newProperty_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String newProperty_Age_Group;

				public String getNewProperty_Age_Group () {
					return this.newProperty_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String newProperty_Gender;

				public String getNewProperty_Gender () {
					return this.newProperty_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String newProperty_Division;

				public String getNewProperty_Division () {
					return this.newProperty_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String newProperty_Sub_Division;

				public String getNewProperty_Sub_Division () {
					return this.newProperty_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String newTerms_of_Use;

				public String getNewTerms_of_Use () {
					return this.newTerms_of_Use;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.newDescription = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.newTags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.newName = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.newProperty_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.newProperty_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.newProperty_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.newExtension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.newProperty_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.newIsPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.newProperty_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.newProperty_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.newProperty_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.newProperty_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.newProperty_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.newProperty_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.newProperty_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.newProperty_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.newTerms_of_Use = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.newDescription,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.newTags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.newName,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.newProperty_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.newProperty_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.newProperty_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.newExtension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.newProperty_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.newIsPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.newProperty_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.newProperty_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.newProperty_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.newProperty_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.newProperty_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.newProperty_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.newTerms_of_Use,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",newDescription="+newDescription);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",newTags="+newTags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",newName="+newName);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",newProperty_Color_Code="+newProperty_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",newProperty_Style_Code="+newProperty_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",newProperty_Brand="+newProperty_Brand);
		sb.append(",extension="+extension);
		sb.append(",newExtension="+newExtension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",newProperty_Style_Reference="+newProperty_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",newIsPublic="+newIsPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",newProperty_Season="+newProperty_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",newProperty_Year="+newProperty_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",newProperty_Asset_Type="+newProperty_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",newProperty_Asset_Subtype="+newProperty_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",newProperty_Age_Group="+newProperty_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",newProperty_Gender="+newProperty_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",newProperty_Division="+newProperty_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",newProperty_Sub_Division="+newProperty_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",newTerms_of_Use="+newTerms_of_Use);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class test1Struct implements routines.system.IPersistableRow<test1Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String newDescription;

				public String getNewDescription () {
					return this.newDescription;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String newTags;

				public String getNewTags () {
					return this.newTags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String newName;

				public String getNewName () {
					return this.newName;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String newProperty_Color_Code;

				public String getNewProperty_Color_Code () {
					return this.newProperty_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String newProperty_Style_Code;

				public String getNewProperty_Style_Code () {
					return this.newProperty_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String newProperty_Brand;

				public String getNewProperty_Brand () {
					return this.newProperty_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String newExtension;

				public String getNewExtension () {
					return this.newExtension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String newProperty_Style_Reference;

				public String getNewProperty_Style_Reference () {
					return this.newProperty_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String newIsPublic;

				public String getNewIsPublic () {
					return this.newIsPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String newProperty_Season;

				public String getNewProperty_Season () {
					return this.newProperty_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String newProperty_Year;

				public String getNewProperty_Year () {
					return this.newProperty_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String newProperty_Asset_Type;

				public String getNewProperty_Asset_Type () {
					return this.newProperty_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String newProperty_Asset_Subtype;

				public String getNewProperty_Asset_Subtype () {
					return this.newProperty_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String newProperty_Age_Group;

				public String getNewProperty_Age_Group () {
					return this.newProperty_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String newProperty_Gender;

				public String getNewProperty_Gender () {
					return this.newProperty_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String newProperty_Division;

				public String getNewProperty_Division () {
					return this.newProperty_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String newProperty_Sub_Division;

				public String getNewProperty_Sub_Division () {
					return this.newProperty_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String newTerms_of_Use;

				public String getNewTerms_of_Use () {
					return this.newTerms_of_Use;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.newDescription = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.newTags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.newName = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.newProperty_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.newProperty_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.newProperty_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.newExtension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.newProperty_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.newIsPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.newProperty_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.newProperty_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.newProperty_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.newProperty_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.newProperty_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.newProperty_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.newProperty_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.newProperty_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.newTerms_of_Use = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.newDescription,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.newTags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.newName,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.newProperty_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.newProperty_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.newProperty_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.newExtension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.newProperty_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.newIsPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.newProperty_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.newProperty_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.newProperty_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.newProperty_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.newProperty_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.newProperty_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.newTerms_of_Use,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",newDescription="+newDescription);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",newTags="+newTags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",newName="+newName);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",newProperty_Color_Code="+newProperty_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",newProperty_Style_Code="+newProperty_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",newProperty_Brand="+newProperty_Brand);
		sb.append(",extension="+extension);
		sb.append(",newExtension="+newExtension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",newProperty_Style_Reference="+newProperty_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",newIsPublic="+newIsPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",newProperty_Season="+newProperty_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",newProperty_Year="+newProperty_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",newProperty_Asset_Type="+newProperty_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",newProperty_Asset_Subtype="+newProperty_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",newProperty_Age_Group="+newProperty_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",newProperty_Gender="+newProperty_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",newProperty_Division="+newProperty_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",newProperty_Sub_Division="+newProperty_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",newTerms_of_Use="+newTerms_of_Use);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(test1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",extension="+extension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_2Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",extension="+extension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);

		row8Struct row8 = new row8Struct();
out9Struct out9 = new out9Struct();
row10Struct row10 = new row10Struct();
outputBynderStruct outputBynder = new outputBynderStruct();
test1Struct test1 = new test1Struct();







	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"outputBynder");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.bynderDirectory + "/temp/OutExtract.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
        if(filetFileOutputDelimited_3.exists()){
            isFileGenerated_tFileOutputDelimited_3 = false;
        }
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, true),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("id");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("description");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newDescription");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("type");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("idHash");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("tags");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newTags");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("brandId");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("name");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newName");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Color_Code");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Color_Code");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Style_Code");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Style_Code");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Brand");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Brand");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("extension");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newExtension");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Style_Reference");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Style_Reference");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("isPublic");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newIsPublic");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Season");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Season");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Year");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Year");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Asset_Type");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Asset_Type");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Asset_Subtype");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Asset_Subtype");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("userCreated");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("filename");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Age_Group");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Age_Group");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Gender");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Gender");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Division");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Division");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("property_Sub_Division");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newProperty_Sub_Division");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Terms_of_Use");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("newTerms_of_Use");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("PhotoView");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = null;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputBynderStruct outputBynder_tmp = new outputBynderStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out9");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String id;
					String description;
					String newDescription;
					String type;
					String idHash;
					String tags;
					String newTags;
					String brandId;
					String name;
					String newName;
					String property_Color_Code;
					String newProperty_Color_Code;
					String property_Style_Code;
					String newProperty_Style_Code;
					String property_Brand;
					String newProperty_Brand;
					String extension;
					String newExtension;
					String property_Style_Reference;
					String newProperty_Style_Reference;
					String isPublic;
					String newIsPublic;
					String property_Season;
					String newProperty_Season;
					String property_Year;
					String newProperty_Year;
					String property_Asset_Type;
					String newProperty_Asset_Type;
					String property_Asset_Subtype;
					String newProperty_Asset_Subtype;
					String userCreated;
					String filename;
					String property_Age_Group;
					String newProperty_Age_Group;
					String property_Gender;
					String newProperty_Gender;
					String property_Division;
					String newProperty_Division;
					String property_Sub_Division;
					String newProperty_Sub_Division;
					String Terms_of_Use;
					String newTerms_of_Use;
					String PhotoView;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
								
								result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
								
								result = prime * result + ((this.newDescription == null) ? 0 : this.newDescription.hashCode());
								
								result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
								
								result = prime * result + ((this.idHash == null) ? 0 : this.idHash.hashCode());
								
								result = prime * result + ((this.tags == null) ? 0 : this.tags.hashCode());
								
								result = prime * result + ((this.newTags == null) ? 0 : this.newTags.hashCode());
								
								result = prime * result + ((this.brandId == null) ? 0 : this.brandId.hashCode());
								
								result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
								
								result = prime * result + ((this.newName == null) ? 0 : this.newName.hashCode());
								
								result = prime * result + ((this.property_Color_Code == null) ? 0 : this.property_Color_Code.hashCode());
								
								result = prime * result + ((this.newProperty_Color_Code == null) ? 0 : this.newProperty_Color_Code.hashCode());
								
								result = prime * result + ((this.property_Style_Code == null) ? 0 : this.property_Style_Code.hashCode());
								
								result = prime * result + ((this.newProperty_Style_Code == null) ? 0 : this.newProperty_Style_Code.hashCode());
								
								result = prime * result + ((this.property_Brand == null) ? 0 : this.property_Brand.hashCode());
								
								result = prime * result + ((this.newProperty_Brand == null) ? 0 : this.newProperty_Brand.hashCode());
								
								result = prime * result + ((this.extension == null) ? 0 : this.extension.hashCode());
								
								result = prime * result + ((this.newExtension == null) ? 0 : this.newExtension.hashCode());
								
								result = prime * result + ((this.property_Style_Reference == null) ? 0 : this.property_Style_Reference.hashCode());
								
								result = prime * result + ((this.newProperty_Style_Reference == null) ? 0 : this.newProperty_Style_Reference.hashCode());
								
								result = prime * result + ((this.isPublic == null) ? 0 : this.isPublic.hashCode());
								
								result = prime * result + ((this.newIsPublic == null) ? 0 : this.newIsPublic.hashCode());
								
								result = prime * result + ((this.property_Season == null) ? 0 : this.property_Season.hashCode());
								
								result = prime * result + ((this.newProperty_Season == null) ? 0 : this.newProperty_Season.hashCode());
								
								result = prime * result + ((this.property_Year == null) ? 0 : this.property_Year.hashCode());
								
								result = prime * result + ((this.newProperty_Year == null) ? 0 : this.newProperty_Year.hashCode());
								
								result = prime * result + ((this.property_Asset_Type == null) ? 0 : this.property_Asset_Type.hashCode());
								
								result = prime * result + ((this.newProperty_Asset_Type == null) ? 0 : this.newProperty_Asset_Type.hashCode());
								
								result = prime * result + ((this.property_Asset_Subtype == null) ? 0 : this.property_Asset_Subtype.hashCode());
								
								result = prime * result + ((this.newProperty_Asset_Subtype == null) ? 0 : this.newProperty_Asset_Subtype.hashCode());
								
								result = prime * result + ((this.userCreated == null) ? 0 : this.userCreated.hashCode());
								
								result = prime * result + ((this.filename == null) ? 0 : this.filename.hashCode());
								
								result = prime * result + ((this.property_Age_Group == null) ? 0 : this.property_Age_Group.hashCode());
								
								result = prime * result + ((this.newProperty_Age_Group == null) ? 0 : this.newProperty_Age_Group.hashCode());
								
								result = prime * result + ((this.property_Gender == null) ? 0 : this.property_Gender.hashCode());
								
								result = prime * result + ((this.newProperty_Gender == null) ? 0 : this.newProperty_Gender.hashCode());
								
								result = prime * result + ((this.property_Division == null) ? 0 : this.property_Division.hashCode());
								
								result = prime * result + ((this.newProperty_Division == null) ? 0 : this.newProperty_Division.hashCode());
								
								result = prime * result + ((this.property_Sub_Division == null) ? 0 : this.property_Sub_Division.hashCode());
								
								result = prime * result + ((this.newProperty_Sub_Division == null) ? 0 : this.newProperty_Sub_Division.hashCode());
								
								result = prime * result + ((this.Terms_of_Use == null) ? 0 : this.Terms_of_Use.hashCode());
								
								result = prime * result + ((this.newTerms_of_Use == null) ? 0 : this.newTerms_of_Use.hashCode());
								
								result = prime * result + ((this.PhotoView == null) ? 0 : this.PhotoView.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.id == null) {
										if (other.id != null) 
											return false;
								
									} else if (!this.id.equals(other.id))
								 
										return false;
								
									if (this.description == null) {
										if (other.description != null) 
											return false;
								
									} else if (!this.description.equals(other.description))
								 
										return false;
								
									if (this.newDescription == null) {
										if (other.newDescription != null) 
											return false;
								
									} else if (!this.newDescription.equals(other.newDescription))
								 
										return false;
								
									if (this.type == null) {
										if (other.type != null) 
											return false;
								
									} else if (!this.type.equals(other.type))
								 
										return false;
								
									if (this.idHash == null) {
										if (other.idHash != null) 
											return false;
								
									} else if (!this.idHash.equals(other.idHash))
								 
										return false;
								
									if (this.tags == null) {
										if (other.tags != null) 
											return false;
								
									} else if (!this.tags.equals(other.tags))
								 
										return false;
								
									if (this.newTags == null) {
										if (other.newTags != null) 
											return false;
								
									} else if (!this.newTags.equals(other.newTags))
								 
										return false;
								
									if (this.brandId == null) {
										if (other.brandId != null) 
											return false;
								
									} else if (!this.brandId.equals(other.brandId))
								 
										return false;
								
									if (this.name == null) {
										if (other.name != null) 
											return false;
								
									} else if (!this.name.equals(other.name))
								 
										return false;
								
									if (this.newName == null) {
										if (other.newName != null) 
											return false;
								
									} else if (!this.newName.equals(other.newName))
								 
										return false;
								
									if (this.property_Color_Code == null) {
										if (other.property_Color_Code != null) 
											return false;
								
									} else if (!this.property_Color_Code.equals(other.property_Color_Code))
								 
										return false;
								
									if (this.newProperty_Color_Code == null) {
										if (other.newProperty_Color_Code != null) 
											return false;
								
									} else if (!this.newProperty_Color_Code.equals(other.newProperty_Color_Code))
								 
										return false;
								
									if (this.property_Style_Code == null) {
										if (other.property_Style_Code != null) 
											return false;
								
									} else if (!this.property_Style_Code.equals(other.property_Style_Code))
								 
										return false;
								
									if (this.newProperty_Style_Code == null) {
										if (other.newProperty_Style_Code != null) 
											return false;
								
									} else if (!this.newProperty_Style_Code.equals(other.newProperty_Style_Code))
								 
										return false;
								
									if (this.property_Brand == null) {
										if (other.property_Brand != null) 
											return false;
								
									} else if (!this.property_Brand.equals(other.property_Brand))
								 
										return false;
								
									if (this.newProperty_Brand == null) {
										if (other.newProperty_Brand != null) 
											return false;
								
									} else if (!this.newProperty_Brand.equals(other.newProperty_Brand))
								 
										return false;
								
									if (this.extension == null) {
										if (other.extension != null) 
											return false;
								
									} else if (!this.extension.equals(other.extension))
								 
										return false;
								
									if (this.newExtension == null) {
										if (other.newExtension != null) 
											return false;
								
									} else if (!this.newExtension.equals(other.newExtension))
								 
										return false;
								
									if (this.property_Style_Reference == null) {
										if (other.property_Style_Reference != null) 
											return false;
								
									} else if (!this.property_Style_Reference.equals(other.property_Style_Reference))
								 
										return false;
								
									if (this.newProperty_Style_Reference == null) {
										if (other.newProperty_Style_Reference != null) 
											return false;
								
									} else if (!this.newProperty_Style_Reference.equals(other.newProperty_Style_Reference))
								 
										return false;
								
									if (this.isPublic == null) {
										if (other.isPublic != null) 
											return false;
								
									} else if (!this.isPublic.equals(other.isPublic))
								 
										return false;
								
									if (this.newIsPublic == null) {
										if (other.newIsPublic != null) 
											return false;
								
									} else if (!this.newIsPublic.equals(other.newIsPublic))
								 
										return false;
								
									if (this.property_Season == null) {
										if (other.property_Season != null) 
											return false;
								
									} else if (!this.property_Season.equals(other.property_Season))
								 
										return false;
								
									if (this.newProperty_Season == null) {
										if (other.newProperty_Season != null) 
											return false;
								
									} else if (!this.newProperty_Season.equals(other.newProperty_Season))
								 
										return false;
								
									if (this.property_Year == null) {
										if (other.property_Year != null) 
											return false;
								
									} else if (!this.property_Year.equals(other.property_Year))
								 
										return false;
								
									if (this.newProperty_Year == null) {
										if (other.newProperty_Year != null) 
											return false;
								
									} else if (!this.newProperty_Year.equals(other.newProperty_Year))
								 
										return false;
								
									if (this.property_Asset_Type == null) {
										if (other.property_Asset_Type != null) 
											return false;
								
									} else if (!this.property_Asset_Type.equals(other.property_Asset_Type))
								 
										return false;
								
									if (this.newProperty_Asset_Type == null) {
										if (other.newProperty_Asset_Type != null) 
											return false;
								
									} else if (!this.newProperty_Asset_Type.equals(other.newProperty_Asset_Type))
								 
										return false;
								
									if (this.property_Asset_Subtype == null) {
										if (other.property_Asset_Subtype != null) 
											return false;
								
									} else if (!this.property_Asset_Subtype.equals(other.property_Asset_Subtype))
								 
										return false;
								
									if (this.newProperty_Asset_Subtype == null) {
										if (other.newProperty_Asset_Subtype != null) 
											return false;
								
									} else if (!this.newProperty_Asset_Subtype.equals(other.newProperty_Asset_Subtype))
								 
										return false;
								
									if (this.userCreated == null) {
										if (other.userCreated != null) 
											return false;
								
									} else if (!this.userCreated.equals(other.userCreated))
								 
										return false;
								
									if (this.filename == null) {
										if (other.filename != null) 
											return false;
								
									} else if (!this.filename.equals(other.filename))
								 
										return false;
								
									if (this.property_Age_Group == null) {
										if (other.property_Age_Group != null) 
											return false;
								
									} else if (!this.property_Age_Group.equals(other.property_Age_Group))
								 
										return false;
								
									if (this.newProperty_Age_Group == null) {
										if (other.newProperty_Age_Group != null) 
											return false;
								
									} else if (!this.newProperty_Age_Group.equals(other.newProperty_Age_Group))
								 
										return false;
								
									if (this.property_Gender == null) {
										if (other.property_Gender != null) 
											return false;
								
									} else if (!this.property_Gender.equals(other.property_Gender))
								 
										return false;
								
									if (this.newProperty_Gender == null) {
										if (other.newProperty_Gender != null) 
											return false;
								
									} else if (!this.newProperty_Gender.equals(other.newProperty_Gender))
								 
										return false;
								
									if (this.property_Division == null) {
										if (other.property_Division != null) 
											return false;
								
									} else if (!this.property_Division.equals(other.property_Division))
								 
										return false;
								
									if (this.newProperty_Division == null) {
										if (other.newProperty_Division != null) 
											return false;
								
									} else if (!this.newProperty_Division.equals(other.newProperty_Division))
								 
										return false;
								
									if (this.property_Sub_Division == null) {
										if (other.property_Sub_Division != null) 
											return false;
								
									} else if (!this.property_Sub_Division.equals(other.property_Sub_Division))
								 
										return false;
								
									if (this.newProperty_Sub_Division == null) {
										if (other.newProperty_Sub_Division != null) 
											return false;
								
									} else if (!this.newProperty_Sub_Division.equals(other.newProperty_Sub_Division))
								 
										return false;
								
									if (this.Terms_of_Use == null) {
										if (other.Terms_of_Use != null) 
											return false;
								
									} else if (!this.Terms_of_Use.equals(other.Terms_of_Use))
								 
										return false;
								
									if (this.newTerms_of_Use == null) {
										if (other.newTerms_of_Use != null) 
											return false;
								
									} else if (!this.newTerms_of_Use.equals(other.newTerms_of_Use))
								 
										return false;
								
									if (this.PhotoView == null) {
										if (other.PhotoView != null) 
											return false;
								
									} else if (!this.PhotoView.equals(other.PhotoView))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"test1");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.bynderDirectory + "/temp/OutExtract1.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
        if(filetFileOutputDelimited_4.exists()){
            isFileGenerated_tFileOutputDelimited_4 = false;
        }
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, true),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("id");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("description");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newDescription");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("type");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("idHash");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("tags");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newTags");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("brandId");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("name");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newName");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Color_Code");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Color_Code");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Style_Code");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Style_Code");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Brand");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Brand");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("extension");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newExtension");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Style_Reference");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Style_Reference");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("isPublic");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newIsPublic");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Season");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Season");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Year");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Year");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Asset_Type");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Asset_Type");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Asset_Subtype");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Asset_Subtype");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("userCreated");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("filename");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Age_Group");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Age_Group");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Gender");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Gender");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Division");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Division");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("property_Sub_Division");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newProperty_Sub_Division");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Terms_of_Use");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("newTerms_of_Use");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("PhotoView");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	boolean var1;
	boolean var2;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out9Struct out9_tmp = new out9Struct();
test1Struct test1_tmp = new test1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = context.bynderDirectory + "/temp/tempBynderExtract.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.bynderDirectory + "/temp/tempBynderExtract.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row8 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row8 = new row8Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							row8.id = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row8.description = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row8.type = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							row8.idHash = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row8.tags = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							row8.brandId = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row8.name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row8.property_Color_Code = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
							row8.property_Style_Code = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
							row8.property_Brand = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							row8.extension = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
							row8.property_Style_Reference = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
							row8.isPublic = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
							row8.property_Season = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
							row8.property_Year = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
							row8.property_Asset_Type = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 16;
					
							row8.property_Asset_Subtype = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 17;
					
							row8.userCreated = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 18;
					
							row8.filename = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 19;
					
							row8.property_Age_Group = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 20;
					
							row8.property_Gender = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 21;
					
							row8.property_Division = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 22;
					
							row8.property_Sub_Division = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 23;
					
							row8.Terms_of_Use = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row8 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		row9HashKey.Color_Haddad__r_Color_Name_External__c = StringHandling.TRIM(row8.property_Color_Code);
                        		    		
                        		    		row9HashKey.Style_Haddad__r_Name = StringHandling.TRIM(row8.property_Style_Code);
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.var1 = row8.property_Color_Code == row9.Color_Haddad__r_Color_Name_External__c ;
Var.var2 = StringHandling.TRIM(row8.property_Style_Code) == StringHandling.TRIM(row9.Style_Haddad__r_Name ) ;// ###############################
        // ###############################
        // # Output tables

out9 = null;
test1 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'out9'
out9_tmp.id = row8.id ;
out9_tmp.description = row8.description ;
out9_tmp.newDescription = row9.Description ;
out9_tmp.type = row8.type ;
out9_tmp.idHash = row8.idHash ;
out9_tmp.tags = row8.tags ;
out9_tmp.newTags = row9.Season_Product_Haddad__r_Name + "," + row9.NewTags ;
out9_tmp.brandId = row8.brandId ;
out9_tmp.name = row8.name ;
out9_tmp.newName = row8.name ;
out9_tmp.property_Color_Code = row9.Color_Haddad__r_Color_Name_External__c ;
out9_tmp.newProperty_Color_Code = row9.Color_Haddad__r_Color_Name_External__c ;
out9_tmp.property_Style_Code = row9.Style_Haddad__r_Name ;
out9_tmp.newProperty_Style_Code = row9.Style_Haddad__r_Name ;
out9_tmp.property_Brand = row9.Brand_Haddad__r_Name ;
out9_tmp.newProperty_Brand = row9.Brand_Haddad__r_Name.equals("LEVIS") ? "Levi's" : row9.Brand_Haddad__r_Name.substring(0,1).toUpperCase() + row9.Brand_Haddad__r_Name.substring(1).toLowerCase() ;
out9_tmp.extension = row8.extension ;
out9_tmp.newExtension = row8.extension ;
out9_tmp.property_Style_Reference = row9.Ref__c ;
out9_tmp.newProperty_Style_Reference = row9.Ref__c ;
out9_tmp.isPublic = "true";
out9_tmp.newIsPublic = "true";
out9_tmp.property_Season = row8.property_Season ;
out9_tmp.newProperty_Season = row9.SeasonBynder ;
out9_tmp.property_Year = row8.property_Year ;
out9_tmp.newProperty_Year = row9.Year ;
out9_tmp.property_Asset_Type = row8.property_Asset_Type;
out9_tmp.newProperty_Asset_Type = ( row8.property_Asset_Type.equals("Images") ? "Image" :
	( row8.property_Asset_Type.equals("Logos") ? "Logo" :
		( row8.property_Asset_Type.equals("Presentations") ? "Presentation" :
			( row8.property_Asset_Type.equals("Videos") ? "Video" : row8.property_Asset_Type ) ) ) ) ;
out9_tmp.property_Asset_Subtype = row8.property_Asset_Subtype ;
out9_tmp.newProperty_Asset_Subtype = ( row8.property_Asset_Subtype.equals("Lifestyle_image") ? "Lifestyle image" :
	( row8.property_Asset_Subtype.equals("Product_image") ? "Product image" :
			( row8.property_Asset_Subtype.equals("Videos") ? "Video" : row8.property_Asset_Subtype ) ) ) ;
out9_tmp.userCreated = row8.userCreated ;
out9_tmp.filename = null;
out9_tmp.property_Age_Group = row8.property_Age_Group;
out9_tmp.newProperty_Age_Group = row9.Age_Group_Haddad__c ;
out9_tmp.property_Gender = row8.property_Gender ;
out9_tmp.newProperty_Gender = row9.Gender_Haddad__c ;
out9_tmp.property_Division = null;
out9_tmp.newProperty_Division = null;
out9_tmp.property_Sub_Division = null;
out9_tmp.newProperty_Sub_Division = null;
out9_tmp.Terms_of_Use = row8.Terms_of_Use ;
out9_tmp.newTerms_of_Use = row8.Terms_of_Use.equals("Free_of_use") ? "Free of use" : row8.Terms_of_Use ;
out9_tmp.PhotoView = row9.PhotoView ;
out9 = out9_tmp;

// # Output table : 'test1'
test1_tmp.id = row8.id  ;
test1_tmp.description = row8.description  ;
test1_tmp.newDescription = row9.Description  ;
test1_tmp.type = row8.type  ;
test1_tmp.idHash = row8.idHash  ;
test1_tmp.tags = row8.tags  ;
test1_tmp.newTags = row9.Season_Product_Haddad__r_Name + "," + row9.NewTags  ;
test1_tmp.brandId = row8.brandId  ;
test1_tmp.name = row8.name  ;
test1_tmp.newName = row8.name  ;
test1_tmp.property_Color_Code = row9.Color_Haddad__r_Color_Name_External__c  ;
test1_tmp.newProperty_Color_Code = row9.Color_Haddad__r_Color_Name_External__c  ;
test1_tmp.property_Style_Code = row9.Style_Haddad__r_Name  ;
test1_tmp.newProperty_Style_Code = row9.Style_Haddad__r_Name  ;
test1_tmp.property_Brand = row9.Brand_Haddad__r_Name  ;
test1_tmp.newProperty_Brand = row9.Brand_Haddad__r_Name.equals("LEVIS") ? "Levi's" : row9.Brand_Haddad__r_Name.substring(0,1).toUpperCase() + row9.Brand_Haddad__r_Name.substring(1).toLowerCase()  ;
test1_tmp.extension = row8.extension  ;
test1_tmp.newExtension = row8.extension  ;
test1_tmp.property_Style_Reference = row9.Ref__c  ;
test1_tmp.newProperty_Style_Reference = row9.Ref__c  ;
test1_tmp.isPublic = "true" ;
test1_tmp.newIsPublic = "true" ;
test1_tmp.property_Season = row8.property_Season  ;
test1_tmp.newProperty_Season = row9.SeasonBynder  ;
test1_tmp.property_Year = row8.property_Year  ;
test1_tmp.newProperty_Year = row9.Year  ;
test1_tmp.property_Asset_Type = row8.property_Asset_Type ;
test1_tmp.newProperty_Asset_Type = ( row8.property_Asset_Type.equals("Images") ? "Image" :
	( row8.property_Asset_Type.equals("Logos") ? "Logo" :
		( row8.property_Asset_Type.equals("Presentations") ? "Presentation" :
			( row8.property_Asset_Type.equals("Videos") ? "Video" : row8.property_Asset_Type ) ) ) )  ;
test1_tmp.property_Asset_Subtype = row8.property_Asset_Subtype  ;
test1_tmp.newProperty_Asset_Subtype = ( row8.property_Asset_Subtype.equals("Lifestyle_image") ? "Lifestyle image" :
	( row8.property_Asset_Subtype.equals("Product_image") ? "Product image" :
			( row8.property_Asset_Subtype.equals("Videos") ? "Video" : row8.property_Asset_Subtype ) ) )  ;
test1_tmp.userCreated = row8.userCreated  ;
test1_tmp.filename = null;
test1_tmp.property_Age_Group = row8.property_Age_Group ;
test1_tmp.newProperty_Age_Group = row9.Age_Group_Haddad__c  ;
test1_tmp.property_Gender = row8.property_Gender  ;
test1_tmp.newProperty_Gender = row9.Gender_Haddad__c  ;
test1_tmp.property_Division = null;
test1_tmp.newProperty_Division = null;
test1_tmp.property_Sub_Division = null;
test1_tmp.newProperty_Sub_Division = null;
test1_tmp.Terms_of_Use = row8.Terms_of_Use  ;
test1_tmp.newTerms_of_Use = row8.Terms_of_Use.equals("Free_of_use") ? "Free of use" : row8.Terms_of_Use  ;
test1_tmp.PhotoView = row9.PhotoView  ;
test1 = test1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out9"
if(out9 != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out9");
					}
					
row10 = null;			
if(out9.id == null){
	finder_tUniqRow_2.id = null;
}else{
	finder_tUniqRow_2.id = out9.id.toLowerCase();
}
if(out9.description == null){
	finder_tUniqRow_2.description = null;
}else{
	finder_tUniqRow_2.description = out9.description.toLowerCase();
}
if(out9.newDescription == null){
	finder_tUniqRow_2.newDescription = null;
}else{
	finder_tUniqRow_2.newDescription = out9.newDescription.toLowerCase();
}
if(out9.type == null){
	finder_tUniqRow_2.type = null;
}else{
	finder_tUniqRow_2.type = out9.type.toLowerCase();
}
if(out9.idHash == null){
	finder_tUniqRow_2.idHash = null;
}else{
	finder_tUniqRow_2.idHash = out9.idHash.toLowerCase();
}
if(out9.tags == null){
	finder_tUniqRow_2.tags = null;
}else{
	finder_tUniqRow_2.tags = out9.tags.toLowerCase();
}
if(out9.newTags == null){
	finder_tUniqRow_2.newTags = null;
}else{
	finder_tUniqRow_2.newTags = out9.newTags.toLowerCase();
}
if(out9.brandId == null){
	finder_tUniqRow_2.brandId = null;
}else{
	finder_tUniqRow_2.brandId = out9.brandId.toLowerCase();
}
if(out9.name == null){
	finder_tUniqRow_2.name = null;
}else{
	finder_tUniqRow_2.name = out9.name.toLowerCase();
}
if(out9.newName == null){
	finder_tUniqRow_2.newName = null;
}else{
	finder_tUniqRow_2.newName = out9.newName.toLowerCase();
}
if(out9.property_Color_Code == null){
	finder_tUniqRow_2.property_Color_Code = null;
}else{
	finder_tUniqRow_2.property_Color_Code = out9.property_Color_Code.toLowerCase();
}
if(out9.newProperty_Color_Code == null){
	finder_tUniqRow_2.newProperty_Color_Code = null;
}else{
	finder_tUniqRow_2.newProperty_Color_Code = out9.newProperty_Color_Code.toLowerCase();
}
if(out9.property_Style_Code == null){
	finder_tUniqRow_2.property_Style_Code = null;
}else{
	finder_tUniqRow_2.property_Style_Code = out9.property_Style_Code.toLowerCase();
}
if(out9.newProperty_Style_Code == null){
	finder_tUniqRow_2.newProperty_Style_Code = null;
}else{
	finder_tUniqRow_2.newProperty_Style_Code = out9.newProperty_Style_Code.toLowerCase();
}
if(out9.property_Brand == null){
	finder_tUniqRow_2.property_Brand = null;
}else{
	finder_tUniqRow_2.property_Brand = out9.property_Brand.toLowerCase();
}
if(out9.newProperty_Brand == null){
	finder_tUniqRow_2.newProperty_Brand = null;
}else{
	finder_tUniqRow_2.newProperty_Brand = out9.newProperty_Brand.toLowerCase();
}
if(out9.extension == null){
	finder_tUniqRow_2.extension = null;
}else{
	finder_tUniqRow_2.extension = out9.extension.toLowerCase();
}
if(out9.newExtension == null){
	finder_tUniqRow_2.newExtension = null;
}else{
	finder_tUniqRow_2.newExtension = out9.newExtension.toLowerCase();
}
if(out9.property_Style_Reference == null){
	finder_tUniqRow_2.property_Style_Reference = null;
}else{
	finder_tUniqRow_2.property_Style_Reference = out9.property_Style_Reference.toLowerCase();
}
if(out9.newProperty_Style_Reference == null){
	finder_tUniqRow_2.newProperty_Style_Reference = null;
}else{
	finder_tUniqRow_2.newProperty_Style_Reference = out9.newProperty_Style_Reference.toLowerCase();
}
if(out9.isPublic == null){
	finder_tUniqRow_2.isPublic = null;
}else{
	finder_tUniqRow_2.isPublic = out9.isPublic.toLowerCase();
}
if(out9.newIsPublic == null){
	finder_tUniqRow_2.newIsPublic = null;
}else{
	finder_tUniqRow_2.newIsPublic = out9.newIsPublic.toLowerCase();
}
if(out9.property_Season == null){
	finder_tUniqRow_2.property_Season = null;
}else{
	finder_tUniqRow_2.property_Season = out9.property_Season.toLowerCase();
}
if(out9.newProperty_Season == null){
	finder_tUniqRow_2.newProperty_Season = null;
}else{
	finder_tUniqRow_2.newProperty_Season = out9.newProperty_Season.toLowerCase();
}
if(out9.property_Year == null){
	finder_tUniqRow_2.property_Year = null;
}else{
	finder_tUniqRow_2.property_Year = out9.property_Year.toLowerCase();
}
if(out9.newProperty_Year == null){
	finder_tUniqRow_2.newProperty_Year = null;
}else{
	finder_tUniqRow_2.newProperty_Year = out9.newProperty_Year.toLowerCase();
}
if(out9.property_Asset_Type == null){
	finder_tUniqRow_2.property_Asset_Type = null;
}else{
	finder_tUniqRow_2.property_Asset_Type = out9.property_Asset_Type.toLowerCase();
}
if(out9.newProperty_Asset_Type == null){
	finder_tUniqRow_2.newProperty_Asset_Type = null;
}else{
	finder_tUniqRow_2.newProperty_Asset_Type = out9.newProperty_Asset_Type.toLowerCase();
}
if(out9.property_Asset_Subtype == null){
	finder_tUniqRow_2.property_Asset_Subtype = null;
}else{
	finder_tUniqRow_2.property_Asset_Subtype = out9.property_Asset_Subtype.toLowerCase();
}
if(out9.newProperty_Asset_Subtype == null){
	finder_tUniqRow_2.newProperty_Asset_Subtype = null;
}else{
	finder_tUniqRow_2.newProperty_Asset_Subtype = out9.newProperty_Asset_Subtype.toLowerCase();
}
if(out9.userCreated == null){
	finder_tUniqRow_2.userCreated = null;
}else{
	finder_tUniqRow_2.userCreated = out9.userCreated.toLowerCase();
}
if(out9.filename == null){
	finder_tUniqRow_2.filename = null;
}else{
	finder_tUniqRow_2.filename = out9.filename.toLowerCase();
}
if(out9.property_Age_Group == null){
	finder_tUniqRow_2.property_Age_Group = null;
}else{
	finder_tUniqRow_2.property_Age_Group = out9.property_Age_Group.toLowerCase();
}
if(out9.newProperty_Age_Group == null){
	finder_tUniqRow_2.newProperty_Age_Group = null;
}else{
	finder_tUniqRow_2.newProperty_Age_Group = out9.newProperty_Age_Group.toLowerCase();
}
if(out9.property_Gender == null){
	finder_tUniqRow_2.property_Gender = null;
}else{
	finder_tUniqRow_2.property_Gender = out9.property_Gender.toLowerCase();
}
if(out9.newProperty_Gender == null){
	finder_tUniqRow_2.newProperty_Gender = null;
}else{
	finder_tUniqRow_2.newProperty_Gender = out9.newProperty_Gender.toLowerCase();
}
if(out9.property_Division == null){
	finder_tUniqRow_2.property_Division = null;
}else{
	finder_tUniqRow_2.property_Division = out9.property_Division.toLowerCase();
}
if(out9.newProperty_Division == null){
	finder_tUniqRow_2.newProperty_Division = null;
}else{
	finder_tUniqRow_2.newProperty_Division = out9.newProperty_Division.toLowerCase();
}
if(out9.property_Sub_Division == null){
	finder_tUniqRow_2.property_Sub_Division = null;
}else{
	finder_tUniqRow_2.property_Sub_Division = out9.property_Sub_Division.toLowerCase();
}
if(out9.newProperty_Sub_Division == null){
	finder_tUniqRow_2.newProperty_Sub_Division = null;
}else{
	finder_tUniqRow_2.newProperty_Sub_Division = out9.newProperty_Sub_Division.toLowerCase();
}
if(out9.Terms_of_Use == null){
	finder_tUniqRow_2.Terms_of_Use = null;
}else{
	finder_tUniqRow_2.Terms_of_Use = out9.Terms_of_Use.toLowerCase();
}
if(out9.newTerms_of_Use == null){
	finder_tUniqRow_2.newTerms_of_Use = null;
}else{
	finder_tUniqRow_2.newTerms_of_Use = out9.newTerms_of_Use.toLowerCase();
}
if(out9.PhotoView == null){
	finder_tUniqRow_2.PhotoView = null;
}else{
	finder_tUniqRow_2.PhotoView = out9.PhotoView.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(out9.id == null){
	new_tUniqRow_2.id = null;
}else{
	new_tUniqRow_2.id = out9.id.toLowerCase();
}
if(out9.description == null){
	new_tUniqRow_2.description = null;
}else{
	new_tUniqRow_2.description = out9.description.toLowerCase();
}
if(out9.newDescription == null){
	new_tUniqRow_2.newDescription = null;
}else{
	new_tUniqRow_2.newDescription = out9.newDescription.toLowerCase();
}
if(out9.type == null){
	new_tUniqRow_2.type = null;
}else{
	new_tUniqRow_2.type = out9.type.toLowerCase();
}
if(out9.idHash == null){
	new_tUniqRow_2.idHash = null;
}else{
	new_tUniqRow_2.idHash = out9.idHash.toLowerCase();
}
if(out9.tags == null){
	new_tUniqRow_2.tags = null;
}else{
	new_tUniqRow_2.tags = out9.tags.toLowerCase();
}
if(out9.newTags == null){
	new_tUniqRow_2.newTags = null;
}else{
	new_tUniqRow_2.newTags = out9.newTags.toLowerCase();
}
if(out9.brandId == null){
	new_tUniqRow_2.brandId = null;
}else{
	new_tUniqRow_2.brandId = out9.brandId.toLowerCase();
}
if(out9.name == null){
	new_tUniqRow_2.name = null;
}else{
	new_tUniqRow_2.name = out9.name.toLowerCase();
}
if(out9.newName == null){
	new_tUniqRow_2.newName = null;
}else{
	new_tUniqRow_2.newName = out9.newName.toLowerCase();
}
if(out9.property_Color_Code == null){
	new_tUniqRow_2.property_Color_Code = null;
}else{
	new_tUniqRow_2.property_Color_Code = out9.property_Color_Code.toLowerCase();
}
if(out9.newProperty_Color_Code == null){
	new_tUniqRow_2.newProperty_Color_Code = null;
}else{
	new_tUniqRow_2.newProperty_Color_Code = out9.newProperty_Color_Code.toLowerCase();
}
if(out9.property_Style_Code == null){
	new_tUniqRow_2.property_Style_Code = null;
}else{
	new_tUniqRow_2.property_Style_Code = out9.property_Style_Code.toLowerCase();
}
if(out9.newProperty_Style_Code == null){
	new_tUniqRow_2.newProperty_Style_Code = null;
}else{
	new_tUniqRow_2.newProperty_Style_Code = out9.newProperty_Style_Code.toLowerCase();
}
if(out9.property_Brand == null){
	new_tUniqRow_2.property_Brand = null;
}else{
	new_tUniqRow_2.property_Brand = out9.property_Brand.toLowerCase();
}
if(out9.newProperty_Brand == null){
	new_tUniqRow_2.newProperty_Brand = null;
}else{
	new_tUniqRow_2.newProperty_Brand = out9.newProperty_Brand.toLowerCase();
}
if(out9.extension == null){
	new_tUniqRow_2.extension = null;
}else{
	new_tUniqRow_2.extension = out9.extension.toLowerCase();
}
if(out9.newExtension == null){
	new_tUniqRow_2.newExtension = null;
}else{
	new_tUniqRow_2.newExtension = out9.newExtension.toLowerCase();
}
if(out9.property_Style_Reference == null){
	new_tUniqRow_2.property_Style_Reference = null;
}else{
	new_tUniqRow_2.property_Style_Reference = out9.property_Style_Reference.toLowerCase();
}
if(out9.newProperty_Style_Reference == null){
	new_tUniqRow_2.newProperty_Style_Reference = null;
}else{
	new_tUniqRow_2.newProperty_Style_Reference = out9.newProperty_Style_Reference.toLowerCase();
}
if(out9.isPublic == null){
	new_tUniqRow_2.isPublic = null;
}else{
	new_tUniqRow_2.isPublic = out9.isPublic.toLowerCase();
}
if(out9.newIsPublic == null){
	new_tUniqRow_2.newIsPublic = null;
}else{
	new_tUniqRow_2.newIsPublic = out9.newIsPublic.toLowerCase();
}
if(out9.property_Season == null){
	new_tUniqRow_2.property_Season = null;
}else{
	new_tUniqRow_2.property_Season = out9.property_Season.toLowerCase();
}
if(out9.newProperty_Season == null){
	new_tUniqRow_2.newProperty_Season = null;
}else{
	new_tUniqRow_2.newProperty_Season = out9.newProperty_Season.toLowerCase();
}
if(out9.property_Year == null){
	new_tUniqRow_2.property_Year = null;
}else{
	new_tUniqRow_2.property_Year = out9.property_Year.toLowerCase();
}
if(out9.newProperty_Year == null){
	new_tUniqRow_2.newProperty_Year = null;
}else{
	new_tUniqRow_2.newProperty_Year = out9.newProperty_Year.toLowerCase();
}
if(out9.property_Asset_Type == null){
	new_tUniqRow_2.property_Asset_Type = null;
}else{
	new_tUniqRow_2.property_Asset_Type = out9.property_Asset_Type.toLowerCase();
}
if(out9.newProperty_Asset_Type == null){
	new_tUniqRow_2.newProperty_Asset_Type = null;
}else{
	new_tUniqRow_2.newProperty_Asset_Type = out9.newProperty_Asset_Type.toLowerCase();
}
if(out9.property_Asset_Subtype == null){
	new_tUniqRow_2.property_Asset_Subtype = null;
}else{
	new_tUniqRow_2.property_Asset_Subtype = out9.property_Asset_Subtype.toLowerCase();
}
if(out9.newProperty_Asset_Subtype == null){
	new_tUniqRow_2.newProperty_Asset_Subtype = null;
}else{
	new_tUniqRow_2.newProperty_Asset_Subtype = out9.newProperty_Asset_Subtype.toLowerCase();
}
if(out9.userCreated == null){
	new_tUniqRow_2.userCreated = null;
}else{
	new_tUniqRow_2.userCreated = out9.userCreated.toLowerCase();
}
if(out9.filename == null){
	new_tUniqRow_2.filename = null;
}else{
	new_tUniqRow_2.filename = out9.filename.toLowerCase();
}
if(out9.property_Age_Group == null){
	new_tUniqRow_2.property_Age_Group = null;
}else{
	new_tUniqRow_2.property_Age_Group = out9.property_Age_Group.toLowerCase();
}
if(out9.newProperty_Age_Group == null){
	new_tUniqRow_2.newProperty_Age_Group = null;
}else{
	new_tUniqRow_2.newProperty_Age_Group = out9.newProperty_Age_Group.toLowerCase();
}
if(out9.property_Gender == null){
	new_tUniqRow_2.property_Gender = null;
}else{
	new_tUniqRow_2.property_Gender = out9.property_Gender.toLowerCase();
}
if(out9.newProperty_Gender == null){
	new_tUniqRow_2.newProperty_Gender = null;
}else{
	new_tUniqRow_2.newProperty_Gender = out9.newProperty_Gender.toLowerCase();
}
if(out9.property_Division == null){
	new_tUniqRow_2.property_Division = null;
}else{
	new_tUniqRow_2.property_Division = out9.property_Division.toLowerCase();
}
if(out9.newProperty_Division == null){
	new_tUniqRow_2.newProperty_Division = null;
}else{
	new_tUniqRow_2.newProperty_Division = out9.newProperty_Division.toLowerCase();
}
if(out9.property_Sub_Division == null){
	new_tUniqRow_2.property_Sub_Division = null;
}else{
	new_tUniqRow_2.property_Sub_Division = out9.property_Sub_Division.toLowerCase();
}
if(out9.newProperty_Sub_Division == null){
	new_tUniqRow_2.newProperty_Sub_Division = null;
}else{
	new_tUniqRow_2.newProperty_Sub_Division = out9.newProperty_Sub_Division.toLowerCase();
}
if(out9.Terms_of_Use == null){
	new_tUniqRow_2.Terms_of_Use = null;
}else{
	new_tUniqRow_2.Terms_of_Use = out9.Terms_of_Use.toLowerCase();
}
if(out9.newTerms_of_Use == null){
	new_tUniqRow_2.newTerms_of_Use = null;
}else{
	new_tUniqRow_2.newTerms_of_Use = out9.newTerms_of_Use.toLowerCase();
}
if(out9.PhotoView == null){
	new_tUniqRow_2.PhotoView = null;
}else{
	new_tUniqRow_2.PhotoView = out9.PhotoView.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.id = out9.id;			row10.description = out9.description;			row10.newDescription = out9.newDescription;			row10.type = out9.type;			row10.idHash = out9.idHash;			row10.tags = out9.tags;			row10.newTags = out9.newTags;			row10.brandId = out9.brandId;			row10.name = out9.name;			row10.newName = out9.newName;			row10.property_Color_Code = out9.property_Color_Code;			row10.newProperty_Color_Code = out9.newProperty_Color_Code;			row10.property_Style_Code = out9.property_Style_Code;			row10.newProperty_Style_Code = out9.newProperty_Style_Code;			row10.property_Brand = out9.property_Brand;			row10.newProperty_Brand = out9.newProperty_Brand;			row10.extension = out9.extension;			row10.newExtension = out9.newExtension;			row10.property_Style_Reference = out9.property_Style_Reference;			row10.newProperty_Style_Reference = out9.newProperty_Style_Reference;			row10.isPublic = out9.isPublic;			row10.newIsPublic = out9.newIsPublic;			row10.property_Season = out9.property_Season;			row10.newProperty_Season = out9.newProperty_Season;			row10.property_Year = out9.property_Year;			row10.newProperty_Year = out9.newProperty_Year;			row10.property_Asset_Type = out9.property_Asset_Type;			row10.newProperty_Asset_Type = out9.newProperty_Asset_Type;			row10.property_Asset_Subtype = out9.property_Asset_Subtype;			row10.newProperty_Asset_Subtype = out9.newProperty_Asset_Subtype;			row10.userCreated = out9.userCreated;			row10.filename = out9.filename;			row10.property_Age_Group = out9.property_Age_Group;			row10.newProperty_Age_Group = out9.newProperty_Age_Group;			row10.property_Gender = out9.property_Gender;			row10.newProperty_Gender = out9.newProperty_Gender;			row10.property_Division = out9.property_Division;			row10.newProperty_Division = out9.newProperty_Division;			row10.property_Sub_Division = out9.property_Sub_Division;			row10.newProperty_Sub_Division = out9.newProperty_Sub_Division;			row10.Terms_of_Use = out9.Terms_of_Use;			row10.newTerms_of_Use = out9.newTerms_of_Use;			row10.PhotoView = out9.PhotoView;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		row19HashKey.AssetName = row10.name ;
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
								
									tFileInputDelimited_5Process(globalMap);
									
									
										tHash_Lookup_row19 = 
										(org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
										((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
											globalMap.get( "tHash_Lookup_row19" ));
									
								
									tHash_Lookup_row19.initGet();
								
									tHash_Lookup_row19.lookup( row19HashKey );
										
									
									
										
								

	  							

 								
								  
								  if(!tHash_Lookup_row19.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.AssetName = '" + row19HashKey.AssetName + "'");
								} // G 071
							

							row19Struct row19 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

outputBynder = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'outputBynder'
outputBynder_tmp.id = row10.id;
outputBynder_tmp.description = row10.description;
outputBynder_tmp.newDescription = row10.newDescription;
outputBynder_tmp.type = row10.type;
outputBynder_tmp.idHash = row10.idHash;
outputBynder_tmp.tags = row10.tags;
outputBynder_tmp.newTags = row10.newTags;
outputBynder_tmp.brandId = row10.brandId;
outputBynder_tmp.name = row10.name;
outputBynder_tmp.newName = row10.newName;
outputBynder_tmp.property_Color_Code = row10.property_Color_Code;
outputBynder_tmp.newProperty_Color_Code = row10.newProperty_Color_Code;
outputBynder_tmp.property_Style_Code = row10.property_Style_Code;
outputBynder_tmp.newProperty_Style_Code = row10.newProperty_Style_Code;
outputBynder_tmp.property_Brand = row10.property_Brand;
outputBynder_tmp.newProperty_Brand = row10.newProperty_Brand;
outputBynder_tmp.extension = row10.extension;
outputBynder_tmp.newExtension = row10.newExtension;
outputBynder_tmp.property_Style_Reference = row10.property_Style_Reference;
outputBynder_tmp.newProperty_Style_Reference = row10.newProperty_Style_Reference;
outputBynder_tmp.isPublic = row10.isPublic;
outputBynder_tmp.newIsPublic = row10.newIsPublic;
outputBynder_tmp.property_Season = row10.property_Season;
outputBynder_tmp.newProperty_Season = row10.newProperty_Season;
outputBynder_tmp.property_Year = row10.property_Year;
outputBynder_tmp.newProperty_Year = row10.newProperty_Year;
outputBynder_tmp.property_Asset_Type = row10.property_Asset_Type;
outputBynder_tmp.newProperty_Asset_Type = row10.newProperty_Asset_Type;
outputBynder_tmp.property_Asset_Subtype = row10.property_Asset_Subtype;
outputBynder_tmp.newProperty_Asset_Subtype = row10.newProperty_Asset_Subtype;
outputBynder_tmp.userCreated = row10.userCreated;
outputBynder_tmp.filename = row10.filename;
outputBynder_tmp.property_Age_Group = row10.property_Age_Group;
outputBynder_tmp.newProperty_Age_Group = row10.newProperty_Age_Group;
outputBynder_tmp.property_Gender = row10.property_Gender;
outputBynder_tmp.newProperty_Gender = row10.newProperty_Gender;
outputBynder_tmp.property_Division = row10.property_Division;
outputBynder_tmp.newProperty_Division = row10.newProperty_Division;
outputBynder_tmp.property_Sub_Division = row10.property_Sub_Division;
outputBynder_tmp.newProperty_Sub_Division = row10.newProperty_Sub_Division;
outputBynder_tmp.Terms_of_Use = row10.Terms_of_Use;
outputBynder_tmp.newTerms_of_Use = row10.newTerms_of_Use  ;
outputBynder_tmp.PhotoView = row19.PhotoView ;
outputBynder = outputBynder_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "outputBynder"
if(outputBynder != null) { 



	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"outputBynder");
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(outputBynder.id != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.id
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.description != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.description
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newDescription != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newDescription
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.type != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.type
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.idHash != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.idHash
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.tags != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.tags
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newTags != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newTags
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.brandId != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.brandId
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.name != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.name
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newName != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newName
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Color_Code != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Color_Code
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Color_Code != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Color_Code
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Style_Code != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Style_Code
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Style_Code != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Style_Code
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Brand != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Brand
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Brand != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Brand
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.extension != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.extension
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newExtension != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newExtension
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Style_Reference != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Style_Reference
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Style_Reference != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Style_Reference
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.isPublic != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.isPublic
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newIsPublic != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newIsPublic
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Season != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Season
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Season != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Season
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Year != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Year
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Year != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Year
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Asset_Type != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Asset_Type
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Asset_Type != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Asset_Type
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Asset_Subtype != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Asset_Subtype
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Asset_Subtype != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Asset_Subtype
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.userCreated != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.userCreated
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.filename != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.filename
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Age_Group != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Age_Group
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Age_Group != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Age_Group
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Gender != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Gender
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Gender != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Gender
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Division != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Division
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Division != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Division
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.property_Sub_Division != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.property_Sub_Division
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newProperty_Sub_Division != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newProperty_Sub_Division
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.Terms_of_Use != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.Terms_of_Use
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.newTerms_of_Use != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.newTerms_of_Use
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(outputBynder.PhotoView != null) {
                        sb_tFileOutputDelimited_3.append(
                            outputBynder.PhotoView
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */

} // End of branch "outputBynder"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "out9"




// Start of branch "test1"
if(test1 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"test1");
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(test1.id != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.id
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.description != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.description
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newDescription != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newDescription
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.type != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.type
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.idHash != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.idHash
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.tags != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.tags
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newTags != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newTags
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.brandId != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.brandId
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.name != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.name
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newName != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newName
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Color_Code != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Color_Code
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Color_Code != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Color_Code
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Style_Code != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Style_Code
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Style_Code != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Style_Code
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Brand != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Brand
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Brand != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Brand
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.extension != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.extension
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newExtension != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newExtension
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Style_Reference != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Style_Reference
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Style_Reference != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Style_Reference
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.isPublic != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.isPublic
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newIsPublic != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newIsPublic
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Season != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Season
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Season != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Season
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Year != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Year
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Year != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Year
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Asset_Type != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Asset_Type
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Asset_Type != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Asset_Type
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Asset_Subtype != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Asset_Subtype
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Asset_Subtype != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Asset_Subtype
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.userCreated != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.userCreated
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.filename != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.filename
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Age_Group != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Age_Group
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Age_Group != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Age_Group
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Gender != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Gender
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Gender != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Gender
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Division != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Division
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Division != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Division
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.property_Sub_Division != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.property_Sub_Division
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newProperty_Sub_Division != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newProperty_Sub_Division
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.Terms_of_Use != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.Terms_of_Use
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.newTerms_of_Use != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.newTerms_of_Use
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(test1.PhotoView != null) {
                        sb_tFileOutputDelimited_4.append(
                            test1.PhotoView
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "test1"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(context.bynderDirectory + "/temp/tempBynderExtract.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out9");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"outputBynder");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */










	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"test1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tFileInputDelimited_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */










	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
						this.statusCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
					// Integer
				
						writeInteger(this.statusCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
		sb.append(",string="+string);
		sb.append(",statusCode="+String.valueOf(statusCode));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String newDescription;

				public String getNewDescription () {
					return this.newDescription;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String newTags;

				public String getNewTags () {
					return this.newTags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String newName;

				public String getNewName () {
					return this.newName;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String newProperty_Color_Code;

				public String getNewProperty_Color_Code () {
					return this.newProperty_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String newProperty_Style_Code;

				public String getNewProperty_Style_Code () {
					return this.newProperty_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String newProperty_Brand;

				public String getNewProperty_Brand () {
					return this.newProperty_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String newProperty_Style_Reference;

				public String getNewProperty_Style_Reference () {
					return this.newProperty_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String newIsPublic;

				public String getNewIsPublic () {
					return this.newIsPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String newProperty_Season;

				public String getNewProperty_Season () {
					return this.newProperty_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String newProperty_Year;

				public String getNewProperty_Year () {
					return this.newProperty_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String newProperty_Asset_Type;

				public String getNewProperty_Asset_Type () {
					return this.newProperty_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String newProperty_Asset_Subtype;

				public String getNewProperty_Asset_Subtype () {
					return this.newProperty_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String newProperty_Age_Group;

				public String getNewProperty_Age_Group () {
					return this.newProperty_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String newProperty_Gender;

				public String getNewProperty_Gender () {
					return this.newProperty_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String newProperty_Division;

				public String getNewProperty_Division () {
					return this.newProperty_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String newProperty_Sub_Division;

				public String getNewProperty_Sub_Division () {
					return this.newProperty_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.newDescription = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.newTags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.newName = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.newProperty_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.newProperty_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.newProperty_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.newProperty_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.newIsPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.newProperty_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.newProperty_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.newProperty_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.newProperty_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.newProperty_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.newProperty_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.newProperty_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.newProperty_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.newDescription,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.newTags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.newName,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.newProperty_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.newProperty_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.newProperty_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.newProperty_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.newIsPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.newProperty_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.newProperty_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.newProperty_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.newProperty_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.newProperty_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.newProperty_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",newDescription="+newDescription);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",newTags="+newTags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",newName="+newName);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",newProperty_Color_Code="+newProperty_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",newProperty_Style_Code="+newProperty_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",newProperty_Brand="+newProperty_Brand);
		sb.append(",extension="+extension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",newProperty_Style_Reference="+newProperty_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",newIsPublic="+newIsPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",newProperty_Season="+newProperty_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",newProperty_Year="+newProperty_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",newProperty_Asset_Type="+newProperty_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",newProperty_Asset_Subtype="+newProperty_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",newProperty_Age_Group="+newProperty_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",newProperty_Gender="+newProperty_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",newProperty_Division="+newProperty_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",newProperty_Sub_Division="+newProperty_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String newDescription;

				public String getNewDescription () {
					return this.newDescription;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String newTags;

				public String getNewTags () {
					return this.newTags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String newName;

				public String getNewName () {
					return this.newName;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String newProperty_Color_Code;

				public String getNewProperty_Color_Code () {
					return this.newProperty_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String newProperty_Style_Code;

				public String getNewProperty_Style_Code () {
					return this.newProperty_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String newProperty_Brand;

				public String getNewProperty_Brand () {
					return this.newProperty_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String newProperty_Style_Reference;

				public String getNewProperty_Style_Reference () {
					return this.newProperty_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String newIsPublic;

				public String getNewIsPublic () {
					return this.newIsPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String newProperty_Season;

				public String getNewProperty_Season () {
					return this.newProperty_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String newProperty_Year;

				public String getNewProperty_Year () {
					return this.newProperty_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String newProperty_Asset_Type;

				public String getNewProperty_Asset_Type () {
					return this.newProperty_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String newProperty_Asset_Subtype;

				public String getNewProperty_Asset_Subtype () {
					return this.newProperty_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String newProperty_Age_Group;

				public String getNewProperty_Age_Group () {
					return this.newProperty_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String newProperty_Gender;

				public String getNewProperty_Gender () {
					return this.newProperty_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String newProperty_Division;

				public String getNewProperty_Division () {
					return this.newProperty_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String newProperty_Sub_Division;

				public String getNewProperty_Sub_Division () {
					return this.newProperty_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.newDescription = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.newTags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.newName = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.newProperty_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.newProperty_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.newProperty_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.newProperty_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.newIsPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.newProperty_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.newProperty_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.newProperty_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.newProperty_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.newProperty_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.newProperty_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.newProperty_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.newProperty_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.newDescription,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.newTags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.newName,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.newProperty_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.newProperty_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.newProperty_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.newProperty_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.newIsPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.newProperty_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.newProperty_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.newProperty_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.newProperty_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.newProperty_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.newProperty_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",newDescription="+newDescription);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",newTags="+newTags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",newName="+newName);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",newProperty_Color_Code="+newProperty_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",newProperty_Style_Code="+newProperty_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",newProperty_Brand="+newProperty_Brand);
		sb.append(",extension="+extension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",newProperty_Style_Reference="+newProperty_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",newIsPublic="+newIsPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",newProperty_Season="+newProperty_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",newProperty_Year="+newProperty_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",newProperty_Asset_Type="+newProperty_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",newProperty_Asset_Subtype="+newProperty_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",newProperty_Age_Group="+newProperty_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",newProperty_Gender="+newProperty_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",newProperty_Division="+newProperty_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",newProperty_Sub_Division="+newProperty_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout10Struct implements routines.system.IPersistableRow<copyOfout10Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String newDescription;

				public String getNewDescription () {
					return this.newDescription;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String newTags;

				public String getNewTags () {
					return this.newTags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String newName;

				public String getNewName () {
					return this.newName;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String newProperty_Color_Code;

				public String getNewProperty_Color_Code () {
					return this.newProperty_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String newProperty_Style_Code;

				public String getNewProperty_Style_Code () {
					return this.newProperty_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String newProperty_Brand;

				public String getNewProperty_Brand () {
					return this.newProperty_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String newProperty_Style_Reference;

				public String getNewProperty_Style_Reference () {
					return this.newProperty_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String newIsPublic;

				public String getNewIsPublic () {
					return this.newIsPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String newProperty_Season;

				public String getNewProperty_Season () {
					return this.newProperty_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String newProperty_Year;

				public String getNewProperty_Year () {
					return this.newProperty_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String newProperty_Asset_Type;

				public String getNewProperty_Asset_Type () {
					return this.newProperty_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String newProperty_Asset_Subtype;

				public String getNewProperty_Asset_Subtype () {
					return this.newProperty_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String newProperty_Age_Group;

				public String getNewProperty_Age_Group () {
					return this.newProperty_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String newProperty_Gender;

				public String getNewProperty_Gender () {
					return this.newProperty_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String newProperty_Division;

				public String getNewProperty_Division () {
					return this.newProperty_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String newProperty_Sub_Division;

				public String getNewProperty_Sub_Division () {
					return this.newProperty_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.newDescription = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.newTags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.newName = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.newProperty_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.newProperty_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.newProperty_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.newProperty_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.newIsPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.newProperty_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.newProperty_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.newProperty_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.newProperty_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.newProperty_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.newProperty_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.newProperty_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.newProperty_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.newDescription,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.newTags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.newName,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.newProperty_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.newProperty_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.newProperty_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.newProperty_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.newIsPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.newProperty_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.newProperty_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.newProperty_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.newProperty_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.newProperty_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.newProperty_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",newDescription="+newDescription);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",newTags="+newTags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",newName="+newName);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",newProperty_Color_Code="+newProperty_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",newProperty_Style_Code="+newProperty_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",newProperty_Brand="+newProperty_Brand);
		sb.append(",extension="+extension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",newProperty_Style_Reference="+newProperty_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",newIsPublic="+newIsPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",newProperty_Season="+newProperty_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",newProperty_Year="+newProperty_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",newProperty_Asset_Type="+newProperty_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",newProperty_Asset_Subtype="+newProperty_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",newProperty_Age_Group="+newProperty_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",newProperty_Gender="+newProperty_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",newProperty_Division="+newProperty_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",newProperty_Sub_Division="+newProperty_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String newDescription;

				public String getNewDescription () {
					return this.newDescription;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String idHash;

				public String getIdHash () {
					return this.idHash;
				}
				
			    public String tags;

				public String getTags () {
					return this.tags;
				}
				
			    public String newTags;

				public String getNewTags () {
					return this.newTags;
				}
				
			    public String brandId;

				public String getBrandId () {
					return this.brandId;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String newName;

				public String getNewName () {
					return this.newName;
				}
				
			    public String property_Color_Code;

				public String getProperty_Color_Code () {
					return this.property_Color_Code;
				}
				
			    public String newProperty_Color_Code;

				public String getNewProperty_Color_Code () {
					return this.newProperty_Color_Code;
				}
				
			    public String property_Style_Code;

				public String getProperty_Style_Code () {
					return this.property_Style_Code;
				}
				
			    public String newProperty_Style_Code;

				public String getNewProperty_Style_Code () {
					return this.newProperty_Style_Code;
				}
				
			    public String property_Brand;

				public String getProperty_Brand () {
					return this.property_Brand;
				}
				
			    public String newProperty_Brand;

				public String getNewProperty_Brand () {
					return this.newProperty_Brand;
				}
				
			    public String extension;

				public String getExtension () {
					return this.extension;
				}
				
			    public String newExtension;

				public String getNewExtension () {
					return this.newExtension;
				}
				
			    public String property_Style_Reference;

				public String getProperty_Style_Reference () {
					return this.property_Style_Reference;
				}
				
			    public String newProperty_Style_Reference;

				public String getNewProperty_Style_Reference () {
					return this.newProperty_Style_Reference;
				}
				
			    public String isPublic;

				public String getIsPublic () {
					return this.isPublic;
				}
				
			    public String newIsPublic;

				public String getNewIsPublic () {
					return this.newIsPublic;
				}
				
			    public String property_Season;

				public String getProperty_Season () {
					return this.property_Season;
				}
				
			    public String newProperty_Season;

				public String getNewProperty_Season () {
					return this.newProperty_Season;
				}
				
			    public String property_Year;

				public String getProperty_Year () {
					return this.property_Year;
				}
				
			    public String newProperty_Year;

				public String getNewProperty_Year () {
					return this.newProperty_Year;
				}
				
			    public String property_Asset_Type;

				public String getProperty_Asset_Type () {
					return this.property_Asset_Type;
				}
				
			    public String newProperty_Asset_Type;

				public String getNewProperty_Asset_Type () {
					return this.newProperty_Asset_Type;
				}
				
			    public String property_Asset_Subtype;

				public String getProperty_Asset_Subtype () {
					return this.property_Asset_Subtype;
				}
				
			    public String newProperty_Asset_Subtype;

				public String getNewProperty_Asset_Subtype () {
					return this.newProperty_Asset_Subtype;
				}
				
			    public String userCreated;

				public String getUserCreated () {
					return this.userCreated;
				}
				
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String property_Age_Group;

				public String getProperty_Age_Group () {
					return this.property_Age_Group;
				}
				
			    public String newProperty_Age_Group;

				public String getNewProperty_Age_Group () {
					return this.newProperty_Age_Group;
				}
				
			    public String property_Gender;

				public String getProperty_Gender () {
					return this.property_Gender;
				}
				
			    public String newProperty_Gender;

				public String getNewProperty_Gender () {
					return this.newProperty_Gender;
				}
				
			    public String property_Division;

				public String getProperty_Division () {
					return this.property_Division;
				}
				
			    public String newProperty_Division;

				public String getNewProperty_Division () {
					return this.newProperty_Division;
				}
				
			    public String property_Sub_Division;

				public String getProperty_Sub_Division () {
					return this.property_Sub_Division;
				}
				
			    public String newProperty_Sub_Division;

				public String getNewProperty_Sub_Division () {
					return this.newProperty_Sub_Division;
				}
				
			    public String Terms_of_Use;

				public String getTerms_of_Use () {
					return this.Terms_of_Use;
				}
				
			    public String NewTerms_of_Use;

				public String getNewTerms_of_Use () {
					return this.NewTerms_of_Use;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.description = readString(dis);
					
					this.newDescription = readString(dis);
					
					this.type = readString(dis);
					
					this.idHash = readString(dis);
					
					this.tags = readString(dis);
					
					this.newTags = readString(dis);
					
					this.brandId = readString(dis);
					
					this.name = readString(dis);
					
					this.newName = readString(dis);
					
					this.property_Color_Code = readString(dis);
					
					this.newProperty_Color_Code = readString(dis);
					
					this.property_Style_Code = readString(dis);
					
					this.newProperty_Style_Code = readString(dis);
					
					this.property_Brand = readString(dis);
					
					this.newProperty_Brand = readString(dis);
					
					this.extension = readString(dis);
					
					this.newExtension = readString(dis);
					
					this.property_Style_Reference = readString(dis);
					
					this.newProperty_Style_Reference = readString(dis);
					
					this.isPublic = readString(dis);
					
					this.newIsPublic = readString(dis);
					
					this.property_Season = readString(dis);
					
					this.newProperty_Season = readString(dis);
					
					this.property_Year = readString(dis);
					
					this.newProperty_Year = readString(dis);
					
					this.property_Asset_Type = readString(dis);
					
					this.newProperty_Asset_Type = readString(dis);
					
					this.property_Asset_Subtype = readString(dis);
					
					this.newProperty_Asset_Subtype = readString(dis);
					
					this.userCreated = readString(dis);
					
					this.filename = readString(dis);
					
					this.property_Age_Group = readString(dis);
					
					this.newProperty_Age_Group = readString(dis);
					
					this.property_Gender = readString(dis);
					
					this.newProperty_Gender = readString(dis);
					
					this.property_Division = readString(dis);
					
					this.newProperty_Division = readString(dis);
					
					this.property_Sub_Division = readString(dis);
					
					this.newProperty_Sub_Division = readString(dis);
					
					this.Terms_of_Use = readString(dis);
					
					this.NewTerms_of_Use = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.newDescription,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.idHash,dos);
					
					// String
				
						writeString(this.tags,dos);
					
					// String
				
						writeString(this.newTags,dos);
					
					// String
				
						writeString(this.brandId,dos);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.newName,dos);
					
					// String
				
						writeString(this.property_Color_Code,dos);
					
					// String
				
						writeString(this.newProperty_Color_Code,dos);
					
					// String
				
						writeString(this.property_Style_Code,dos);
					
					// String
				
						writeString(this.newProperty_Style_Code,dos);
					
					// String
				
						writeString(this.property_Brand,dos);
					
					// String
				
						writeString(this.newProperty_Brand,dos);
					
					// String
				
						writeString(this.extension,dos);
					
					// String
				
						writeString(this.newExtension,dos);
					
					// String
				
						writeString(this.property_Style_Reference,dos);
					
					// String
				
						writeString(this.newProperty_Style_Reference,dos);
					
					// String
				
						writeString(this.isPublic,dos);
					
					// String
				
						writeString(this.newIsPublic,dos);
					
					// String
				
						writeString(this.property_Season,dos);
					
					// String
				
						writeString(this.newProperty_Season,dos);
					
					// String
				
						writeString(this.property_Year,dos);
					
					// String
				
						writeString(this.newProperty_Year,dos);
					
					// String
				
						writeString(this.property_Asset_Type,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Type,dos);
					
					// String
				
						writeString(this.property_Asset_Subtype,dos);
					
					// String
				
						writeString(this.newProperty_Asset_Subtype,dos);
					
					// String
				
						writeString(this.userCreated,dos);
					
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.property_Age_Group,dos);
					
					// String
				
						writeString(this.newProperty_Age_Group,dos);
					
					// String
				
						writeString(this.property_Gender,dos);
					
					// String
				
						writeString(this.newProperty_Gender,dos);
					
					// String
				
						writeString(this.property_Division,dos);
					
					// String
				
						writeString(this.newProperty_Division,dos);
					
					// String
				
						writeString(this.property_Sub_Division,dos);
					
					// String
				
						writeString(this.newProperty_Sub_Division,dos);
					
					// String
				
						writeString(this.Terms_of_Use,dos);
					
					// String
				
						writeString(this.NewTerms_of_Use,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",description="+description);
		sb.append(",newDescription="+newDescription);
		sb.append(",type="+type);
		sb.append(",idHash="+idHash);
		sb.append(",tags="+tags);
		sb.append(",newTags="+newTags);
		sb.append(",brandId="+brandId);
		sb.append(",name="+name);
		sb.append(",newName="+newName);
		sb.append(",property_Color_Code="+property_Color_Code);
		sb.append(",newProperty_Color_Code="+newProperty_Color_Code);
		sb.append(",property_Style_Code="+property_Style_Code);
		sb.append(",newProperty_Style_Code="+newProperty_Style_Code);
		sb.append(",property_Brand="+property_Brand);
		sb.append(",newProperty_Brand="+newProperty_Brand);
		sb.append(",extension="+extension);
		sb.append(",newExtension="+newExtension);
		sb.append(",property_Style_Reference="+property_Style_Reference);
		sb.append(",newProperty_Style_Reference="+newProperty_Style_Reference);
		sb.append(",isPublic="+isPublic);
		sb.append(",newIsPublic="+newIsPublic);
		sb.append(",property_Season="+property_Season);
		sb.append(",newProperty_Season="+newProperty_Season);
		sb.append(",property_Year="+property_Year);
		sb.append(",newProperty_Year="+newProperty_Year);
		sb.append(",property_Asset_Type="+property_Asset_Type);
		sb.append(",newProperty_Asset_Type="+newProperty_Asset_Type);
		sb.append(",property_Asset_Subtype="+property_Asset_Subtype);
		sb.append(",newProperty_Asset_Subtype="+newProperty_Asset_Subtype);
		sb.append(",userCreated="+userCreated);
		sb.append(",filename="+filename);
		sb.append(",property_Age_Group="+property_Age_Group);
		sb.append(",newProperty_Age_Group="+newProperty_Age_Group);
		sb.append(",property_Gender="+property_Gender);
		sb.append(",newProperty_Gender="+newProperty_Gender);
		sb.append(",property_Division="+property_Division);
		sb.append(",newProperty_Division="+newProperty_Division);
		sb.append(",property_Sub_Division="+property_Sub_Division);
		sb.append(",newProperty_Sub_Division="+newProperty_Sub_Division);
		sb.append(",Terms_of_Use="+Terms_of_Use);
		sb.append(",NewTerms_of_Use="+NewTerms_of_Use);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
copyOfout10Struct copyOfout10 = new copyOfout10Struct();
copyOfout10Struct row14 = copyOfout10;
row28Struct row28 = new row28Struct();
row29Struct row29 = new row29Struct();








	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tRESTClient_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_2", false);
		start_Hash.put("tRESTClient_2", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tRESTClient_2 = 0;
		

 



/**
 * [tRESTClient_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_7", false);
		start_Hash.put("tUniqRow_7", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tUniqRow_7 = 0;
		

int nb_uniques_tUniqRow_7 = 0;
int nb_duplicates_tUniqRow_7 = 0; 

 



/**
 * [tUniqRow_7 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout10");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[41];

        public void addRow(String[] row) {

            for (int i = 0; i < 41; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 40 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 40 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[40] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"id","description","newDescription","type","idHash","tags","newTags","brandId","name","newName","property_Color_Code","newProperty_Color_Code","property_Style_Code","newProperty_Style_Code","property_Brand","newProperty_Brand","extension","property_Style_Reference","newProperty_Style_Reference","isPublic","newIsPublic","property_Season","newProperty_Season","property_Year","newProperty_Year","property_Asset_Type","newProperty_Asset_Type","property_Asset_Subtype","newProperty_Asset_Subtype","userCreated","filename","property_Age_Group","newProperty_Age_Group","property_Gender","newProperty_Gender","property_Division","newProperty_Division","property_Sub_Division","newProperty_Sub_Division","Terms_of_Use","PhotoView",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout10Struct copyOfout10_tmp = new copyOfout10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_8", false);
		start_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_8";

	
		int tos_count_tFileInputDelimited_8 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				int limit_tFileInputDelimited_8 = -1;
				try{
					
						Object filename_tFileInputDelimited_8 = context.bynderDirectory + "/temp/OutExtract.csv";
						if(filename_tFileInputDelimited_8 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
			if(footer_value_tFileInputDelimited_8 >0 || random_value_tFileInputDelimited_8 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(context.bynderDirectory + "/temp/OutExtract.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_8
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_8!=null && fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();
						
			    						row27 = null;			
												
									boolean whetherReject_tFileInputDelimited_8 = false;
									row27 = new row27Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_8 = 0;
				
					columnIndexWithD_tFileInputDelimited_8 = 0;
					
							row27.id = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 1;
					
							row27.description = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 2;
					
							row27.newDescription = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 3;
					
							row27.type = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 4;
					
							row27.idHash = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 5;
					
							row27.tags = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 6;
					
							row27.newTags = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 7;
					
							row27.brandId = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 8;
					
							row27.name = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 9;
					
							row27.newName = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 10;
					
							row27.property_Color_Code = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 11;
					
							row27.newProperty_Color_Code = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 12;
					
							row27.property_Style_Code = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 13;
					
							row27.newProperty_Style_Code = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 14;
					
							row27.property_Brand = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 15;
					
							row27.newProperty_Brand = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 16;
					
							row27.extension = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 17;
					
							row27.newExtension = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 18;
					
							row27.property_Style_Reference = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 19;
					
							row27.newProperty_Style_Reference = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 20;
					
							row27.isPublic = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 21;
					
							row27.newIsPublic = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 22;
					
							row27.property_Season = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 23;
					
							row27.newProperty_Season = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 24;
					
							row27.property_Year = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 25;
					
							row27.newProperty_Year = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 26;
					
							row27.property_Asset_Type = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 27;
					
							row27.newProperty_Asset_Type = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 28;
					
							row27.property_Asset_Subtype = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 29;
					
							row27.newProperty_Asset_Subtype = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 30;
					
							row27.userCreated = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 31;
					
							row27.filename = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 32;
					
							row27.property_Age_Group = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 33;
					
							row27.newProperty_Age_Group = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 34;
					
							row27.property_Gender = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 35;
					
							row27.newProperty_Gender = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 36;
					
							row27.property_Division = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 37;
					
							row27.newProperty_Division = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 38;
					
							row27.property_Sub_Division = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 39;
					
							row27.newProperty_Sub_Division = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 40;
					
							row27.Terms_of_Use = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 41;
					
							row27.NewTerms_of_Use = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
					columnIndexWithD_tFileInputDelimited_8 = 42;
					
							row27.PhotoView = fid_tFileInputDelimited_8.get(columnIndexWithD_tFileInputDelimited_8);
						
				
				
										
										if(rowstate_tFileInputDelimited_8.getException()!=null) {
											throw rowstate_tFileInputDelimited_8.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_8 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row27 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_8 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 


	tos_count_tFileInputDelimited_8++;

/**
 * [tFileInputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

copyOfout10 = null;


// # Output table : 'copyOfout10'
copyOfout10_tmp.id = row27.id ;
copyOfout10_tmp.description = row27.description ;
copyOfout10_tmp.newDescription = row27.newDescription ;
copyOfout10_tmp.type = row27.type ;
copyOfout10_tmp.idHash = row27.idHash ;
copyOfout10_tmp.tags = row27.tags ;
copyOfout10_tmp.newTags = row27.newTags ;
copyOfout10_tmp.brandId = row27.brandId ;
copyOfout10_tmp.name = row27.name ;
copyOfout10_tmp.newName = row27.newName;
copyOfout10_tmp.property_Color_Code = row27.property_Color_Code ;
copyOfout10_tmp.newProperty_Color_Code = row27.newProperty_Color_Code;
copyOfout10_tmp.property_Style_Code = row27.property_Style_Code ;
copyOfout10_tmp.newProperty_Style_Code = row27.newProperty_Style_Code;
copyOfout10_tmp.property_Brand = row27.property_Brand ;
copyOfout10_tmp.newProperty_Brand = row27.newProperty_Brand;
copyOfout10_tmp.extension = row27.extension ;
copyOfout10_tmp.property_Style_Reference = row27.property_Style_Reference ;
copyOfout10_tmp.newProperty_Style_Reference = row27.newProperty_Style_Reference;
copyOfout10_tmp.isPublic = row27.isPublic ;
copyOfout10_tmp.newIsPublic = row27.newIsPublic;
copyOfout10_tmp.property_Season = row27.property_Season ;
copyOfout10_tmp.newProperty_Season = row27.newProperty_Season;
copyOfout10_tmp.property_Year = row27.property_Year ;
copyOfout10_tmp.newProperty_Year = row27.newProperty_Year;
copyOfout10_tmp.property_Asset_Type = row27.property_Asset_Type ;
copyOfout10_tmp.newProperty_Asset_Type = row27.newProperty_Asset_Type;
copyOfout10_tmp.property_Asset_Subtype = row27.property_Asset_Subtype ;
copyOfout10_tmp.newProperty_Asset_Subtype = row27.newProperty_Asset_Subtype;
copyOfout10_tmp.userCreated = row27.userCreated ;
copyOfout10_tmp.filename = row27.filename ;
copyOfout10_tmp.property_Age_Group = row27.property_Age_Group ;
copyOfout10_tmp.newProperty_Age_Group = row27.newProperty_Age_Group;
copyOfout10_tmp.property_Gender = row27.property_Gender ;
copyOfout10_tmp.newProperty_Gender = row27.newProperty_Gender;
copyOfout10_tmp.property_Division = row27.property_Division ;
copyOfout10_tmp.newProperty_Division = row27.newProperty_Division;
copyOfout10_tmp.property_Sub_Division = row27.property_Sub_Division ;
copyOfout10_tmp.newProperty_Sub_Division = row27.newProperty_Sub_Division;
copyOfout10_tmp.Terms_of_Use = row27.Terms_of_Use ;
copyOfout10_tmp.PhotoView = row27.PhotoView ;
copyOfout10 = copyOfout10_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "copyOfout10"
if(copyOfout10 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout10");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[41];
   				
	    		if(copyOfout10.id != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(copyOfout10.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.description != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(copyOfout10.description)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newDescription != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(copyOfout10.newDescription)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.type != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(copyOfout10.type)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.idHash != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(copyOfout10.idHash)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.tags != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(copyOfout10.tags)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newTags != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(copyOfout10.newTags)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.brandId != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(copyOfout10.brandId)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.name != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(copyOfout10.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newName != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(copyOfout10.newName)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Color_Code != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(copyOfout10.property_Color_Code)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Color_Code != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(copyOfout10.newProperty_Color_Code)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Style_Code != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(copyOfout10.property_Style_Code)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Style_Code != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(copyOfout10.newProperty_Style_Code)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Brand != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(copyOfout10.property_Brand)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Brand != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(copyOfout10.newProperty_Brand)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.extension != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(copyOfout10.extension)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Style_Reference != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(copyOfout10.property_Style_Reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Style_Reference != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(copyOfout10.newProperty_Style_Reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.isPublic != null) { //              
                 row_tLogRow_1[19]=    						    
				                String.valueOf(copyOfout10.isPublic)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newIsPublic != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(copyOfout10.newIsPublic)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Season != null) { //              
                 row_tLogRow_1[21]=    						    
				                String.valueOf(copyOfout10.property_Season)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Season != null) { //              
                 row_tLogRow_1[22]=    						    
				                String.valueOf(copyOfout10.newProperty_Season)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Year != null) { //              
                 row_tLogRow_1[23]=    						    
				                String.valueOf(copyOfout10.property_Year)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Year != null) { //              
                 row_tLogRow_1[24]=    						    
				                String.valueOf(copyOfout10.newProperty_Year)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Asset_Type != null) { //              
                 row_tLogRow_1[25]=    						    
				                String.valueOf(copyOfout10.property_Asset_Type)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Asset_Type != null) { //              
                 row_tLogRow_1[26]=    						    
				                String.valueOf(copyOfout10.newProperty_Asset_Type)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Asset_Subtype != null) { //              
                 row_tLogRow_1[27]=    						    
				                String.valueOf(copyOfout10.property_Asset_Subtype)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Asset_Subtype != null) { //              
                 row_tLogRow_1[28]=    						    
				                String.valueOf(copyOfout10.newProperty_Asset_Subtype)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.userCreated != null) { //              
                 row_tLogRow_1[29]=    						    
				                String.valueOf(copyOfout10.userCreated)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.filename != null) { //              
                 row_tLogRow_1[30]=    						    
				                String.valueOf(copyOfout10.filename)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Age_Group != null) { //              
                 row_tLogRow_1[31]=    						    
				                String.valueOf(copyOfout10.property_Age_Group)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Age_Group != null) { //              
                 row_tLogRow_1[32]=    						    
				                String.valueOf(copyOfout10.newProperty_Age_Group)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Gender != null) { //              
                 row_tLogRow_1[33]=    						    
				                String.valueOf(copyOfout10.property_Gender)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Gender != null) { //              
                 row_tLogRow_1[34]=    						    
				                String.valueOf(copyOfout10.newProperty_Gender)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Division != null) { //              
                 row_tLogRow_1[35]=    						    
				                String.valueOf(copyOfout10.property_Division)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Division != null) { //              
                 row_tLogRow_1[36]=    						    
				                String.valueOf(copyOfout10.newProperty_Division)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.property_Sub_Division != null) { //              
                 row_tLogRow_1[37]=    						    
				                String.valueOf(copyOfout10.property_Sub_Division)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.newProperty_Sub_Division != null) { //              
                 row_tLogRow_1[38]=    						    
				                String.valueOf(copyOfout10.newProperty_Sub_Division)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.Terms_of_Use != null) { //              
                 row_tLogRow_1[39]=    						    
				                String.valueOf(copyOfout10.Terms_of_Use)			
					          ;	
							
	    		} //			
    			   				
	    		if(copyOfout10.PhotoView != null) { //              
                 row_tLogRow_1[40]=    						    
				                String.valueOf(copyOfout10.PhotoView)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row14 = copyOfout10;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_7 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					
row28.id = row14.id;			row28.description = row14.description;			row28.newDescription = row14.newDescription;			row28.type = row14.type;			row28.idHash = row14.idHash;			row28.tags = row14.tags;			row28.newTags = row14.newTags;			row28.brandId = row14.brandId;			row28.name = row14.name;			row28.newName = row14.newName;			row28.property_Color_Code = row14.property_Color_Code;			row28.newProperty_Color_Code = row14.newProperty_Color_Code;			row28.property_Style_Code = row14.property_Style_Code;			row28.newProperty_Style_Code = row14.newProperty_Style_Code;			row28.property_Brand = row14.property_Brand;			row28.newProperty_Brand = row14.newProperty_Brand;			row28.extension = row14.extension;			row28.property_Style_Reference = row14.property_Style_Reference;			row28.newProperty_Style_Reference = row14.newProperty_Style_Reference;			row28.isPublic = row14.isPublic;			row28.newIsPublic = row14.newIsPublic;			row28.property_Season = row14.property_Season;			row28.newProperty_Season = row14.newProperty_Season;			row28.property_Year = row14.property_Year;			row28.newProperty_Year = row14.newProperty_Year;			row28.property_Asset_Type = row14.property_Asset_Type;			row28.newProperty_Asset_Type = row14.newProperty_Asset_Type;			row28.property_Asset_Subtype = row14.property_Asset_Subtype;			row28.newProperty_Asset_Subtype = row14.newProperty_Asset_Subtype;			row28.userCreated = row14.userCreated;			row28.filename = row14.filename;			row28.property_Age_Group = row14.property_Age_Group;			row28.newProperty_Age_Group = row14.newProperty_Age_Group;			row28.property_Gender = row14.property_Gender;			row28.newProperty_Gender = row14.newProperty_Gender;			row28.property_Division = row14.property_Division;			row28.newProperty_Division = row14.newProperty_Division;			row28.property_Sub_Division = row14.property_Sub_Division;			row28.newProperty_Sub_Division = row14.newProperty_Sub_Division;			row28.Terms_of_Use = row14.Terms_of_Use;			row28.PhotoView = row14.PhotoView;			

 


	tos_count_tUniqRow_7++;

/**
 * [tUniqRow_7 main ] stop
 */
	
	/**
	 * [tUniqRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tRESTClient_2 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					
	row29 = null;

// expected response body
javax.ws.rs.core.Response responseDoc_tRESTClient_2 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_2 = null;
	String requestString_tRESTClient_2 = null;

	Object requestBody_tRESTClient_2 = requestDoc_tRESTClient_2 != null ? requestDoc_tRESTClient_2 : requestString_tRESTClient_2;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_2
		= String.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_2 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_2 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = "https://haddadbrand.bynder.com/api/v4/media/";
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_2.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_2.setAddress(url);
	

	

	
		features_tRESTClient_2.add(new org.apache.cxf.feature.LoggingFeature());
	

	

	factoryBean_tRESTClient_2.setFeatures(features_tRESTClient_2);


	java.util.List<Object> providers_tRESTClient_2 = new java.util.ArrayList<Object>();
	providers_tRESTClient_2.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_2) {
					e_tRESTClient_2.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_2 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_2.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_2.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_2.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_2.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_2.setDropRootElement(false);
		jsonProvider_tRESTClient_2.setConvertTypesToStrings(true);
	providers_tRESTClient_2.add(jsonProvider_tRESTClient_2);
	factoryBean_tRESTClient_2.setProviders(providers_tRESTClient_2);
	factoryBean_tRESTClient_2.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_2 = false;
	if (use_auth_tRESTClient_2 && "SAML".equals("OAUTH2_BEARER")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[Eovk/AV6IoEzkCSMwo641FZhb+1935gJeYse8b6m9AyIeAwtH7k=]");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_2.getBus(),
				"otman.nikraj@haddadeurope.com.partial", decryptedPassword_tRESTClient_2);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_2, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_2 = factoryBean_tRESTClient_2.createWebClient();

	// set request path
	webClient_tRESTClient_2.path(row28.id);

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_2 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_2);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_2 = clientConfig_tRESTClient_2.getHttpConduit();

    if (clientConfig_tRESTClient_2.getEndpoint() != null
            && clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

        org.apache.cxf.configuration.jsse.TLSClientParameters tlsClientParameters_tRESTClient_2 = new org.apache.cxf.configuration.jsse.TLSClientParameters();
        tlsClientParameters_tRESTClient_2.setDisableCNCheck(true);
        conduit_tRESTClient_2.setTlsClientParameters(tlsClientParameters_tRESTClient_2);

	

	if (use_auth_tRESTClient_2 && "BASIC".equals("OAUTH2_BEARER")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[dauOWo7xF+FDDX39zs12QQu3LRdN6oOhsxtXtxu4VJHuVc5DOdY=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_2.setAuthorizationType("Basic");
			authPolicy_tRESTClient_2.setUserName("otman.nikraj@haddadeurope.com.partial");
			authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
		conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
	} else if (use_auth_tRESTClient_2 && "HTTP Digest".equals("OAUTH2_BEARER")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[bBvnSCsA9dl4L5F+SOzHbLmJzmFnQSshqyDfYgfHmhqP9mmUv3g=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_2.setAuthorizationType("Digest");
		authPolicy_tRESTClient_2.setUserName("otman.nikraj@haddadeurope.com.partial");
		authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
		conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
	}

	if (!inOSGi) {
		conduit_tRESTClient_2.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_2.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_2 = false;
		if (use_proxy_tRESTClient_2) {
			
			 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[0xZvMg9aCIZZocNJVciuOPbSkosh2uEIbxBRCA==]");

			conduit_tRESTClient_2.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_2.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_2.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_2.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_2);
		}
	}
	
	
		conduit_tRESTClient_2.getClient().setAutoRedirect(true);
		clientConfig_tRESTClient_2.getRequestContext().put("http.redirect.relative.uri", true);
		clientConfig_tRESTClient_2.getRequestContext().put("http.redirect.same.host.only", false);
	

	

	
		// set Content-Type
		webClient_tRESTClient_2.type("application/x-www-form-urlencoded");
	

	
		// set Accept-Type
		webClient_tRESTClient_2.accept("application/json");
	

	
		// set optional query and header properties if any
	
		webClient_tRESTClient_2.header("Authorization", globalMap.get("tokentype")+ " " +globalMap.get("accesstoken"));
	
		webClient_tRESTClient_2.header("Accept", "application/json");
	
		webClient_tRESTClient_2.header("content-Type", "application/json");
	
	if (use_auth_tRESTClient_2 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_2.header("Authorization", "Bearer " + globalMap.get("tokentype")+ " " +globalMap.get("accesstoken"));
	}
	
	if (use_auth_tRESTClient_2 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {
 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[nOYOQHBpOIlFwfb1eLM5yN74wjHk7MnIho6RXX4kyikgQS0d7D0=]");

        String username_tRESTClient_2 = "otman.nikraj@haddadeurope.com.partial";
        String password_tRESTClient_2 = decryptedPassword_tRESTClient_2;

        String bearerHeader_tRESTClient_2 = null;

        try {
			if (!inOSGi) {
				org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_2 =
					new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/oidc-context.xml");
				org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_2 = context_tRESTClient_2.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
				bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2, oidcConfiguration_tRESTClient_2);
			}else{
				bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2);
			}
		} catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_2.header("Authorization", bearerHeader_tRESTClient_2);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		javax.ws.rs.core.Form form_tRESTClient_2 = new javax.ws.rs.core.Form();
		
			form_tRESTClient_2.param("name" ,row28.newName);
		
			form_tRESTClient_2.param("description" ,row28.newDescription);
		
			form_tRESTClient_2.param("tags" ,row28.newTags);
		
			form_tRESTClient_2.param("metaproperty.0E7F5A0A-DBB8-4FDC-A648B811CB7F92FE" ,row28.newProperty_Color_Code);
		
			form_tRESTClient_2.param("metaproperty.73489A4D-F984-40EA-840B6C33481D96A6" ,row28.newProperty_Style_Code);
		
			form_tRESTClient_2.param("metaproperty.E4D13B4A-FBDE-4702-B4BBB72B74D854C2" ,row28.newProperty_Brand);
		
			form_tRESTClient_2.param("metaproperty.10C6645B-D1D1-4F74-95FA1945D660B93E" ,row28.newProperty_Style_Reference);
		
			form_tRESTClient_2.param("isPublic" ,row28.newIsPublic);
		
			form_tRESTClient_2.param("metaproperty.7762F558-150B-4EEB-88DD7171CA89C763" ,row28.newProperty_Season);
		
			form_tRESTClient_2.param("metaproperty.3D960B44-C48B-45FF-AD6166AFA8D228B8" ,row28.newProperty_Year);
		
			form_tRESTClient_2.param("metaproperty.370DB808-8A3F-4708-9899482FD2F7A447" ,row28.newProperty_Asset_Type);
		
			form_tRESTClient_2.param("metaproperty.86FBC4EB-56D2-486B-BC6D3AEE6401E2B1" ,row28.newProperty_Asset_Subtype);
		
			form_tRESTClient_2.param("metaproperty.CD088462-C9B7-4BFF-9B84B06336DC8433" ,row28.newProperty_Age_Group);
		
			form_tRESTClient_2.param("metaproperty.3049A3D9-BAA1-4F1F-88F0A4549858D35A" ,row28.newProperty_Gender);
		
			form_tRESTClient_2.param("metaproperty.915D02BE-14A5-498D-A9640C4824BB5995" ,row28.newProperty_Division);
		
			form_tRESTClient_2.param("metaproperty.915D02BE-14A5-498D-A9640C4824BB5995" ,row28.property_Sub_Division);
		
			form_tRESTClient_2.param("metaproperty.FF1B8CFF-4420-47D1-9EFCD75B8AE718E4" ,row28.PhotoView);
		
		requestBody_tRESTClient_2 = form_tRESTClient_2;
	


	try {
		// start send request
		
			
				responseDoc_tRESTClient_2 = webClient_tRESTClient_2.post(requestBody_tRESTClient_2);
			
		


		int webClientResponseStatus_tRESTClient_2 = webClient_tRESTClient_2.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_2 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_2.getResponse());
		}

		
			if (row29 == null) {
				row29 = new row29Struct();
			}

			row29.statusCode = webClientResponseStatus_tRESTClient_2;
			
				
				Object responseObj_tRESTClient_2 = null;
				if(responseDoc_tRESTClient_2 != null && responseDoc_tRESTClient_2.hasEntity()){
					responseObj_tRESTClient_2 = responseDoc_tRESTClient_2.readEntity(responseClass_tRESTClient_2);
				
				if(responseObj_tRESTClient_2 != null){
					if (responseClass_tRESTClient_2 == String.class) {
						row29.string = (String) responseObj_tRESTClient_2;
					} else {
						routines.system.Document responseTalendDoc_tRESTClient_2 = null;
						if (null != responseObj_tRESTClient_2) {
							responseTalendDoc_tRESTClient_2 = new routines.system.Document();
							responseTalendDoc_tRESTClient_2.setDocument((org.dom4j.Document) responseObj_tRESTClient_2);
						}
						row29.body = responseTalendDoc_tRESTClient_2;
					}
				}
			}
			


			globalMap.put("tRESTClient_2_HEADERS", webClient_tRESTClient_2.getResponse().getHeaders());
			
			
			
			// handle "oneway" for PUT, POST and PATCH with empty response payload
			if (webClientResponseStatus_tRESTClient_2 == 202 && responseObj_tRESTClient_2 == null){
				row29.string = "";
				return;
			}
			
		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_2) {
		
			throw ex_tRESTClient_2;
		
	}

} catch(Exception e_tRESTClient_2) {
	
		throw new TalendException(e_tRESTClient_2, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_2++;

/**
 * [tRESTClient_2 main ] stop
 */
	
	/**
	 * [tRESTClient_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	

 



/**
 * [tRESTClient_2 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row29.body != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row29.body)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row29.string != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row29.string)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row29.statusCode != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row29.statusCode)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tRESTClient_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	

 



/**
 * [tRESTClient_2 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tUniqRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "copyOfout10"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tFileInputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	



            }
            }finally{
                if(!((Object)(context.bynderDirectory + "/temp/OutExtract.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_8!=null){
                		fid_tFileInputDelimited_8.close();
                	}
                }
                if(fid_tFileInputDelimited_8!=null){
                	globalMap.put("tFileInputDelimited_8_NB_LINE", fid_tFileInputDelimited_8.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_8", true);
end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());




/**
 * [tFileInputDelimited_8 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout10");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tUniqRow_7 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

globalMap.put("tUniqRow_7_NB_UNIQUES",nb_uniques_tUniqRow_7);
globalMap.put("tUniqRow_7_NB_DUPLICATES",nb_duplicates_tUniqRow_7);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tUniqRow_7", true);
end_Hash.put("tUniqRow_7", System.currentTimeMillis());




/**
 * [tUniqRow_7 end ] stop
 */

	
	/**
	 * [tRESTClient_2 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	


if (globalMap.get("tRESTClient_2_NB_LINE") == null) {
	globalMap.put("tRESTClient_2_NB_LINE", 1);
}

// [tRESTCliend_end]
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tRESTClient_2", true);
end_Hash.put("tRESTClient_2", System.currentTimeMillis());




/**
 * [tRESTClient_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_8";

	

 



/**
 * [tFileInputDelimited_8 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_7 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 finally ] stop
 */

	
	/**
	 * [tRESTClient_2 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	

 



/**
 * [tRESTClient_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Age_Group_Haddad__c;

				public String getAge_Group_Haddad__c () {
					return this.Age_Group_Haddad__c;
				}
				
			    public String Brand_Haddad__r_Name;

				public String getBrand_Haddad__r_Name () {
					return this.Brand_Haddad__r_Name;
				}
				
			    public String Category_Haddad__r_Name;

				public String getCategory_Haddad__r_Name () {
					return this.Category_Haddad__r_Name;
				}
				
			    public String Color_Code_Haddad__c;

				public String getColor_Code_Haddad__c () {
					return this.Color_Code_Haddad__c;
				}
				
			    public String Color_Haddad__r_Name;

				public String getColor_Haddad__r_Name () {
					return this.Color_Haddad__r_Name;
				}
				
			    public String Color_Haddad__r_Color_Name_External__c;

				public String getColor_Haddad__r_Color_Name_External__c () {
					return this.Color_Haddad__r_Color_Name_External__c;
				}
				
			    public String Country_of_origin_Haddad__c;

				public String getCountry_of_origin_Haddad__c () {
					return this.Country_of_origin_Haddad__c;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String Gender_Haddad__c;

				public String getGender_Haddad__c () {
					return this.Gender_Haddad__c;
				}
				
			    public String IsActive;

				public String getIsActive () {
					return this.IsActive;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Product_Status__c;

				public String getProduct_Status__c () {
					return this.Product_Status__c;
				}
				
			    public String Ref__c;

				public String getRef__c () {
					return this.Ref__c;
				}
				
			    public String Season_Product_Haddad__r_Name;

				public String getSeason_Product_Haddad__r_Name () {
					return this.Season_Product_Haddad__r_Name;
				}
				
			    public String Style_Haddad__r_Name;

				public String getStyle_Haddad__r_Name () {
					return this.Style_Haddad__r_Name;
				}
				
			    public String Year;

				public String getYear () {
					return this.Year;
				}
				
			    public String SeasonBynder;

				public String getSeasonBynder () {
					return this.SeasonBynder;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Color_Haddad__r_Color_Name_External__c == null) ? 0 : this.Color_Haddad__r_Color_Name_External__c.hashCode());
					
						result = prime * result + ((this.Style_Haddad__r_Name == null) ? 0 : this.Style_Haddad__r_Name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.Color_Haddad__r_Color_Name_External__c == null) {
							if (other.Color_Haddad__r_Color_Name_External__c != null)
								return false;
						
						} else if (!this.Color_Haddad__r_Color_Name_External__c.equals(other.Color_Haddad__r_Color_Name_External__c))
						
							return false;
					
						if (this.Style_Haddad__r_Name == null) {
							if (other.Style_Haddad__r_Name != null)
								return false;
						
						} else if (!this.Style_Haddad__r_Name.equals(other.Style_Haddad__r_Name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.Age_Group_Haddad__c = this.Age_Group_Haddad__c;
	            other.Brand_Haddad__r_Name = this.Brand_Haddad__r_Name;
	            other.Category_Haddad__r_Name = this.Category_Haddad__r_Name;
	            other.Color_Code_Haddad__c = this.Color_Code_Haddad__c;
	            other.Color_Haddad__r_Name = this.Color_Haddad__r_Name;
	            other.Color_Haddad__r_Color_Name_External__c = this.Color_Haddad__r_Color_Name_External__c;
	            other.Country_of_origin_Haddad__c = this.Country_of_origin_Haddad__c;
	            other.Description = this.Description;
	            other.Gender_Haddad__c = this.Gender_Haddad__c;
	            other.IsActive = this.IsActive;
	            other.Name = this.Name;
	            other.Product_Status__c = this.Product_Status__c;
	            other.Ref__c = this.Ref__c;
	            other.Season_Product_Haddad__r_Name = this.Season_Product_Haddad__r_Name;
	            other.Style_Haddad__r_Name = this.Style_Haddad__r_Name;
	            other.Year = this.Year;
	            other.SeasonBynder = this.SeasonBynder;
	            other.NewTags = this.NewTags;
	            other.PhotoView = this.PhotoView;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.Color_Haddad__r_Color_Name_External__c = this.Color_Haddad__r_Color_Name_External__c;
	            	other.Style_Haddad__r_Name = this.Style_Haddad__r_Name;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.Color_Haddad__r_Color_Name_External__c = readString(dis);
					
					this.Style_Haddad__r_Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Color_Haddad__r_Color_Name_External__c,dos);
					
					// String
				
						writeString(this.Style_Haddad__r_Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Age_Group_Haddad__c = readString(dis,ois);
					
						this.Brand_Haddad__r_Name = readString(dis,ois);
					
						this.Category_Haddad__r_Name = readString(dis,ois);
					
						this.Color_Code_Haddad__c = readString(dis,ois);
					
						this.Color_Haddad__r_Name = readString(dis,ois);
					
						this.Country_of_origin_Haddad__c = readString(dis,ois);
					
						this.Description = readString(dis,ois);
					
						this.Gender_Haddad__c = readString(dis,ois);
					
						this.IsActive = readString(dis,ois);
					
						this.Name = readString(dis,ois);
					
						this.Product_Status__c = readString(dis,ois);
					
						this.Ref__c = readString(dis,ois);
					
						this.Season_Product_Haddad__r_Name = readString(dis,ois);
					
						this.Year = readString(dis,ois);
					
						this.SeasonBynder = readString(dis,ois);
					
						this.NewTags = readString(dis,ois);
					
						this.PhotoView = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Age_Group_Haddad__c, dos, oos);
					
						writeString(this.Brand_Haddad__r_Name, dos, oos);
					
						writeString(this.Category_Haddad__r_Name, dos, oos);
					
						writeString(this.Color_Code_Haddad__c, dos, oos);
					
						writeString(this.Color_Haddad__r_Name, dos, oos);
					
						writeString(this.Country_of_origin_Haddad__c, dos, oos);
					
						writeString(this.Description, dos, oos);
					
						writeString(this.Gender_Haddad__c, dos, oos);
					
						writeString(this.IsActive, dos, oos);
					
						writeString(this.Name, dos, oos);
					
						writeString(this.Product_Status__c, dos, oos);
					
						writeString(this.Ref__c, dos, oos);
					
						writeString(this.Season_Product_Haddad__r_Name, dos, oos);
					
						writeString(this.Year, dos, oos);
					
						writeString(this.SeasonBynder, dos, oos);
					
						writeString(this.NewTags, dos, oos);
					
						writeString(this.PhotoView, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Age_Group_Haddad__c="+Age_Group_Haddad__c);
		sb.append(",Brand_Haddad__r_Name="+Brand_Haddad__r_Name);
		sb.append(",Category_Haddad__r_Name="+Category_Haddad__r_Name);
		sb.append(",Color_Code_Haddad__c="+Color_Code_Haddad__c);
		sb.append(",Color_Haddad__r_Name="+Color_Haddad__r_Name);
		sb.append(",Color_Haddad__r_Color_Name_External__c="+Color_Haddad__r_Color_Name_External__c);
		sb.append(",Country_of_origin_Haddad__c="+Country_of_origin_Haddad__c);
		sb.append(",Description="+Description);
		sb.append(",Gender_Haddad__c="+Gender_Haddad__c);
		sb.append(",IsActive="+IsActive);
		sb.append(",Name="+Name);
		sb.append(",Product_Status__c="+Product_Status__c);
		sb.append(",Ref__c="+Ref__c);
		sb.append(",Season_Product_Haddad__r_Name="+Season_Product_Haddad__r_Name);
		sb.append(",Style_Haddad__r_Name="+Style_Haddad__r_Name);
		sb.append(",Year="+Year);
		sb.append(",SeasonBynder="+SeasonBynder);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Color_Haddad__r_Color_Name_External__c, other.Color_Haddad__r_Color_Name_External__c);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Style_Haddad__r_Name, other.Style_Haddad__r_Name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tFileInputDelimited_1 - inputs:(after_tFileInputDelimited_2) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_4 - inputs:(row8,row9) outputs:(out9,test1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.bynderDirectory + "/temp/tempSFExtract.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.bynderDirectory + "/temp/tempSFExtract.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row9 = null;			
									
			    						row9 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row9 = new row9Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row9.Age_Group_Haddad__c = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row9.Brand_Haddad__r_Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row9.Category_Haddad__r_Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row9.Color_Code_Haddad__c = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row9.Color_Haddad__r_Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row9.Color_Haddad__r_Color_Name_External__c = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row9.Country_of_origin_Haddad__c = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row9.Description = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row9.Gender_Haddad__c = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row9.IsActive = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row9.Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row9.Product_Status__c = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row9.Ref__c = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row9.Season_Product_Haddad__r_Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row9.Style_Haddad__r_Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row9.Year = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row9.SeasonBynder = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row9.NewTags = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row9.PhotoView = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row9 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.Age_Group_Haddad__c = row9.Age_Group_Haddad__c;
				
				row9_HashRow.Brand_Haddad__r_Name = row9.Brand_Haddad__r_Name;
				
				row9_HashRow.Category_Haddad__r_Name = row9.Category_Haddad__r_Name;
				
				row9_HashRow.Color_Code_Haddad__c = row9.Color_Code_Haddad__c;
				
				row9_HashRow.Color_Haddad__r_Name = row9.Color_Haddad__r_Name;
				
				row9_HashRow.Color_Haddad__r_Color_Name_External__c = row9.Color_Haddad__r_Color_Name_External__c;
				
				row9_HashRow.Country_of_origin_Haddad__c = row9.Country_of_origin_Haddad__c;
				
				row9_HashRow.Description = row9.Description;
				
				row9_HashRow.Gender_Haddad__c = row9.Gender_Haddad__c;
				
				row9_HashRow.IsActive = row9.IsActive;
				
				row9_HashRow.Name = row9.Name;
				
				row9_HashRow.Product_Status__c = row9.Product_Status__c;
				
				row9_HashRow.Ref__c = row9.Ref__c;
				
				row9_HashRow.Season_Product_Haddad__r_Name = row9.Season_Product_Haddad__r_Name;
				
				row9_HashRow.Style_Haddad__r_Name = row9.Style_Haddad__r_Name;
				
				row9_HashRow.Year = row9.Year;
				
				row9_HashRow.SeasonBynder = row9.SeasonBynder;
				
				row9_HashRow.NewTags = row9.NewTags;
				
				row9_HashRow.PhotoView = row9.PhotoView;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.bynderDirectory + "/temp/tempSFExtract.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String FileName;

				public String getFileName () {
					return this.FileName;
				}
				
			    public String AssetName;

				public String getAssetName () {
					return this.AssetName;
				}
				
			    public String StyleCode;

				public String getStyleCode () {
					return this.StyleCode;
				}
				
			    public String ColorCode;

				public String getColorCode () {
					return this.ColorCode;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AssetName == null) ? 0 : this.AssetName.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.AssetName == null) {
							if (other.AssetName != null)
								return false;
						
						} else if (!this.AssetName.equals(other.AssetName))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.FileName = this.FileName;
	            other.AssetName = this.AssetName;
	            other.StyleCode = this.StyleCode;
	            other.ColorCode = this.ColorCode;
	            other.NewTags = this.NewTags;
	            other.PhotoView = this.PhotoView;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.AssetName = this.AssetName;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.AssetName = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AssetName,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FileName = readString(dis,ois);
					
						this.StyleCode = readString(dis,ois);
					
						this.ColorCode = readString(dis,ois);
					
						this.NewTags = readString(dis,ois);
					
						this.PhotoView = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.FileName, dos, oos);
					
						writeString(this.StyleCode, dos, oos);
					
						writeString(this.ColorCode, dos, oos);
					
						writeString(this.NewTags, dos, oos);
					
						writeString(this.PhotoView, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FileName="+FileName);
		sb.append(",AssetName="+AssetName);
		sb.append(",StyleCode="+StyleCode);
		sb.append(",ColorCode="+ColorCode);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AssetName, other.AssetName);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String FileName;

				public String getFileName () {
					return this.FileName;
				}
				
			    public String AssetName;

				public String getAssetName () {
					return this.AssetName;
				}
				
			    public String StyleCode;

				public String getStyleCode () {
					return this.StyleCode;
				}
				
			    public String ColorCode;

				public String getColorCode () {
					return this.ColorCode;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.FileName = readString(dis);
					
					this.AssetName = readString(dis);
					
					this.StyleCode = readString(dis);
					
					this.ColorCode = readString(dis);
					
					this.NewTags = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FileName,dos);
					
					// String
				
						writeString(this.AssetName,dos);
					
					// String
				
						writeString(this.StyleCode,dos);
					
					// String
				
						writeString(this.ColorCode,dos);
					
					// String
				
						writeString(this.NewTags,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FileName="+FileName);
		sb.append(",AssetName="+AssetName);
		sb.append(",StyleCode="+StyleCode);
		sb.append(",ColorCode="+ColorCode);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();
row19Struct row19 = new row19Struct();





	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tUniqRow_6 - inputs:(row18) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_5 - inputs:(row10,row19) outputs:(outputBynder)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tUniqRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_6", false);
		start_Hash.put("tUniqRow_6", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tUniqRow_6 = 0;
		

	
		class KeyStruct_tUniqRow_6 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String FileName;
					String AssetName;
					String StyleCode;
					String ColorCode;
					String NewTags;
					String PhotoView;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.FileName == null) ? 0 : this.FileName.hashCode());
								
								result = prime * result + ((this.AssetName == null) ? 0 : this.AssetName.hashCode());
								
								result = prime * result + ((this.StyleCode == null) ? 0 : this.StyleCode.hashCode());
								
								result = prime * result + ((this.ColorCode == null) ? 0 : this.ColorCode.hashCode());
								
								result = prime * result + ((this.NewTags == null) ? 0 : this.NewTags.hashCode());
								
								result = prime * result + ((this.PhotoView == null) ? 0 : this.PhotoView.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;
				
									if (this.FileName == null) {
										if (other.FileName != null) 
											return false;
								
									} else if (!this.FileName.equals(other.FileName))
								 
										return false;
								
									if (this.AssetName == null) {
										if (other.AssetName != null) 
											return false;
								
									} else if (!this.AssetName.equals(other.AssetName))
								 
										return false;
								
									if (this.StyleCode == null) {
										if (other.StyleCode != null) 
											return false;
								
									} else if (!this.StyleCode.equals(other.StyleCode))
								 
										return false;
								
									if (this.ColorCode == null) {
										if (other.ColorCode != null) 
											return false;
								
									} else if (!this.ColorCode.equals(other.ColorCode))
								 
										return false;
								
									if (this.NewTags == null) {
										if (other.NewTags != null) 
											return false;
								
									} else if (!this.NewTags.equals(other.NewTags))
								 
										return false;
								
									if (this.PhotoView == null) {
										if (other.PhotoView != null) 
											return false;
								
									} else if (!this.PhotoView.equals(other.PhotoView))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_6 = 0;
int nb_duplicates_tUniqRow_6 = 0;
KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>(); 

 



/**
 * [tUniqRow_6 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try{
					
						Object filename_tFileInputDelimited_5 = context.bynderDirectory + "/input/FileAssetsName.csv";
						if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
			if(footer_value_tFileInputDelimited_5 >0 || random_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(context.bynderDirectory + "/input/FileAssetsName.csv", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_5
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_5!=null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();
						
			    						row18 = null;			
												
									boolean whetherReject_tFileInputDelimited_5 = false;
									row18 = new row18Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_5 = 0;
				
					columnIndexWithD_tFileInputDelimited_5 = 0;
					
							row18.FileName = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 1;
					
							row18.AssetName = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 2;
					
							row18.StyleCode = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 3;
					
							row18.ColorCode = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 4;
					
							row18.NewTags = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 5;
					
							row18.PhotoView = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
				
										
										if(rowstate_tFileInputDelimited_5.getException()!=null) {
											throw rowstate_tFileInputDelimited_5.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_5 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row18 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tUniqRow_6 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					
row19 = null;			row19 = null;			
if(row18.FileName == null){
	finder_tUniqRow_6.FileName = null;
}else{
	finder_tUniqRow_6.FileName = row18.FileName.toLowerCase();
}
if(row18.AssetName == null){
	finder_tUniqRow_6.AssetName = null;
}else{
	finder_tUniqRow_6.AssetName = row18.AssetName.toLowerCase();
}
if(row18.StyleCode == null){
	finder_tUniqRow_6.StyleCode = null;
}else{
	finder_tUniqRow_6.StyleCode = row18.StyleCode.toLowerCase();
}
if(row18.ColorCode == null){
	finder_tUniqRow_6.ColorCode = null;
}else{
	finder_tUniqRow_6.ColorCode = row18.ColorCode.toLowerCase();
}
if(row18.NewTags == null){
	finder_tUniqRow_6.NewTags = null;
}else{
	finder_tUniqRow_6.NewTags = row18.NewTags.toLowerCase();
}
if(row18.PhotoView == null){
	finder_tUniqRow_6.PhotoView = null;
}else{
	finder_tUniqRow_6.PhotoView = row18.PhotoView.toLowerCase();
}	
finder_tUniqRow_6.hashCodeDirty = true;
if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
		KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

		
if(row18.FileName == null){
	new_tUniqRow_6.FileName = null;
}else{
	new_tUniqRow_6.FileName = row18.FileName.toLowerCase();
}
if(row18.AssetName == null){
	new_tUniqRow_6.AssetName = null;
}else{
	new_tUniqRow_6.AssetName = row18.AssetName.toLowerCase();
}
if(row18.StyleCode == null){
	new_tUniqRow_6.StyleCode = null;
}else{
	new_tUniqRow_6.StyleCode = row18.StyleCode.toLowerCase();
}
if(row18.ColorCode == null){
	new_tUniqRow_6.ColorCode = null;
}else{
	new_tUniqRow_6.ColorCode = row18.ColorCode.toLowerCase();
}
if(row18.NewTags == null){
	new_tUniqRow_6.NewTags = null;
}else{
	new_tUniqRow_6.NewTags = row18.NewTags.toLowerCase();
}
if(row18.PhotoView == null){
	new_tUniqRow_6.PhotoView = null;
}else{
	new_tUniqRow_6.PhotoView = row18.PhotoView.toLowerCase();
}
		
		keystUniqRow_6.add(new_tUniqRow_6);if(row19 == null){ 
	
	row19 = new row19Struct();
}row19.FileName = row18.FileName;			row19.AssetName = row18.AssetName;			row19.StyleCode = row18.StyleCode;			row19.ColorCode = row18.ColorCode;			row19.NewTags = row18.NewTags;			row19.PhotoView = row18.PhotoView;			if(row19 == null){ 
	
	row19 = new row19Struct();
}row19.FileName = row18.FileName;			row19.AssetName = row18.AssetName;			row19.StyleCode = row18.StyleCode;			row19.ColorCode = row18.ColorCode;			row19.NewTags = row18.NewTags;			row19.PhotoView = row18.PhotoView;					
		nb_uniques_tUniqRow_6++;
	} else {
	  nb_duplicates_tUniqRow_6++;
	}

 


	tos_count_tUniqRow_6++;

/**
 * [tUniqRow_6 main ] stop
 */
	
	/**
	 * [tUniqRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_begin ] stop
 */
// Start of branch "row19"
if(row19 != null) { 



	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.FileName = row19.FileName;
				
				row19_HashRow.AssetName = row19.AssetName;
				
				row19_HashRow.StyleCode = row19.StyleCode;
				
				row19_HashRow.ColorCode = row19.ColorCode;
				
				row19_HashRow.NewTags = row19.NewTags;
				
				row19_HashRow.PhotoView = row19.PhotoView;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */

} // End of branch "row19"




	
	/**
	 * [tUniqRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	



            }
            }finally{
                if(!((Object)(context.bynderDirectory + "/input/FileAssetsName.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_5!=null){
                		fid_tFileInputDelimited_5.close();
                	}
                }
                if(fid_tFileInputDelimited_5!=null){
                	globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tUniqRow_6 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

globalMap.put("tUniqRow_6_NB_UNIQUES",nb_uniques_tUniqRow_6);
globalMap.put("tUniqRow_6_NB_DUPLICATES",nb_duplicates_tUniqRow_6);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tUniqRow_6", true);
end_Hash.put("tUniqRow_6", System.currentTimeMillis());




/**
 * [tUniqRow_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

tHash_Lookup_row19.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tUniqRow_6 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tFileOutputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_5", false);
		start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tFileOutputDelimited_5 = 0;
		

String fileName_tFileOutputDelimited_5 = "";
    fileName_tFileOutputDelimited_5 = (new java.io.File(context.errorFile)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_5 = null;
    String extension_tFileOutputDelimited_5 = null;
    String directory_tFileOutputDelimited_5 = null;
    if((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0, fileName_tFileOutputDelimited_5.lastIndexOf("."));
            extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
            extension_tFileOutputDelimited_5 = "";
        }
        directory_tFileOutputDelimited_5 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_5 = true;
    java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
    globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
    if(filetFileOutputDelimited_5.exists()){
            throw new RuntimeException("The particular file \""+filetFileOutputDelimited_5.getAbsoluteFile() +
            "\" already exist. If you want to overwrite the file, please uncheck the" + 
            " \"Throw an error if the file already exist\" option in Advanced settings.");
        }
            int nb_line_tFileOutputDelimited_5 = 0;
            int splitedFileNo_tFileOutputDelimited_5 = 0;
            int currentRow_tFileOutputDelimited_5 = 0;

            final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
                        if(!dir_tFileOutputDelimited_5.exists()) {
                            dir_tFileOutputDelimited_5.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_5 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
                        if(fileToDelete_tFileOutputDelimited_5.exists()) {
                            fileToDelete_tFileOutputDelimited_5.delete();
                        }
                        outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

 



/**
 * [tFileOutputDelimited_5 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row31.type = lcm.getType();
		row31.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row31.priority = lcm.getPriority();
		row31.message = lcm.getMessage();
		row31.code = lcm.getCode();
		
		row31.moment = java.util.Calendar.getInstance().getTime();
	
    	row31.pid = pid;
		row31.root_pid = rootPid;
		row31.father_pid = fatherPid;
	
    	row31.project = projectName;
    	row31.job = jobName;
    	row31.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row31");
					}
					


                    StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
                            if(row31.moment != null) {
                        sb_tFileOutputDelimited_5.append(
                            FormatterUtils.format_Date(row31.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.pid != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.pid
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.root_pid != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.father_pid != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.project != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.project
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.job != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.job
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.context != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.context
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.priority != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.priority
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.type != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.type
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.origin != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.origin
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.message != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.message
                        );
                            }
                            sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
                            if(row31.code != null) {
                        sb_tFileOutputDelimited_5.append(
                            row31.code
                        );
                            }
                    sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);


                    nb_line_tFileOutputDelimited_5++;
                    resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

                        outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());




 


	tos_count_tFileOutputDelimited_5++;

/**
 * [tFileOutputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	

 



/**
 * [tFileOutputDelimited_5 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	



		
			
					if(outtFileOutputDelimited_5!=null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}
				
				globalMap.put("tFileOutputDelimited_5_NB_LINE",nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",fileName_tFileOutputDelimited_5);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_5", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_5", true);
end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_5";

	


		if(resourceMap.get("finish_tFileOutputDelimited_5") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_5");
						if(outtFileOutputDelimited_5!=null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String FileName;

				public String getFileName () {
					return this.FileName;
				}
				
			    public String AssetName;

				public String getAssetName () {
					return this.AssetName;
				}
				
			    public String StyleCode;

				public String getStyleCode () {
					return this.StyleCode;
				}
				
			    public String ColorCode;

				public String getColorCode () {
					return this.ColorCode;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.StyleCode == null) ? 0 : this.StyleCode.hashCode());
					
						result = prime * result + ((this.ColorCode == null) ? 0 : this.ColorCode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.StyleCode == null) {
							if (other.StyleCode != null)
								return false;
						
						} else if (!this.StyleCode.equals(other.StyleCode))
						
							return false;
					
						if (this.ColorCode == null) {
							if (other.ColorCode != null)
								return false;
						
						} else if (!this.ColorCode.equals(other.ColorCode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.FileName = this.FileName;
	            other.AssetName = this.AssetName;
	            other.StyleCode = this.StyleCode;
	            other.ColorCode = this.ColorCode;
	            other.NewTags = this.NewTags;
	            other.PhotoView = this.PhotoView;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.StyleCode = this.StyleCode;
	            	other.ColorCode = this.ColorCode;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.StyleCode = readString(dis);
					
					this.ColorCode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.StyleCode,dos);
					
					// String
				
						writeString(this.ColorCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FileName = readString(dis,ois);
					
						this.AssetName = readString(dis,ois);
					
						this.NewTags = readString(dis,ois);
					
						this.PhotoView = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.FileName, dos, oos);
					
						writeString(this.AssetName, dos, oos);
					
						writeString(this.NewTags, dos, oos);
					
						writeString(this.PhotoView, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FileName="+FileName);
		sb.append(",AssetName="+AssetName);
		sb.append(",StyleCode="+StyleCode);
		sb.append(",ColorCode="+ColorCode);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.StyleCode, other.StyleCode);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ColorCode, other.ColorCode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public String FileName;

				public String getFileName () {
					return this.FileName;
				}
				
			    public String AssetName;

				public String getAssetName () {
					return this.AssetName;
				}
				
			    public String StyleCode;

				public String getStyleCode () {
					return this.StyleCode;
				}
				
			    public String ColorCode;

				public String getColorCode () {
					return this.ColorCode;
				}
				
			    public String NewTags;

				public String getNewTags () {
					return this.NewTags;
				}
				
			    public String PhotoView;

				public String getPhotoView () {
					return this.PhotoView;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.FileName = readString(dis);
					
					this.AssetName = readString(dis);
					
					this.StyleCode = readString(dis);
					
					this.ColorCode = readString(dis);
					
					this.NewTags = readString(dis);
					
					this.PhotoView = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FileName,dos);
					
					// String
				
						writeString(this.AssetName,dos);
					
					// String
				
						writeString(this.StyleCode,dos);
					
					// String
				
						writeString(this.ColorCode,dos);
					
					// String
				
						writeString(this.NewTags,dos);
					
					// String
				
						writeString(this.PhotoView,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FileName="+FileName);
		sb.append(",AssetName="+AssetName);
		sb.append(",StyleCode="+StyleCode);
		sb.append(",ColorCode="+ColorCode);
		sb.append(",NewTags="+NewTags);
		sb.append(",PhotoView="+PhotoView);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
row13Struct row13 = new row13Struct();





	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tUniqRow_5 - inputs:(row6) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_3 - inputs:(row12,row13) outputs:(out5,outputSF)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tUniqRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_5", false);
		start_Hash.put("tUniqRow_5", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tUniqRow_5 = 0;
		

	
		class KeyStruct_tUniqRow_5 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String StyleCode;
					String ColorCode;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.StyleCode == null) ? 0 : this.StyleCode.hashCode());
								
								result = prime * result + ((this.ColorCode == null) ? 0 : this.ColorCode.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;
				
									if (this.StyleCode == null) {
										if (other.StyleCode != null) 
											return false;
								
									} else if (!this.StyleCode.equals(other.StyleCode))
								 
										return false;
								
									if (this.ColorCode == null) {
										if (other.ColorCode != null) 
											return false;
								
									} else if (!this.ColorCode.equals(other.ColorCode))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_5 = 0;
int nb_duplicates_tUniqRow_5 = 0;
KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>(); 

 



/**
 * [tUniqRow_5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = context.bynderDirectory + "/input/FileAssetsName.csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(context.bynderDirectory + "/input/FileAssetsName.csv", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row6 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row6 = new row6Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
							row6.FileName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							row6.AssetName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
							row6.StyleCode = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							row6.ColorCode = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							row6.NewTags = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
							row6.PhotoView = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row6 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tUniqRow_5 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					
row13 = null;			row13 = null;			
if(row6.StyleCode == null){
	finder_tUniqRow_5.StyleCode = null;
}else{
	finder_tUniqRow_5.StyleCode = row6.StyleCode.toLowerCase();
}
if(row6.ColorCode == null){
	finder_tUniqRow_5.ColorCode = null;
}else{
	finder_tUniqRow_5.ColorCode = row6.ColorCode.toLowerCase();
}	
finder_tUniqRow_5.hashCodeDirty = true;
if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
		KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

		
if(row6.StyleCode == null){
	new_tUniqRow_5.StyleCode = null;
}else{
	new_tUniqRow_5.StyleCode = row6.StyleCode.toLowerCase();
}
if(row6.ColorCode == null){
	new_tUniqRow_5.ColorCode = null;
}else{
	new_tUniqRow_5.ColorCode = row6.ColorCode.toLowerCase();
}
		
		keystUniqRow_5.add(new_tUniqRow_5);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.FileName = row6.FileName;			row13.AssetName = row6.AssetName;			row13.StyleCode = row6.StyleCode;			row13.ColorCode = row6.ColorCode;			row13.NewTags = row6.NewTags;			row13.PhotoView = row6.PhotoView;			if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.FileName = row6.FileName;			row13.AssetName = row6.AssetName;			row13.StyleCode = row6.StyleCode;			row13.ColorCode = row6.ColorCode;			row13.NewTags = row6.NewTags;			row13.PhotoView = row6.PhotoView;					
		nb_uniques_tUniqRow_5++;
	} else {
	  nb_duplicates_tUniqRow_5++;
	}

 


	tos_count_tUniqRow_5++;

/**
 * [tUniqRow_5 main ] stop
 */
	
	/**
	 * [tUniqRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.FileName = row13.FileName;
				
				row13_HashRow.AssetName = row13.AssetName;
				
				row13_HashRow.StyleCode = row13.StyleCode;
				
				row13_HashRow.ColorCode = row13.ColorCode;
				
				row13_HashRow.NewTags = row13.NewTags;
				
				row13_HashRow.PhotoView = row13.PhotoView;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)(context.bynderDirectory + "/input/FileAssetsName.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tUniqRow_5 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

globalMap.put("tUniqRow_5_NB_UNIQUES",nb_uniques_tUniqRow_5);
globalMap.put("tUniqRow_5_NB_DUPLICATES",nb_duplicates_tUniqRow_5);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tUniqRow_5", true);
end_Hash.put("tUniqRow_5", System.currentTimeMillis());




/**
 * [tUniqRow_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tUniqRow_5 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_DEV_updateAssetsInBynder_PROD = new byte[0];
    static byte[] commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_updateAssetsInBynder_PROD.length) {
				if(length < 1024 && commonByteArray_DEV_updateAssetsInBynder_PROD.length == 0) {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[1024];
				} else {
   					commonByteArray_DEV_updateAssetsInBynder_PROD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length);
			strReturn = new String(commonByteArray_DEV_updateAssetsInBynder_PROD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_updateAssetsInBynder_PROD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_FILE", false);
		start_Hash.put("talendLogs_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_FILE = 0;
		

String fileName_talendLogs_FILE = "";
    fileName_talendLogs_FILE = (new java.io.File("C:/Haddad_Interface_SF_JDE/Interface Bynder/hors eCom/log"+ "/" +"UploadAssetToBynder.log")).getAbsolutePath().replace("\\","/");
    String fullName_talendLogs_FILE = null;
    String extension_talendLogs_FILE = null;
    String directory_talendLogs_FILE = null;
    if((fileName_talendLogs_FILE.indexOf("/") != -1)) {
        if(fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE.lastIndexOf("/")) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        }
        directory_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        }
        directory_talendLogs_FILE = "";
    }
    boolean isFileGenerated_talendLogs_FILE = true;
    java.io.File filetalendLogs_FILE = new java.io.File(fileName_talendLogs_FILE);
    globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
        if(filetalendLogs_FILE.exists()){
            isFileGenerated_talendLogs_FILE = false;
        }
            int nb_line_talendLogs_FILE = 0;
            int splitedFileNo_talendLogs_FILE = 0;
            int currentRow_talendLogs_FILE = 0;

            final String OUT_DELIM_talendLogs_FILE = /** Start field talendLogs_FILE:FIELDSEPARATOR */";"/** End field talendLogs_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendLogs_FILE = /** Start field talendLogs_FILE:ROWSEPARATOR */"\n"/** End field talendLogs_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendLogs_FILE != null && directory_talendLogs_FILE.trim().length() != 0) {
                        java.io.File dir_talendLogs_FILE = new java.io.File(directory_talendLogs_FILE);
                        if(!dir_talendLogs_FILE.exists()) {
                            dir_talendLogs_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendLogs_FILE = null;

                        outtalendLogs_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendLogs_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

 



/**
 * [talendLogs_FILE begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendLogs_FILE = new StringBuilder();
                            if(row_talendLogs_LOGS.moment != null) {
                        sb_talendLogs_FILE.append(
                            FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.root_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.root_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.father_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.father_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.project != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.project
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.job != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.job
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.context != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.context
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.priority != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.priority
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.type != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.type
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.origin != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.origin
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.message != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.message
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.code != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.code
                        );
                            }
                    sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);


                    nb_line_talendLogs_FILE++;
                    resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

                        outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());




 


	tos_count_talendLogs_FILE++;

/**
 * [talendLogs_FILE main ] stop
 */
	
	/**
	 * [talendLogs_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	



		
			
					if(outtalendLogs_FILE!=null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}
				
				globalMap.put("talendLogs_FILE_NB_LINE",nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
			
		
		
		resourceMap.put("finish_talendLogs_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_FILE", true);
end_Hash.put("talendLogs_FILE", System.currentTimeMillis());




/**
 * [talendLogs_FILE end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	


		if(resourceMap.get("finish_talendLogs_FILE") == null){ 
			
				
						java.io.Writer outtalendLogs_FILE = (java.io.Writer)resourceMap.get("out_talendLogs_FILE");
						if(outtalendLogs_FILE!=null) {
							outtalendLogs_FILE.flush();
							outtalendLogs_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendLogs_FILE finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }

    public static void main(String[] args){
        final updateAssetsInBynder_PROD updateAssetsInBynder_PRODClass = new updateAssetsInBynder_PROD();

        int exitCode = updateAssetsInBynder_PRODClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = updateAssetsInBynder_PROD.class.getClassLoader().getResourceAsStream("dev/updateassetsinbynder_prod_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = updateAssetsInBynder_PROD.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("bynderDirectory", "id_String");
                            context.bynderDirectory=(String) context.getProperty("bynderDirectory");
                        context.setContextType("errorFile", "id_String");
                            context.errorFile=(String) context.getProperty("errorFile");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("bynderDirectory")) {
                context.bynderDirectory = (String) parentContextMap.get("bynderDirectory");
            }if (parentContextMap.containsKey("errorFile")) {
                context.errorFile = (String) parentContextMap.get("errorFile");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRESTClient_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRESTClient_3) {
globalMap.put("tRESTClient_3_SUBPROCESS_STATE", -1);

e_tRESTClient_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : updateAssetsInBynder_PROD");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     804791 characters generated by Talend Open Studio for Data Integration 
 *     on the 4 juillet 2023 12:09:13 CEST
 ************************************************************************************************/