// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dev.equilibrer_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: equilibrer Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status
 */
public class equilibrer implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "equilibrer";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					equilibrer.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(equilibrer.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						try {
							tLogCatcher_1Process(globalMap);
						} finally {
							talendLogs_LOGSProcess(globalMap);
						}
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRESTClient_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon process_data_begin ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_begin ] stop
				 */

				/**
				 * [preStaLogCon process_data_end ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_end ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row31");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/Users/MohamedMoctarElAM/Desktop/reprise de données par apex.txt")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_2.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
						row31.type = lcm.getType();
						row31.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row31.priority = lcm.getPriority();
						row31.message = lcm.getMessage();
						row31.code = lcm.getCode();

						row31.moment = java.util.Calendar.getInstance().getTime();

						row31.pid = pid;
						row31.root_pid = rootPid;
						row31.father_pid = fatherPid;

						row31.project = projectName;
						row31.job = jobName;
						row31.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row31");
						}

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
						if (row31.moment != null) {
							sb_tFileOutputDelimited_2
									.append(FormatterUtils.format_Date(row31.moment, "yyyy-MM-dd HH:mm:ss"));
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.pid != null) {
							sb_tFileOutputDelimited_2.append(row31.pid);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.root_pid != null) {
							sb_tFileOutputDelimited_2.append(row31.root_pid);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.father_pid != null) {
							sb_tFileOutputDelimited_2.append(row31.father_pid);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.project != null) {
							sb_tFileOutputDelimited_2.append(row31.project);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.job != null) {
							sb_tFileOutputDelimited_2.append(row31.job);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.context != null) {
							sb_tFileOutputDelimited_2.append(row31.context);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.priority != null) {
							sb_tFileOutputDelimited_2.append(row31.priority);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.type != null) {
							sb_tFileOutputDelimited_2.append(row31.type);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.origin != null) {
							sb_tFileOutputDelimited_2.append(row31.origin);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.message != null) {
							sb_tFileOutputDelimited_2.append(row31.message);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row31.code != null) {
							sb_tFileOutputDelimited_2.append(row31.code);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						nb_line_tFileOutputDelimited_2++;
						resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					logIgnoredError(String.format(
							"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row31");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public String access_token;

		public String getAccess_token() {
			return this.access_token;
		}

		public String token_type;

		public String getToken_type() {
			return this.token_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.access_token = readString(dis);

					this.token_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.access_token, dos);

				// String

				writeString(this.token_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("access_token=" + access_token);
			sb.append(",token_type=" + token_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toSetVariableStruct implements routines.system.IPersistableRow<toSetVariableStruct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public String access_token;

		public String getAccess_token() {
			return this.access_token;
		}

		public String token_type;

		public String getToken_type() {
			return this.token_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.access_token = readString(dis);

					this.token_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.access_token, dos);

				// String

				writeString(this.token_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("access_token=" + access_token);
			sb.append(",token_type=" + token_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toSetVariableStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public String access_token;

		public String getAccess_token() {
			return this.access_token;
		}

		public String instance_url;

		public String getInstance_url() {
			return this.instance_url;
		}

		public String id;

		public String getId() {
			return this.id;
		}

		public String token_type;

		public String getToken_type() {
			return this.token_type;
		}

		public String issued_at;

		public String getIssued_at() {
			return this.issued_at;
		}

		public String signature;

		public String getSignature() {
			return this.signature;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.access_token = readString(dis);

					this.instance_url = readString(dis);

					this.id = readString(dis);

					this.token_type = readString(dis);

					this.issued_at = readString(dis);

					this.signature = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.access_token, dos);

				// String

				writeString(this.instance_url, dos);

				// String

				writeString(this.id, dos);

				// String

				writeString(this.token_type, dos);

				// String

				writeString(this.issued_at, dos);

				// String

				writeString(this.signature, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("access_token=" + access_token);
			sb.append(",instance_url=" + instance_url);
			sb.append(",id=" + id);
			sb.append(",token_type=" + token_type);
			sb.append(",issued_at=" + issued_at);
			sb.append(",signature=" + signature);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.statusCode = readInteger(dis);

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// Integer

				writeInteger(this.statusCode, dos);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",statusCode=" + String.valueOf(statusCode));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTClient_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				toSetVariableStruct toSetVariable = new toSetVariableStruct();
				toSetVariableStruct row15 = toSetVariable;

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "toSetVariable");
				}

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				toSetVariableStruct toSetVariable_tmp = new toSetVariableStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;
				String jsonStr_tExtractJSONFields_1 = "";

				class JsonPathCache_tExtractJSONFields_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 begin ] start
				 */

				ok_Hash.put("tRESTClient_1", false);
				start_Hash.put("tRESTClient_1", System.currentTimeMillis());

				currentComponent = "tRESTClient_1";

				int tos_count_tRESTClient_1 = 0;

				/**
				 * [tRESTClient_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 main ] start
				 */

				currentComponent = "tRESTClient_1";

				row2 = null;

// expected response body
				javax.ws.rs.core.Response responseDoc_tRESTClient_1 = null;

				try {
					// request body
					org.dom4j.Document requestDoc_tRESTClient_1 = null;
					String requestString_tRESTClient_1 = null;

					Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1
							: requestString_tRESTClient_1;

					// resposne class name
					Class<?> responseClass_tRESTClient_1 = String.class;

					// create web client instance
					org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

					boolean inOSGi = routines.system.BundleUtils.inOSGi();

					final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

					String url = "https://haddadbrand.bynder.com/v6/authentication/oauth2/token";
					// {baseUri}tRESTClient
					factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
					factoryBean_tRESTClient_1.setAddress(url);

					factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);

					java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
					providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
						// workaround for https://jira.talendforge.org/browse/TESB-7276
						public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls, java.lang.reflect.Type type,
								java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
								javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
								throws IOException, javax.ws.rs.WebApplicationException {
							String contentLength = headers.getFirst("Content-Length");
							if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
									&& Integer.valueOf(contentLength) <= 0) {
								try {
									return org.dom4j.DocumentHelper.parseText("<root/>");
								} catch (org.dom4j.DocumentException e_tRESTClient_1) {
									e_tRESTClient_1.printStackTrace();
								}
								return null;
							}
							return super.readFrom(cls, type, anns, mt, headers, is);
						}
					});
					org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
					jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
					jsonProvider_tRESTClient_1.setAttributesToElements(true);

					jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
					jsonProvider_tRESTClient_1.setWrapperName("root");

					jsonProvider_tRESTClient_1.setDropRootElement(false);
					jsonProvider_tRESTClient_1.setConvertTypesToStrings(true);
					providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
					factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
					factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

					boolean use_auth_tRESTClient_1 = false;
					if (use_auth_tRESTClient_1 && "SAML".equals("BASIC")) {
						if (!inOSGi) {
							throw new IllegalArgumentException(
									"SAML based security scenarios are not supported in Studio (standalone)");
						}
						// set SAML Token authentication

						final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
								.decryptPassword("ENC:[/pEn06c1GfAIWv+rMWhATcpJRe/YeG1x8d9nulUeH7GXi8MrxM8=]");

						org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
								.createSTSClient(factoryBean_tRESTClient_1.getBus(),
										"otman.nikraj@haddadeurope.com.partial", decryptedPassword_tRESTClient_1);

						org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_1,
								stsClient);
					}

					org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1
							.createWebClient();

					// set request path
					webClient_tRESTClient_1.path("");

					// set connection properties
					org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient
							.getConfig(webClient_tRESTClient_1);
					org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1
							.getHttpConduit();

					if (clientConfig_tRESTClient_1.getEndpoint() != null
							&& clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo() != null) {
						clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo()
								.setProperty("enable.webclient.operation.reporting", true);
					}

					if (use_auth_tRESTClient_1 && "BASIC".equals("BASIC")) {
						// set BASIC auth

						final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
								.decryptPassword("ENC:[XB62cgJ1A99L/fjSRSvkcnlq/3X2EZiV+a9XAiUSnpRau2hN6PM=]");

						org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
						authPolicy_tRESTClient_1.setAuthorizationType("Basic");
						authPolicy_tRESTClient_1.setUserName("otman.nikraj@haddadeurope.com.partial");
						authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
						conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
					} else if (use_auth_tRESTClient_1 && "HTTP Digest".equals("BASIC")) {
						// set Digest auth

						final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
								.decryptPassword("ENC:[wGVkL3jKwusIM7220RkAniybngrceOPk3NswmKOYxOxkqDcDr/s=]");

						org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
						authPolicy_tRESTClient_1.setAuthorizationType("Digest");
						authPolicy_tRESTClient_1.setUserName("otman.nikraj@haddadeurope.com.partial");
						authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
						conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
					}

					if (!inOSGi) {
						conduit_tRESTClient_1.getClient().setReceiveTimeout((long) (60 * 1000L));
						conduit_tRESTClient_1.getClient().setConnectionTimeout((long) (30 * 1000L));
						boolean use_proxy_tRESTClient_1 = false;
						if (use_proxy_tRESTClient_1) {

							final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
									.decryptPassword("ENC:[F+yR36dDqCYYyUbGJTFtot1OjFa0x1T+uB85zg==]");

							conduit_tRESTClient_1.getClient().setProxyServer("61.163.92.4");
							conduit_tRESTClient_1.getClient().setProxyServerPort(Integer.valueOf(8080));
							conduit_tRESTClient_1.getProxyAuthorization().setUserName("");
							conduit_tRESTClient_1.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_1);
						}
					}

					// set Content-Type
					webClient_tRESTClient_1.type("application/x-www-form-urlencoded");

					// set Accept-Type
					webClient_tRESTClient_1.accept("*/*");

					// set optional query and header properties if any

					webClient_tRESTClient_1.header("Accept", "application/json");

					webClient_tRESTClient_1.header("Content-Type", "application/x-www-form-urlencoded");

					if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
						// set oAuth2 bearer token
						webClient_tRESTClient_1.header("Authorization", "Bearer "
								+ "3MVG904d7VkkD2aPrr0Zo7vyDfR3BCIidArA2fM9ScQUYkPPCOmOthm7TndYB9pZJPFlDTAIJZNkwl7X_HFWx");
					}

					if (use_auth_tRESTClient_1 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

						final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
								.decryptPassword("ENC:[t5y/lwgamy+p4veTHIhey0YDfnlE+1skJkIEBwmxklsElZukVxs=]");

						String username_tRESTClient_1 = "otman.nikraj@haddadeurope.com.partial";
						String password_tRESTClient_1 = decryptedPassword_tRESTClient_1;

						String bearerHeader_tRESTClient_1 = null;

						try {
							if (!inOSGi) {
								org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_1 = new org.springframework.context.support.ClassPathXmlApplicationContext(
										"META-INF/tesb/oidc-context.xml");
								org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_1 = context_tRESTClient_1
										.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
								bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils
										.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1,
												oidcConfiguration_tRESTClient_1);
							} else {
								bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils
										.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1);
							}
						} catch (Exception ex) {
							throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
						}

						webClient_tRESTClient_1.header("Authorization", bearerHeader_tRESTClient_1);
					}

					// if FORM request then capture query parameters into Form, otherwise set them
					// as queries

					javax.ws.rs.core.Form form_tRESTClient_1 = new javax.ws.rs.core.Form();

					form_tRESTClient_1.param("response_type", "code");

					form_tRESTClient_1.param("client_id", "e088065f-ea19-4863-a605-5ba3f35ec9f3");

					form_tRESTClient_1.param("client_secret", "d6d1804a-be89-4d1b-8d4b-2fc39f3eea3b");

					form_tRESTClient_1.param("username", "hanaa.beniaz@haddadeurope.com");

					form_tRESTClient_1.param("grant_type", "client_credentials");

					form_tRESTClient_1.param("redirect_uri", "https://haddadbrand.bynder.com");

					requestBody_tRESTClient_1 = form_tRESTClient_1;

					try {
						// start send request

						responseDoc_tRESTClient_1 = webClient_tRESTClient_1.post(requestBody_tRESTClient_1);

						int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse().getStatus();
						if (webClientResponseStatus_tRESTClient_1 >= 300) {
							throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_1.getResponse());
						}

						if (row2 == null) {
							row2 = new row2Struct();
						}

						row2.statusCode = webClientResponseStatus_tRESTClient_1;

						Object responseObj_tRESTClient_1 = null;
						if (responseDoc_tRESTClient_1 != null && responseDoc_tRESTClient_1.hasEntity()) {
							responseObj_tRESTClient_1 = responseDoc_tRESTClient_1
									.readEntity(responseClass_tRESTClient_1);

							if (responseObj_tRESTClient_1 != null) {
								if (responseClass_tRESTClient_1 == String.class) {
									row2.string = (String) responseObj_tRESTClient_1;
								} else {
									routines.system.Document responseTalendDoc_tRESTClient_1 = null;
									if (null != responseObj_tRESTClient_1) {
										responseTalendDoc_tRESTClient_1 = new routines.system.Document();
										responseTalendDoc_tRESTClient_1
												.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
									}
									row2.body = responseTalendDoc_tRESTClient_1;
								}
							}
						}

						globalMap.put("tRESTClient_1_HEADERS", webClient_tRESTClient_1.getResponse().getHeaders());

						// handle "oneway" for PUT, POST and PATCH with empty response payload
						if (webClientResponseStatus_tRESTClient_1 == 202 && responseObj_tRESTClient_1 == null) {
							row2.string = "";
							return;
						}

					} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {

						throw ex_tRESTClient_1;

					}

				} catch (Exception e_tRESTClient_1) {

					throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);

				}

				tos_count_tRESTClient_1++;

				/**
				 * [tRESTClient_1 main ] stop
				 */

				/**
				 * [tRESTClient_1 process_data_begin ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_begin ] stop
				 */
// Start of branch "row2"
				if (row2 != null) {

					/**
					 * [tExtractJSONFields_1 main ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
					}

					if (row2.string != null) {// C_01
						jsonStr_tExtractJSONFields_1 = row2.string.toString();

						row3 = null;

						String loopPath_tExtractJSONFields_1 = "$";
						java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

						boolean isStructError_tExtractJSONFields_1 = true;
						com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
						try {
							document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
									.parse(jsonStr_tExtractJSONFields_1);
							com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
									.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
							Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1
									.read(compiledLoopPath_tExtractJSONFields_1, net.minidev.json.JSONObject.class);
							if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
								resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
							} else {
								resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
							}

							isStructError_tExtractJSONFields_1 = false;
						} catch (java.lang.Exception ex_tExtractJSONFields_1) {
							System.err.println(ex_tExtractJSONFields_1.getMessage());
						}

						String jsonPath_tExtractJSONFields_1 = null;
						com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

						Object value_tExtractJSONFields_1 = null;

						Object root_tExtractJSONFields_1 = null;
						for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
								|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
										.size()); i_tExtractJSONFields_1++) {
							if (!isStructError_tExtractJSONFields_1) {
								Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
										.get(i_tExtractJSONFields_1);
								row3 = null;
								row3 = new row3Struct();
								nb_line_tExtractJSONFields_1++;
								try {
									jsonPath_tExtractJSONFields_1 = "$.access_token";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.access_token = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row3.access_token =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.instance_url";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.instance_url = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row3.instance_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.id";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.id = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row3.id =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.token_type";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.token_type = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row3.token_type =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.issued_at";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.issued_at = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row3.issued_at =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.signature";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.signature = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row3.signature =

												null

										;
									}
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									System.err.println(ex_tExtractJSONFields_1.getMessage());
									row3 = null;
								}

							}

							isStructError_tExtractJSONFields_1 = false;

//}

							tos_count_tExtractJSONFields_1++;

							/**
							 * [tExtractJSONFields_1 main ] stop
							 */

							/**
							 * [tExtractJSONFields_1 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							/**
							 * [tExtractJSONFields_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									toSetVariable = null;

// # Output table : 'toSetVariable'
									toSetVariable_tmp.access_token = row3.access_token;
									toSetVariable_tmp.token_type = row3.token_type;
									toSetVariable = toSetVariable_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "toSetVariable"
								if (toSetVariable != null) {

									/**
									 * [tSetGlobalVar_1 main ] start
									 */

									currentComponent = "tSetGlobalVar_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "toSetVariable");
									}

									globalMap.put("tokentype", toSetVariable.token_type);
									globalMap.put("accesstoken", toSetVariable.access_token);
									globalMap.put("All_StyleColor", "");

									row15 = toSetVariable;

									tos_count_tSetGlobalVar_1++;

									/**
									 * [tSetGlobalVar_1 main ] stop
									 */

									/**
									 * [tSetGlobalVar_1 process_data_begin ] start
									 */

									currentComponent = "tSetGlobalVar_1";

									/**
									 * [tSetGlobalVar_1 process_data_begin ] stop
									 */

									/**
									 * [tJavaRow_1 main ] start
									 */

									currentComponent = "tJavaRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
									}

									// code sample:
//
// multiply by 2 the row identifier
// output_row.id = row15.id * 2;
//
// lowercase the name
// output_row.name = row15.name.toLowerCase();
									System.out.println("TEST OAUTH " + globalMap.get("tokentype") + " "
											+ globalMap.get("accesstoken"));

									nb_line_tJavaRow_1++;

									tos_count_tJavaRow_1++;

									/**
									 * [tJavaRow_1 main ] stop
									 */

									/**
									 * [tJavaRow_1 process_data_begin ] start
									 */

									currentComponent = "tJavaRow_1";

									/**
									 * [tJavaRow_1 process_data_begin ] stop
									 */

									/**
									 * [tJavaRow_1 process_data_end ] start
									 */

									currentComponent = "tJavaRow_1";

									/**
									 * [tJavaRow_1 process_data_end ] stop
									 */

									/**
									 * [tSetGlobalVar_1 process_data_end ] start
									 */

									currentComponent = "tSetGlobalVar_1";

									/**
									 * [tSetGlobalVar_1 process_data_end ] stop
									 */

								} // End of branch "toSetVariable"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_1 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					/**
					 * [tExtractJSONFields_1 process_data_end ] stop
					 */

				} // End of branch "row2"

				/**
				 * [tRESTClient_1 process_data_end ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_end ] stop
				 */

				/**
				 * [tRESTClient_1 end ] start
				 */

				currentComponent = "tRESTClient_1";

				if (globalMap.get("tRESTClient_1_NB_LINE") == null) {
					globalMap.put("tRESTClient_1_NB_LINE", 1);
				}

// [tRESTCliend_end]

				ok_Hash.put("tRESTClient_1", true);
				end_Hash.put("tRESTClient_1", System.currentTimeMillis());

				/**
				 * [tRESTClient_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "toSetVariable");
				}

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRESTClient_1 finally ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 1);
	}

	public void tSalesforceConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSalesforceConnection_1 begin ] start
				 */

				ok_Hash.put("tSalesforceConnection_1", false);
				start_Hash.put("tSalesforceConnection_1", System.currentTimeMillis());

				currentComponent = "tSalesforceConnection_1";

				int tos_count_tSalesforceConnection_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tSalesforceConnection_1 = new org.talend.components.salesforce.tsalesforceconnection.TSalesforceConnectionDefinition();

				org.talend.components.salesforce.SalesforceConnectionProperties props_tSalesforceConnection_1 = (org.talend.components.salesforce.SalesforceConnectionProperties) def_tSalesforceConnection_1
						.createRuntimeProperties();
				props_tSalesforceConnection_1.setValue("endpoint", "https://test.salesforce.com/services/Soap/u/45.0");

				props_tSalesforceConnection_1.setValue("loginType",
						org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);

				props_tSalesforceConnection_1.setValue("bulkConnection", false);

				props_tSalesforceConnection_1.setValue("reuseSession", false);

				props_tSalesforceConnection_1.setValue("needCompression", false);

				props_tSalesforceConnection_1.setValue("timeout", 60000);

				props_tSalesforceConnection_1.setValue("httpChunked", true);

				props_tSalesforceConnection_1.setValue("clientId", "systemuser@haddadeurope.com");

				props_tSalesforceConnection_1.userPassword.setValue("securityKey",
						routines.system.PasswordEncryptUtil.decryptPassword(
								"ENC:[wEnZg8JQ2eLXBUsSt7VkWY4Kpk8bLusYob0HRv8u4RtGwLHf7jNAuhbiVJ+AC8VYbypDsQc=]"));

				props_tSalesforceConnection_1.userPassword.setValue("useAuth", false);

				props_tSalesforceConnection_1.userPassword.setValue("userId", "zeine.mahbouby@haddadeurope.com.full");

				props_tSalesforceConnection_1.userPassword.setValue("password", routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[OtLi2lgpO1qd7/0hGozi+YT+MIBiuE2zr67WZxkLKocuhDwl3rhn]"));

				props_tSalesforceConnection_1.proxy.setValue("useProxy", false);

				props_tSalesforceConnection_1.proxy.userPassword.setValue("useAuth", false);

				props_tSalesforceConnection_1.referencedComponent.setValue("referenceDefinitionName",
						"tSalesforceConnection");

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceConnection_1.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tSalesforceConnection_1 = props_tSalesforceConnection_1.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tSalesforceConnection_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceConnection_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tSalesforceConnection_1
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tSalesforceConnection_1.referencedComponent
								.setReference(referencedComponentProperties_tSalesforceConnection_1);
					}
				}
				globalMap.put("tSalesforceConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceConnection_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.0.SNAPSHOT");
				java.net.URL mappings_url_tSalesforceConnection_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tSalesforceConnection_1_MAPPINGS_URL", mappings_url_tSalesforceConnection_1);

				org.talend.components.api.container.RuntimeContainer container_tSalesforceConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tSalesforceConnection_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tSalesforceConnection_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tSalesforceConnection_1 = null;
				topology_tSalesforceConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceConnection_1 = def_tSalesforceConnection_1
						.getRuntimeInfo(org.talend.components.api.component.runtime.ExecutionEngine.DI,
								props_tSalesforceConnection_1, topology_tSalesforceConnection_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceConnection_1 = def_tSalesforceConnection_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tSalesforceConnection_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tSalesforceConnection_1 = componentRuntime_tSalesforceConnection_1
						.initialize(container_tSalesforceConnection_1, props_tSalesforceConnection_1);

				if (initVr_tSalesforceConnection_1
						.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tSalesforceConnection_1.getMessage());
				}

				if (componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tSalesforceConnection_1;
					compDriverInitialization_tSalesforceConnection_1.runAtDriver(container_tSalesforceConnection_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceConnection_1 = null;
				if (componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tSalesforceConnection_1;
					org.talend.daikon.properties.ValidationResult vr_tSalesforceConnection_1 = sourceOrSink_tSalesforceConnection_1
							.validate(container_tSalesforceConnection_1);
					if (vr_tSalesforceConnection_1
							.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tSalesforceConnection_1.getMessage());
					}
				}

				/**
				 * [tSalesforceConnection_1 begin ] stop
				 */

				/**
				 * [tSalesforceConnection_1 main ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				tos_count_tSalesforceConnection_1++;

				/**
				 * [tSalesforceConnection_1 main ] stop
				 */

				/**
				 * [tSalesforceConnection_1 process_data_begin ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				/**
				 * [tSalesforceConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tSalesforceConnection_1 process_data_end ] start
				 */

				currentComponent = "tSalesforceConnection_1";

				/**
				 * [tSalesforceConnection_1 process_data_end ] stop
				 */

				/**
				 * [tSalesforceConnection_1 end ] start
				 */

				currentComponent = "tSalesforceConnection_1";

// end of generic

				ok_Hash.put("tSalesforceConnection_1", true);
				end_Hash.put("tSalesforceConnection_1", System.currentTimeMillis());

				/**
				 * [tSalesforceConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSalesforceConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tSalesforceInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceConnection_1 finally ] start
				 */

				currentComponent = "tSalesforceConnection_1";

// finally of generic

				/**
				 * [tSalesforceConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String idHash;

		public String getIdHash() {
			return this.idHash;
		}

		public String tags;

		public String getTags() {
			return this.tags;
		}

		public String brandId;

		public String getBrandId() {
			return this.brandId;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String property_Color_Code;

		public String getProperty_Color_Code() {
			return this.property_Color_Code;
		}

		public String property_Style_Code;

		public String getProperty_Style_Code() {
			return this.property_Style_Code;
		}

		public String property_Brand;

		public String getProperty_Brand() {
			return this.property_Brand;
		}

		public String extension;

		public String getExtension() {
			return this.extension;
		}

		public String property_Style_Reference;

		public String getProperty_Style_Reference() {
			return this.property_Style_Reference;
		}

		public String isPublic;

		public String getIsPublic() {
			return this.isPublic;
		}

		public String property_Season;

		public String getProperty_Season() {
			return this.property_Season;
		}

		public String property_Year;

		public String getProperty_Year() {
			return this.property_Year;
		}

		public String property_Asset_Type;

		public String getProperty_Asset_Type() {
			return this.property_Asset_Type;
		}

		public String property_Asset_Subtype;

		public String getProperty_Asset_Subtype() {
			return this.property_Asset_Subtype;
		}

		public String userCreated;

		public String getUserCreated() {
			return this.userCreated;
		}

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		public String property_Gender;

		public String getProperty_Gender() {
			return this.property_Gender;
		}

		public String property_Age_Group;

		public String getProperty_Age_Group() {
			return this.property_Age_Group;
		}

		public String property_Sub_Division;

		public String getProperty_Sub_Division() {
			return this.property_Sub_Division;
		}

		public String property_Division;

		public String getProperty_Division() {
			return this.property_Division;
		}

		public String Terms_of_Use;

		public String getTerms_of_Use() {
			return this.Terms_of_Use;
		}

		public String webimage;

		public String getWebimage() {
			return this.webimage;
		}

		public String thul;

		public String getThul() {
			return this.thul;
		}

		public String property_Photo_View;

		public String getProperty_Photo_View() {
			return this.property_Photo_View;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.description = readString(dis);

					this.type = readString(dis);

					this.idHash = readString(dis);

					this.tags = readString(dis);

					this.brandId = readString(dis);

					this.name = readString(dis);

					this.property_Color_Code = readString(dis);

					this.property_Style_Code = readString(dis);

					this.property_Brand = readString(dis);

					this.extension = readString(dis);

					this.property_Style_Reference = readString(dis);

					this.isPublic = readString(dis);

					this.property_Season = readString(dis);

					this.property_Year = readString(dis);

					this.property_Asset_Type = readString(dis);

					this.property_Asset_Subtype = readString(dis);

					this.userCreated = readString(dis);

					this.filename = readString(dis);

					this.property_Gender = readString(dis);

					this.property_Age_Group = readString(dis);

					this.property_Sub_Division = readString(dis);

					this.property_Division = readString(dis);

					this.Terms_of_Use = readString(dis);

					this.webimage = readString(dis);

					this.thul = readString(dis);

					this.property_Photo_View = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.idHash, dos);

				// String

				writeString(this.tags, dos);

				// String

				writeString(this.brandId, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.property_Color_Code, dos);

				// String

				writeString(this.property_Style_Code, dos);

				// String

				writeString(this.property_Brand, dos);

				// String

				writeString(this.extension, dos);

				// String

				writeString(this.property_Style_Reference, dos);

				// String

				writeString(this.isPublic, dos);

				// String

				writeString(this.property_Season, dos);

				// String

				writeString(this.property_Year, dos);

				// String

				writeString(this.property_Asset_Type, dos);

				// String

				writeString(this.property_Asset_Subtype, dos);

				// String

				writeString(this.userCreated, dos);

				// String

				writeString(this.filename, dos);

				// String

				writeString(this.property_Gender, dos);

				// String

				writeString(this.property_Age_Group, dos);

				// String

				writeString(this.property_Sub_Division, dos);

				// String

				writeString(this.property_Division, dos);

				// String

				writeString(this.Terms_of_Use, dos);

				// String

				writeString(this.webimage, dos);

				// String

				writeString(this.thul, dos);

				// String

				writeString(this.property_Photo_View, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",description=" + description);
			sb.append(",type=" + type);
			sb.append(",idHash=" + idHash);
			sb.append(",tags=" + tags);
			sb.append(",brandId=" + brandId);
			sb.append(",name=" + name);
			sb.append(",property_Color_Code=" + property_Color_Code);
			sb.append(",property_Style_Code=" + property_Style_Code);
			sb.append(",property_Brand=" + property_Brand);
			sb.append(",extension=" + extension);
			sb.append(",property_Style_Reference=" + property_Style_Reference);
			sb.append(",isPublic=" + isPublic);
			sb.append(",property_Season=" + property_Season);
			sb.append(",property_Year=" + property_Year);
			sb.append(",property_Asset_Type=" + property_Asset_Type);
			sb.append(",property_Asset_Subtype=" + property_Asset_Subtype);
			sb.append(",userCreated=" + userCreated);
			sb.append(",filename=" + filename);
			sb.append(",property_Gender=" + property_Gender);
			sb.append(",property_Age_Group=" + property_Age_Group);
			sb.append(",property_Sub_Division=" + property_Sub_Division);
			sb.append(",property_Division=" + property_Division);
			sb.append(",Terms_of_Use=" + Terms_of_Use);
			sb.append(",webimage=" + webimage);
			sb.append(",thul=" + thul);
			sb.append(",property_Photo_View=" + property_Photo_View);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

					this.statusCode = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

				// Integer

				writeInteger(this.statusCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append(",statusCode=" + String.valueOf(statusCode));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class getAssetsStruct implements routines.system.IPersistableRow<getAssetsStruct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		public boolean IsActive;

		public boolean getIsActive() {
			return this.IsActive;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Brand_Haddad__c;

		public String getBrand_Haddad__c() {
			return this.Brand_Haddad__c;
		}

		public String Family;

		public String getFamily() {
			return this.Family;
		}

		public Double Warehouse_Available_Stock__c;

		public Double getWarehouse_Available_Stock__c() {
			return this.Warehouse_Available_Stock__c;
		}

		public String Image_1_Link_Haddad__c;

		public String getImage_1_Link_Haddad__c() {
			return this.Image_1_Link_Haddad__c;
		}

		public String Image_2_Link_Haddad__c;

		public String getImage_2_Link_Haddad__c() {
			return this.Image_2_Link_Haddad__c;
		}

		public String Image_3_Link_Haddad__c;

		public String getImage_3_Link_Haddad__c() {
			return this.Image_3_Link_Haddad__c;
		}

		public String Image_4_Link_Haddad__c;

		public String getImage_4_Link_Haddad__c() {
			return this.Image_4_Link_Haddad__c;
		}

		public String Image_5_Link_Haddad__c;

		public String getImage_5_Link_Haddad__c() {
			return this.Image_5_Link_Haddad__c;
		}

		public String Product_Code_External_Id__c;

		public String getProduct_Code_External_Id__c() {
			return this.Product_Code_External_Id__c;
		}

		public String Age_Group_Haddad__c;

		public String getAge_Group_Haddad__c() {
			return this.Age_Group_Haddad__c;
		}

		public String Brand_Haddad__r_Name;

		public String getBrand_Haddad__r_Name() {
			return this.Brand_Haddad__r_Name;
		}

		public String Category_Haddad__r_Name;

		public String getCategory_Haddad__r_Name() {
			return this.Category_Haddad__r_Name;
		}

		public String Color_Code_Haddad__c;

		public String getColor_Code_Haddad__c() {
			return this.Color_Code_Haddad__c;
		}

		public String Color_Haddad__r_Name;

		public String getColor_Haddad__r_Name() {
			return this.Color_Haddad__r_Name;
		}

		public String Color_Haddad__r_Color_Name_External__c;

		public String getColor_Haddad__r_Color_Name_External__c() {
			return this.Color_Haddad__r_Color_Name_External__c;
		}

		public String Country_of_origin_Haddad__c;

		public String getCountry_of_origin_Haddad__c() {
			return this.Country_of_origin_Haddad__c;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public String Gender_Haddad__c;

		public String getGender_Haddad__c() {
			return this.Gender_Haddad__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Product_Status__c;

		public String getProduct_Status__c() {
			return this.Product_Status__c;
		}

		public String Ref__c;

		public String getRef__c() {
			return this.Ref__c;
		}

		public String Season_Product_Haddad__r_Name;

		public String getSeason_Product_Haddad__r_Name() {
			return this.Season_Product_Haddad__r_Name;
		}

		public String Style_Haddad__r_Name;

		public String getStyle_Haddad__r_Name() {
			return this.Style_Haddad__r_Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.IsActive = dis.readBoolean();

					this.ProductCode = readString(dis);

					this.Brand_Haddad__c = readString(dis);

					this.Family = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Warehouse_Available_Stock__c = null;
					} else {
						this.Warehouse_Available_Stock__c = dis.readDouble();
					}

					this.Image_1_Link_Haddad__c = readString(dis);

					this.Image_2_Link_Haddad__c = readString(dis);

					this.Image_3_Link_Haddad__c = readString(dis);

					this.Image_4_Link_Haddad__c = readString(dis);

					this.Image_5_Link_Haddad__c = readString(dis);

					this.Product_Code_External_Id__c = readString(dis);

					this.Age_Group_Haddad__c = readString(dis);

					this.Brand_Haddad__r_Name = readString(dis);

					this.Category_Haddad__r_Name = readString(dis);

					this.Color_Code_Haddad__c = readString(dis);

					this.Color_Haddad__r_Name = readString(dis);

					this.Color_Haddad__r_Color_Name_External__c = readString(dis);

					this.Country_of_origin_Haddad__c = readString(dis);

					this.Description = readString(dis);

					this.Gender_Haddad__c = readString(dis);

					this.Name = readString(dis);

					this.Product_Status__c = readString(dis);

					this.Ref__c = readString(dis);

					this.Season_Product_Haddad__r_Name = readString(dis);

					this.Style_Haddad__r_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// boolean

				dos.writeBoolean(this.IsActive);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Brand_Haddad__c, dos);

				// String

				writeString(this.Family, dos);

				// Double

				if (this.Warehouse_Available_Stock__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Warehouse_Available_Stock__c);
				}

				// String

				writeString(this.Image_1_Link_Haddad__c, dos);

				// String

				writeString(this.Image_2_Link_Haddad__c, dos);

				// String

				writeString(this.Image_3_Link_Haddad__c, dos);

				// String

				writeString(this.Image_4_Link_Haddad__c, dos);

				// String

				writeString(this.Image_5_Link_Haddad__c, dos);

				// String

				writeString(this.Product_Code_External_Id__c, dos);

				// String

				writeString(this.Age_Group_Haddad__c, dos);

				// String

				writeString(this.Brand_Haddad__r_Name, dos);

				// String

				writeString(this.Category_Haddad__r_Name, dos);

				// String

				writeString(this.Color_Code_Haddad__c, dos);

				// String

				writeString(this.Color_Haddad__r_Name, dos);

				// String

				writeString(this.Color_Haddad__r_Color_Name_External__c, dos);

				// String

				writeString(this.Country_of_origin_Haddad__c, dos);

				// String

				writeString(this.Description, dos);

				// String

				writeString(this.Gender_Haddad__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Product_Status__c, dos);

				// String

				writeString(this.Ref__c, dos);

				// String

				writeString(this.Season_Product_Haddad__r_Name, dos);

				// String

				writeString(this.Style_Haddad__r_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",IsActive=" + String.valueOf(IsActive));
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Brand_Haddad__c=" + Brand_Haddad__c);
			sb.append(",Family=" + Family);
			sb.append(",Warehouse_Available_Stock__c=" + String.valueOf(Warehouse_Available_Stock__c));
			sb.append(",Image_1_Link_Haddad__c=" + Image_1_Link_Haddad__c);
			sb.append(",Image_2_Link_Haddad__c=" + Image_2_Link_Haddad__c);
			sb.append(",Image_3_Link_Haddad__c=" + Image_3_Link_Haddad__c);
			sb.append(",Image_4_Link_Haddad__c=" + Image_4_Link_Haddad__c);
			sb.append(",Image_5_Link_Haddad__c=" + Image_5_Link_Haddad__c);
			sb.append(",Product_Code_External_Id__c=" + Product_Code_External_Id__c);
			sb.append(",Age_Group_Haddad__c=" + Age_Group_Haddad__c);
			sb.append(",Brand_Haddad__r_Name=" + Brand_Haddad__r_Name);
			sb.append(",Category_Haddad__r_Name=" + Category_Haddad__r_Name);
			sb.append(",Color_Code_Haddad__c=" + Color_Code_Haddad__c);
			sb.append(",Color_Haddad__r_Name=" + Color_Haddad__r_Name);
			sb.append(",Color_Haddad__r_Color_Name_External__c=" + Color_Haddad__r_Color_Name_External__c);
			sb.append(",Country_of_origin_Haddad__c=" + Country_of_origin_Haddad__c);
			sb.append(",Description=" + Description);
			sb.append(",Gender_Haddad__c=" + Gender_Haddad__c);
			sb.append(",Name=" + Name);
			sb.append(",Product_Status__c=" + Product_Status__c);
			sb.append(",Ref__c=" + Ref__c);
			sb.append(",Season_Product_Haddad__r_Name=" + Season_Product_Haddad__r_Name);
			sb.append(",Style_Haddad__r_Name=" + Style_Haddad__r_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(getAssetsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class log11Struct implements routines.system.IPersistableRow<log11Struct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		public boolean IsActive;

		public boolean getIsActive() {
			return this.IsActive;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Brand_Haddad__c;

		public String getBrand_Haddad__c() {
			return this.Brand_Haddad__c;
		}

		public String Family;

		public String getFamily() {
			return this.Family;
		}

		public Double Warehouse_Available_Stock__c;

		public Double getWarehouse_Available_Stock__c() {
			return this.Warehouse_Available_Stock__c;
		}

		public String Image_1_Link_Haddad__c;

		public String getImage_1_Link_Haddad__c() {
			return this.Image_1_Link_Haddad__c;
		}

		public String Image_2_Link_Haddad__c;

		public String getImage_2_Link_Haddad__c() {
			return this.Image_2_Link_Haddad__c;
		}

		public String Image_3_Link_Haddad__c;

		public String getImage_3_Link_Haddad__c() {
			return this.Image_3_Link_Haddad__c;
		}

		public String Image_4_Link_Haddad__c;

		public String getImage_4_Link_Haddad__c() {
			return this.Image_4_Link_Haddad__c;
		}

		public String Image_5_Link_Haddad__c;

		public String getImage_5_Link_Haddad__c() {
			return this.Image_5_Link_Haddad__c;
		}

		public String Product_Code_External_Id__c;

		public String getProduct_Code_External_Id__c() {
			return this.Product_Code_External_Id__c;
		}

		public String Age_Group_Haddad__c;

		public String getAge_Group_Haddad__c() {
			return this.Age_Group_Haddad__c;
		}

		public String Brand_Haddad__r_Name;

		public String getBrand_Haddad__r_Name() {
			return this.Brand_Haddad__r_Name;
		}

		public String Category_Haddad__r_Name;

		public String getCategory_Haddad__r_Name() {
			return this.Category_Haddad__r_Name;
		}

		public String Color_Code_Haddad__c;

		public String getColor_Code_Haddad__c() {
			return this.Color_Code_Haddad__c;
		}

		public String Color_Haddad__r_Name;

		public String getColor_Haddad__r_Name() {
			return this.Color_Haddad__r_Name;
		}

		public String Color_Haddad__r_Color_Name_External__c;

		public String getColor_Haddad__r_Color_Name_External__c() {
			return this.Color_Haddad__r_Color_Name_External__c;
		}

		public String Country_of_origin_Haddad__c;

		public String getCountry_of_origin_Haddad__c() {
			return this.Country_of_origin_Haddad__c;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public String Gender_Haddad__c;

		public String getGender_Haddad__c() {
			return this.Gender_Haddad__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Product_Status__c;

		public String getProduct_Status__c() {
			return this.Product_Status__c;
		}

		public String Ref__c;

		public String getRef__c() {
			return this.Ref__c;
		}

		public String Season_Product_Haddad__r_Name;

		public String getSeason_Product_Haddad__r_Name() {
			return this.Season_Product_Haddad__r_Name;
		}

		public String Style_Haddad__r_Name;

		public String getStyle_Haddad__r_Name() {
			return this.Style_Haddad__r_Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.IsActive = dis.readBoolean();

					this.ProductCode = readString(dis);

					this.Brand_Haddad__c = readString(dis);

					this.Family = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Warehouse_Available_Stock__c = null;
					} else {
						this.Warehouse_Available_Stock__c = dis.readDouble();
					}

					this.Image_1_Link_Haddad__c = readString(dis);

					this.Image_2_Link_Haddad__c = readString(dis);

					this.Image_3_Link_Haddad__c = readString(dis);

					this.Image_4_Link_Haddad__c = readString(dis);

					this.Image_5_Link_Haddad__c = readString(dis);

					this.Product_Code_External_Id__c = readString(dis);

					this.Age_Group_Haddad__c = readString(dis);

					this.Brand_Haddad__r_Name = readString(dis);

					this.Category_Haddad__r_Name = readString(dis);

					this.Color_Code_Haddad__c = readString(dis);

					this.Color_Haddad__r_Name = readString(dis);

					this.Color_Haddad__r_Color_Name_External__c = readString(dis);

					this.Country_of_origin_Haddad__c = readString(dis);

					this.Description = readString(dis);

					this.Gender_Haddad__c = readString(dis);

					this.Name = readString(dis);

					this.Product_Status__c = readString(dis);

					this.Ref__c = readString(dis);

					this.Season_Product_Haddad__r_Name = readString(dis);

					this.Style_Haddad__r_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// boolean

				dos.writeBoolean(this.IsActive);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Brand_Haddad__c, dos);

				// String

				writeString(this.Family, dos);

				// Double

				if (this.Warehouse_Available_Stock__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Warehouse_Available_Stock__c);
				}

				// String

				writeString(this.Image_1_Link_Haddad__c, dos);

				// String

				writeString(this.Image_2_Link_Haddad__c, dos);

				// String

				writeString(this.Image_3_Link_Haddad__c, dos);

				// String

				writeString(this.Image_4_Link_Haddad__c, dos);

				// String

				writeString(this.Image_5_Link_Haddad__c, dos);

				// String

				writeString(this.Product_Code_External_Id__c, dos);

				// String

				writeString(this.Age_Group_Haddad__c, dos);

				// String

				writeString(this.Brand_Haddad__r_Name, dos);

				// String

				writeString(this.Category_Haddad__r_Name, dos);

				// String

				writeString(this.Color_Code_Haddad__c, dos);

				// String

				writeString(this.Color_Haddad__r_Name, dos);

				// String

				writeString(this.Color_Haddad__r_Color_Name_External__c, dos);

				// String

				writeString(this.Country_of_origin_Haddad__c, dos);

				// String

				writeString(this.Description, dos);

				// String

				writeString(this.Gender_Haddad__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Product_Status__c, dos);

				// String

				writeString(this.Ref__c, dos);

				// String

				writeString(this.Season_Product_Haddad__r_Name, dos);

				// String

				writeString(this.Style_Haddad__r_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",IsActive=" + String.valueOf(IsActive));
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Brand_Haddad__c=" + Brand_Haddad__c);
			sb.append(",Family=" + Family);
			sb.append(",Warehouse_Available_Stock__c=" + String.valueOf(Warehouse_Available_Stock__c));
			sb.append(",Image_1_Link_Haddad__c=" + Image_1_Link_Haddad__c);
			sb.append(",Image_2_Link_Haddad__c=" + Image_2_Link_Haddad__c);
			sb.append(",Image_3_Link_Haddad__c=" + Image_3_Link_Haddad__c);
			sb.append(",Image_4_Link_Haddad__c=" + Image_4_Link_Haddad__c);
			sb.append(",Image_5_Link_Haddad__c=" + Image_5_Link_Haddad__c);
			sb.append(",Product_Code_External_Id__c=" + Product_Code_External_Id__c);
			sb.append(",Age_Group_Haddad__c=" + Age_Group_Haddad__c);
			sb.append(",Brand_Haddad__r_Name=" + Brand_Haddad__r_Name);
			sb.append(",Category_Haddad__r_Name=" + Category_Haddad__r_Name);
			sb.append(",Color_Code_Haddad__c=" + Color_Code_Haddad__c);
			sb.append(",Color_Haddad__r_Name=" + Color_Haddad__r_Name);
			sb.append(",Color_Haddad__r_Color_Name_External__c=" + Color_Haddad__r_Color_Name_External__c);
			sb.append(",Country_of_origin_Haddad__c=" + Country_of_origin_Haddad__c);
			sb.append(",Description=" + Description);
			sb.append(",Gender_Haddad__c=" + Gender_Haddad__c);
			sb.append(",Name=" + Name);
			sb.append(",Product_Status__c=" + Product_Status__c);
			sb.append(",Ref__c=" + Ref__c);
			sb.append(",Season_Product_Haddad__r_Name=" + Season_Product_Haddad__r_Name);
			sb.append(",Style_Haddad__r_Name=" + Style_Haddad__r_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(log11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		public boolean IsActive;

		public boolean getIsActive() {
			return this.IsActive;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Brand_Haddad__c;

		public String getBrand_Haddad__c() {
			return this.Brand_Haddad__c;
		}

		public String Family;

		public String getFamily() {
			return this.Family;
		}

		public Double Warehouse_Available_Stock__c;

		public Double getWarehouse_Available_Stock__c() {
			return this.Warehouse_Available_Stock__c;
		}

		public String Image_1_Link_Haddad__c;

		public String getImage_1_Link_Haddad__c() {
			return this.Image_1_Link_Haddad__c;
		}

		public String Image_2_Link_Haddad__c;

		public String getImage_2_Link_Haddad__c() {
			return this.Image_2_Link_Haddad__c;
		}

		public String Image_3_Link_Haddad__c;

		public String getImage_3_Link_Haddad__c() {
			return this.Image_3_Link_Haddad__c;
		}

		public String Image_4_Link_Haddad__c;

		public String getImage_4_Link_Haddad__c() {
			return this.Image_4_Link_Haddad__c;
		}

		public String Image_5_Link_Haddad__c;

		public String getImage_5_Link_Haddad__c() {
			return this.Image_5_Link_Haddad__c;
		}

		public String Product_Code_External_Id__c;

		public String getProduct_Code_External_Id__c() {
			return this.Product_Code_External_Id__c;
		}

		public String Age_Group_Haddad__c;

		public String getAge_Group_Haddad__c() {
			return this.Age_Group_Haddad__c;
		}

		public String Brand_Haddad__r_Name;

		public String getBrand_Haddad__r_Name() {
			return this.Brand_Haddad__r_Name;
		}

		public String Category_Haddad__r_Name;

		public String getCategory_Haddad__r_Name() {
			return this.Category_Haddad__r_Name;
		}

		public String Color_Code_Haddad__c;

		public String getColor_Code_Haddad__c() {
			return this.Color_Code_Haddad__c;
		}

		public String Color_Haddad__r_Name;

		public String getColor_Haddad__r_Name() {
			return this.Color_Haddad__r_Name;
		}

		public String Color_Haddad__r_Color_Name_External__c;

		public String getColor_Haddad__r_Color_Name_External__c() {
			return this.Color_Haddad__r_Color_Name_External__c;
		}

		public String Country_of_origin_Haddad__c;

		public String getCountry_of_origin_Haddad__c() {
			return this.Country_of_origin_Haddad__c;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public String Gender_Haddad__c;

		public String getGender_Haddad__c() {
			return this.Gender_Haddad__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Product_Status__c;

		public String getProduct_Status__c() {
			return this.Product_Status__c;
		}

		public String Ref__c;

		public String getRef__c() {
			return this.Ref__c;
		}

		public String Season_Product_Haddad__r_Name;

		public String getSeason_Product_Haddad__r_Name() {
			return this.Season_Product_Haddad__r_Name;
		}

		public String Style_Haddad__r_Name;

		public String getStyle_Haddad__r_Name() {
			return this.Style_Haddad__r_Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.IsActive = dis.readBoolean();

					this.ProductCode = readString(dis);

					this.Brand_Haddad__c = readString(dis);

					this.Family = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Warehouse_Available_Stock__c = null;
					} else {
						this.Warehouse_Available_Stock__c = dis.readDouble();
					}

					this.Image_1_Link_Haddad__c = readString(dis);

					this.Image_2_Link_Haddad__c = readString(dis);

					this.Image_3_Link_Haddad__c = readString(dis);

					this.Image_4_Link_Haddad__c = readString(dis);

					this.Image_5_Link_Haddad__c = readString(dis);

					this.Product_Code_External_Id__c = readString(dis);

					this.Age_Group_Haddad__c = readString(dis);

					this.Brand_Haddad__r_Name = readString(dis);

					this.Category_Haddad__r_Name = readString(dis);

					this.Color_Code_Haddad__c = readString(dis);

					this.Color_Haddad__r_Name = readString(dis);

					this.Color_Haddad__r_Color_Name_External__c = readString(dis);

					this.Country_of_origin_Haddad__c = readString(dis);

					this.Description = readString(dis);

					this.Gender_Haddad__c = readString(dis);

					this.Name = readString(dis);

					this.Product_Status__c = readString(dis);

					this.Ref__c = readString(dis);

					this.Season_Product_Haddad__r_Name = readString(dis);

					this.Style_Haddad__r_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// boolean

				dos.writeBoolean(this.IsActive);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Brand_Haddad__c, dos);

				// String

				writeString(this.Family, dos);

				// Double

				if (this.Warehouse_Available_Stock__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Warehouse_Available_Stock__c);
				}

				// String

				writeString(this.Image_1_Link_Haddad__c, dos);

				// String

				writeString(this.Image_2_Link_Haddad__c, dos);

				// String

				writeString(this.Image_3_Link_Haddad__c, dos);

				// String

				writeString(this.Image_4_Link_Haddad__c, dos);

				// String

				writeString(this.Image_5_Link_Haddad__c, dos);

				// String

				writeString(this.Product_Code_External_Id__c, dos);

				// String

				writeString(this.Age_Group_Haddad__c, dos);

				// String

				writeString(this.Brand_Haddad__r_Name, dos);

				// String

				writeString(this.Category_Haddad__r_Name, dos);

				// String

				writeString(this.Color_Code_Haddad__c, dos);

				// String

				writeString(this.Color_Haddad__r_Name, dos);

				// String

				writeString(this.Color_Haddad__r_Color_Name_External__c, dos);

				// String

				writeString(this.Country_of_origin_Haddad__c, dos);

				// String

				writeString(this.Description, dos);

				// String

				writeString(this.Gender_Haddad__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Product_Status__c, dos);

				// String

				writeString(this.Ref__c, dos);

				// String

				writeString(this.Season_Product_Haddad__r_Name, dos);

				// String

				writeString(this.Style_Haddad__r_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",IsActive=" + String.valueOf(IsActive));
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Brand_Haddad__c=" + Brand_Haddad__c);
			sb.append(",Family=" + Family);
			sb.append(",Warehouse_Available_Stock__c=" + String.valueOf(Warehouse_Available_Stock__c));
			sb.append(",Image_1_Link_Haddad__c=" + Image_1_Link_Haddad__c);
			sb.append(",Image_2_Link_Haddad__c=" + Image_2_Link_Haddad__c);
			sb.append(",Image_3_Link_Haddad__c=" + Image_3_Link_Haddad__c);
			sb.append(",Image_4_Link_Haddad__c=" + Image_4_Link_Haddad__c);
			sb.append(",Image_5_Link_Haddad__c=" + Image_5_Link_Haddad__c);
			sb.append(",Product_Code_External_Id__c=" + Product_Code_External_Id__c);
			sb.append(",Age_Group_Haddad__c=" + Age_Group_Haddad__c);
			sb.append(",Brand_Haddad__r_Name=" + Brand_Haddad__r_Name);
			sb.append(",Category_Haddad__r_Name=" + Category_Haddad__r_Name);
			sb.append(",Color_Code_Haddad__c=" + Color_Code_Haddad__c);
			sb.append(",Color_Haddad__r_Name=" + Color_Haddad__r_Name);
			sb.append(",Color_Haddad__r_Color_Name_External__c=" + Color_Haddad__r_Color_Name_External__c);
			sb.append(",Country_of_origin_Haddad__c=" + Country_of_origin_Haddad__c);
			sb.append(",Description=" + Description);
			sb.append(",Gender_Haddad__c=" + Gender_Haddad__c);
			sb.append(",Name=" + Name);
			sb.append(",Product_Status__c=" + Product_Status__c);
			sb.append(",Ref__c=" + Ref__c);
			sb.append(",Season_Product_Haddad__r_Name=" + Season_Product_Haddad__r_Name);
			sb.append(",Style_Haddad__r_Name=" + Style_Haddad__r_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		public boolean IsActive;

		public boolean getIsActive() {
			return this.IsActive;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String Brand_Haddad__c;

		public String getBrand_Haddad__c() {
			return this.Brand_Haddad__c;
		}

		public String Family;

		public String getFamily() {
			return this.Family;
		}

		public Double Warehouse_Available_Stock__c;

		public Double getWarehouse_Available_Stock__c() {
			return this.Warehouse_Available_Stock__c;
		}

		public String Image_1_Link_Haddad__c;

		public String getImage_1_Link_Haddad__c() {
			return this.Image_1_Link_Haddad__c;
		}

		public String Image_2_Link_Haddad__c;

		public String getImage_2_Link_Haddad__c() {
			return this.Image_2_Link_Haddad__c;
		}

		public String Image_3_Link_Haddad__c;

		public String getImage_3_Link_Haddad__c() {
			return this.Image_3_Link_Haddad__c;
		}

		public String Image_4_Link_Haddad__c;

		public String getImage_4_Link_Haddad__c() {
			return this.Image_4_Link_Haddad__c;
		}

		public String Image_5_Link_Haddad__c;

		public String getImage_5_Link_Haddad__c() {
			return this.Image_5_Link_Haddad__c;
		}

		public String Product_Code_External_Id__c;

		public String getProduct_Code_External_Id__c() {
			return this.Product_Code_External_Id__c;
		}

		public String Age_Group_Haddad__c;

		public String getAge_Group_Haddad__c() {
			return this.Age_Group_Haddad__c;
		}

		public String Brand_Haddad__r_Name;

		public String getBrand_Haddad__r_Name() {
			return this.Brand_Haddad__r_Name;
		}

		public String Category_Haddad__r_Name;

		public String getCategory_Haddad__r_Name() {
			return this.Category_Haddad__r_Name;
		}

		public String Color_Code_Haddad__c;

		public String getColor_Code_Haddad__c() {
			return this.Color_Code_Haddad__c;
		}

		public String Color_Haddad__r_Name;

		public String getColor_Haddad__r_Name() {
			return this.Color_Haddad__r_Name;
		}

		public String Color_Haddad__r_Color_Name_External__c;

		public String getColor_Haddad__r_Color_Name_External__c() {
			return this.Color_Haddad__r_Color_Name_External__c;
		}

		public String Country_of_origin_Haddad__c;

		public String getCountry_of_origin_Haddad__c() {
			return this.Country_of_origin_Haddad__c;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public String Gender_Haddad__c;

		public String getGender_Haddad__c() {
			return this.Gender_Haddad__c;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Product_Status__c;

		public String getProduct_Status__c() {
			return this.Product_Status__c;
		}

		public String Ref__c;

		public String getRef__c() {
			return this.Ref__c;
		}

		public String Season_Product_Haddad__r_Name;

		public String getSeason_Product_Haddad__r_Name() {
			return this.Season_Product_Haddad__r_Name;
		}

		public String Style_Haddad__r_Name;

		public String getStyle_Haddad__r_Name() {
			return this.Style_Haddad__r_Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.IsActive = dis.readBoolean();

					this.ProductCode = readString(dis);

					this.Brand_Haddad__c = readString(dis);

					this.Family = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Warehouse_Available_Stock__c = null;
					} else {
						this.Warehouse_Available_Stock__c = dis.readDouble();
					}

					this.Image_1_Link_Haddad__c = readString(dis);

					this.Image_2_Link_Haddad__c = readString(dis);

					this.Image_3_Link_Haddad__c = readString(dis);

					this.Image_4_Link_Haddad__c = readString(dis);

					this.Image_5_Link_Haddad__c = readString(dis);

					this.Product_Code_External_Id__c = readString(dis);

					this.Age_Group_Haddad__c = readString(dis);

					this.Brand_Haddad__r_Name = readString(dis);

					this.Category_Haddad__r_Name = readString(dis);

					this.Color_Code_Haddad__c = readString(dis);

					this.Color_Haddad__r_Name = readString(dis);

					this.Color_Haddad__r_Color_Name_External__c = readString(dis);

					this.Country_of_origin_Haddad__c = readString(dis);

					this.Description = readString(dis);

					this.Gender_Haddad__c = readString(dis);

					this.Name = readString(dis);

					this.Product_Status__c = readString(dis);

					this.Ref__c = readString(dis);

					this.Season_Product_Haddad__r_Name = readString(dis);

					this.Style_Haddad__r_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// boolean

				dos.writeBoolean(this.IsActive);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.Brand_Haddad__c, dos);

				// String

				writeString(this.Family, dos);

				// Double

				if (this.Warehouse_Available_Stock__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Warehouse_Available_Stock__c);
				}

				// String

				writeString(this.Image_1_Link_Haddad__c, dos);

				// String

				writeString(this.Image_2_Link_Haddad__c, dos);

				// String

				writeString(this.Image_3_Link_Haddad__c, dos);

				// String

				writeString(this.Image_4_Link_Haddad__c, dos);

				// String

				writeString(this.Image_5_Link_Haddad__c, dos);

				// String

				writeString(this.Product_Code_External_Id__c, dos);

				// String

				writeString(this.Age_Group_Haddad__c, dos);

				// String

				writeString(this.Brand_Haddad__r_Name, dos);

				// String

				writeString(this.Category_Haddad__r_Name, dos);

				// String

				writeString(this.Color_Code_Haddad__c, dos);

				// String

				writeString(this.Color_Haddad__r_Name, dos);

				// String

				writeString(this.Color_Haddad__r_Color_Name_External__c, dos);

				// String

				writeString(this.Country_of_origin_Haddad__c, dos);

				// String

				writeString(this.Description, dos);

				// String

				writeString(this.Gender_Haddad__c, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Product_Status__c, dos);

				// String

				writeString(this.Ref__c, dos);

				// String

				writeString(this.Season_Product_Haddad__r_Name, dos);

				// String

				writeString(this.Style_Haddad__r_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",IsActive=" + String.valueOf(IsActive));
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Brand_Haddad__c=" + Brand_Haddad__c);
			sb.append(",Family=" + Family);
			sb.append(",Warehouse_Available_Stock__c=" + String.valueOf(Warehouse_Available_Stock__c));
			sb.append(",Image_1_Link_Haddad__c=" + Image_1_Link_Haddad__c);
			sb.append(",Image_2_Link_Haddad__c=" + Image_2_Link_Haddad__c);
			sb.append(",Image_3_Link_Haddad__c=" + Image_3_Link_Haddad__c);
			sb.append(",Image_4_Link_Haddad__c=" + Image_4_Link_Haddad__c);
			sb.append(",Image_5_Link_Haddad__c=" + Image_5_Link_Haddad__c);
			sb.append(",Product_Code_External_Id__c=" + Product_Code_External_Id__c);
			sb.append(",Age_Group_Haddad__c=" + Age_Group_Haddad__c);
			sb.append(",Brand_Haddad__r_Name=" + Brand_Haddad__r_Name);
			sb.append(",Category_Haddad__r_Name=" + Category_Haddad__r_Name);
			sb.append(",Color_Code_Haddad__c=" + Color_Code_Haddad__c);
			sb.append(",Color_Haddad__r_Name=" + Color_Haddad__r_Name);
			sb.append(",Color_Haddad__r_Color_Name_External__c=" + Color_Haddad__r_Color_Name_External__c);
			sb.append(",Country_of_origin_Haddad__c=" + Country_of_origin_Haddad__c);
			sb.append(",Description=" + Description);
			sb.append(",Gender_Haddad__c=" + Gender_Haddad__c);
			sb.append(",Name=" + Name);
			sb.append(",Product_Status__c=" + Product_Status__c);
			sb.append(",Ref__c=" + Ref__c);
			sb.append(",Season_Product_Haddad__r_Name=" + Season_Product_Haddad__r_Name);
			sb.append(",Style_Haddad__r_Name=" + Style_Haddad__r_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSalesforceInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();
				row1Struct row1 = new row1Struct();
				getAssetsStruct getAssets = new getAssetsStruct();
				row4Struct row4 = new row4Struct();
				row5Struct row5 = new row5Struct();
				log11Struct log11 = new log11Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[27];

					public void addRow(String[] row) {

						for (int i = 0; i < 27; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 26 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 26 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|%27$-");
							sbformat.append(colLengths[26]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[26] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("tLogRow_2");
				util_tLogRow_2.addRow(new String[] { "id", "description", "type", "idHash", "tags", "brandId", "name",
						"property_Color_Code", "property_Style_Code", "property_Brand", "extension",
						"property_Style_Reference", "isPublic", "property_Season", "property_Year",
						"property_Asset_Type", "property_Asset_Subtype", "userCreated", "filename", "property_Gender",
						"property_Age_Group", "property_Sub_Division", "property_Division", "Terms_of_Use", "webimage",
						"thul", "property_Photo_View", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_2 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_2", false);
				start_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tExtractJSONFields_2 = 0;

				int nb_line_tExtractJSONFields_2 = 0;
				String jsonStr_tExtractJSONFields_2 = "";

				class JsonPathCache_tExtractJSONFields_2 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_2 jsonPathCache_tExtractJSONFields_2 = new JsonPathCache_tExtractJSONFields_2();

				/**
				 * [tExtractJSONFields_2 begin ] stop
				 */

				/**
				 * [tRESTClient_2 begin ] start
				 */

				ok_Hash.put("tRESTClient_2", false);
				start_Hash.put("tRESTClient_2", System.currentTimeMillis());

				currentComponent = "tRESTClient_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "getAssets");
				}

				int tos_count_tRESTClient_2 = 0;

				/**
				 * [tRESTClient_2 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "log11");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[26];

					public void addRow(String[] row) {

						for (int i = 0; i < 26; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 25 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 25 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[25] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "Id", "IsActive", "ProductCode", "Brand_Haddad__c", "Family",
						"Warehouse_Available_Stock__c", "Image_1_Link_Haddad__c", "Image_2_Link_Haddad__c",
						"Image_3_Link_Haddad__c", "Image_4_Link_Haddad__c", "Image_5_Link_Haddad__c",
						"Product_Code_External_Id__c", "Age_Group_Haddad__c", "Brand_Haddad__r_Name",
						"Category_Haddad__r_Name", "Color_Code_Haddad__c", "Color_Haddad__r_Name",
						"Color_Haddad__r_Color_Name_External__c", "Country_of_origin_Haddad__c", "Description",
						"Gender_Haddad__c", "Name", "Product_Status__c", "Ref__c", "Season_Product_Haddad__r_Name",
						"Style_Haddad__r_Name", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				getAssetsStruct getAssets_tmp = new getAssetsStruct();
				log11Struct log11_tmp = new log11Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Color_Code_Haddad__c;
					String Style_Haddad__r_Name;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.Color_Code_Haddad__c == null) ? 0 : this.Color_Code_Haddad__c.hashCode());

							result = prime * result
									+ ((this.Style_Haddad__r_Name == null) ? 0 : this.Style_Haddad__r_Name.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.Color_Code_Haddad__c == null) {
							if (other.Color_Code_Haddad__c != null)
								return false;

						} else if (!this.Color_Code_Haddad__c.equals(other.Color_Code_Haddad__c))

							return false;

						if (this.Style_Haddad__r_Name == null) {
							if (other.Style_Haddad__r_Name != null)
								return false;

						} else if (!this.Style_Haddad__r_Name.equals(other.Style_Haddad__r_Name))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tSalesforceInput_1 begin ] start
				 */

				ok_Hash.put("tSalesforceInput_1", false);
				start_Hash.put("tSalesforceInput_1", System.currentTimeMillis());

				currentComponent = "tSalesforceInput_1";

				int tos_count_tSalesforceInput_1 = 0;

				org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_1 = new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

				org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_1 = (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_1
						.createRuntimeProperties();
				props_tSalesforceInput_1.setValue("queryMode",
						org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);

				props_tSalesforceInput_1.setValue("manualQuery", true);

				props_tSalesforceInput_1.setValue("query",
						"SELECT Id, IsActive, ProductCode, Brand_Haddad__c, Family, Warehouse_Available_Stock__c, Image_1_Link_Haddad__c, Image_"
								+ "2_Link_Haddad__c, Image_3_Link_Haddad__c, Image_4_Link_Haddad__c, Image_5_Link_Haddad__c , Product_Code_External_Id__c, "
								+ "Age_Group_Haddad__c,Brand_Haddad__r.Name,Category_Haddad__r.Name,Color_Code_Haddad__c,Color_Haddad__r.Name, Color_Haddad"
								+ "__r.Color_Name_External__c, Country_of_origin_Haddad__c,Description,Gender_Haddad__c,Name,Product_Status__c,Ref__c,Seaso"
								+ "n_Product_Haddad__r.Name,Style_Haddad__r.Name\nFROM Product2 \nWHERE IsActive = true \n    AND (NOT (ProductCode LIKE '%"
								+ "SMS%' OR ProductCode LIKE '%PLV%')) \n    AND Brand_Haddad__c != 'a0B2p00002HPKI8EAP'\n    AND Product_Family_Haddad__c "
								+ "!= 'a0L2p00002DfQ8IEAV' \n    AND Warehouse_Available_Stock__c > 0 \n    AND Image_1_Link_Haddad__c = '' \n    AND Image"
								+ "_2_Link_Haddad__c = '' \n    AND Image_3_Link_Haddad__c = '' \n    AND Image_4_Link_Haddad__c = '' \n    AND Image_5_Lin"
								+ "k_Haddad__c = '' \n	AND Id = '01t2p000009nnhsAAA' ");

				props_tSalesforceInput_1.setValue("includeDeleted", false);

				props_tSalesforceInput_1.setValue("batchSize", 250);

				props_tSalesforceInput_1.setValue("normalizeDelimiter", ";");

				props_tSalesforceInput_1.setValue("columnNameDelimiter", "_");

				props_tSalesforceInput_1.connection.userPassword.setValue("useAuth", false);

				props_tSalesforceInput_1.connection.proxy.userPassword.setValue("useAuth", false);

				props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tSalesforceInput_1.connection.referencedComponent.setValue("componentInstanceId",
						"tSalesforceConnection_1");

				props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSalesforceConnection");

				props_tSalesforceInput_1.module.setValue("moduleName", "Product2");

				props_tSalesforceInput_1.module.connection.userPassword.setValue("useAuth", false);

				props_tSalesforceInput_1.module.connection.proxy.userPassword.setValue("useAuth", false);

				props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceType",
						org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);

				props_tSalesforceInput_1.module.connection.referencedComponent.setValue("componentInstanceId",
						"tSalesforceConnection_1");

				props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSalesforceConnection");

				class SchemaSettingTool_tSalesforceInput_1_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"GuessedSchema\",\"fields\":[{", s);

						a("\"name\":\"Id\",\"type\":\"string\",\"talend.field.length\":\"18\"},{", s);

						a("\"name\":\"IsActive\",\"type\":\"boolean\"},{", s);

						a("\"name\":\"ProductCode\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Brand_Haddad__c\",\"type\":[\"string\",\"null\"],\"salesforce.ref.field\":\"Brand_Haddad__r\",\"talend.field.length\":\"18\",\"salesforce.ref.module\":\"Brand_Haddad__c\"},{",
								s);

						a("\"name\":\"Family\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"40\"},{", s);

						a("\"name\":\"Warehouse_Available_Stock__c\",\"type\":[\"double\",\"null\"],\"talend.field.length\":\"18\"},{",
								s);

						a("\"name\":\"Image_1_Link_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Image_2_Link_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Image_3_Link_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Image_4_Link_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Image_5_Link_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Product_Code_External_Id__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Age_Group_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Brand_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Category_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Color_Code_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"1300\"},{",
								s);

						a("\"name\":\"Color_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Color_Haddad__r_Color_Name_External__c\",\"type\":\"string\"},{", s);

						a("\"name\":\"Country_of_origin_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Description\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"4000\"},{",
								s);

						a("\"name\":\"Gender_Haddad__c\",\"type\":\"string\",\"talend.field.length\":\"255\"},{", s);

						a("\"name\":\"Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{", s);

						a("\"name\":\"Product_Status__c\",\"type\":\"string\",\"talend.field.length\":\"255\"},{", s);

						a("\"name\":\"Ref__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"1300\"},{", s);

						a("\"name\":\"Season_Product_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",
								s);

						a("\"name\":\"Style_Haddad__r_Name\",\"type\":\"string\",\"talend.field.length\":\"255\"}]}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tSalesforceInput_1_1_fisrt sst_tSalesforceInput_1_1_fisrt = new SchemaSettingTool_tSalesforceInput_1_1_fisrt();

				props_tSalesforceInput_1.module.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_1_1_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tSalesforceInput_1
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tSalesforceInput_1.connection.referencedComponent
								.setReference(referencedComponentProperties_tSalesforceInput_1);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.module.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.module.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tSalesforceInput_1
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tSalesforceInput_1.module.connection.referencedComponent
								.setReference(referencedComponentProperties_tSalesforceInput_1);
					}
				}
				globalMap.put("tSalesforceInput_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.0.SNAPSHOT");
				java.net.URL mappings_url_tSalesforceInput_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tSalesforceInput_1_MAPPINGS_URL", mappings_url_tSalesforceInput_1);

				org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tSalesforceInput_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tSalesforceInput_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_1 = null;
				topology_tSalesforceInput_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_1 = def_tSalesforceInput_1
						.getRuntimeInfo(org.talend.components.api.component.runtime.ExecutionEngine.DI,
								props_tSalesforceInput_1, topology_tSalesforceInput_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_1 = def_tSalesforceInput_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tSalesforceInput_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_1 = componentRuntime_tSalesforceInput_1
						.initialize(container_tSalesforceInput_1, props_tSalesforceInput_1);

				if (initVr_tSalesforceInput_1
						.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tSalesforceInput_1.getMessage());
				}

				if (componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tSalesforceInput_1;
					compDriverInitialization_tSalesforceInput_1.runAtDriver(container_tSalesforceInput_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_1 = null;
				if (componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tSalesforceInput_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tSalesforceInput_1;
					org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_1 = sourceOrSink_tSalesforceInput_1
							.validate(container_tSalesforceInput_1);
					if (vr_tSalesforceInput_1
							.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
						throw new RuntimeException(vr_tSalesforceInput_1.getMessage());
					}
				}

				org.talend.components.api.component.runtime.Source source_tSalesforceInput_1 = (org.talend.components.api.component.runtime.Source) sourceOrSink_tSalesforceInput_1;
				org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_1 = source_tSalesforceInput_1
						.createReader(container_tSalesforceInput_1);
				reader_tSalesforceInput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(
						reader_tSalesforceInput_1, container_tSalesforceInput_1);

				boolean multi_output_is_allowed_tSalesforceInput_1 = false;
				org.talend.components.api.component.Connector c_tSalesforceInput_1 = null;
				for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_1
						.getAvailableConnectors(null, true)) {
					if (currentConnector.getName().equals("MAIN")) {
						c_tSalesforceInput_1 = currentConnector;
					}

					if (currentConnector.getName().equals("REJECT")) {// it's better to move the code to javajet
						multi_output_is_allowed_tSalesforceInput_1 = true;
					}
				}
				org.apache.avro.Schema schema_tSalesforceInput_1 = props_tSalesforceInput_1
						.getSchema(c_tSalesforceInput_1, true);

				org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_1 = org.talend.codegen.enforcer.EnforcerCreator
						.createOutgoingEnforcer(schema_tSalesforceInput_1, false);

				// Create a reusable factory that converts the output of the reader to an
				// IndexedRecord.
				org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_1 = null;

				// Iterate through the incoming data.
				boolean available_tSalesforceInput_1 = reader_tSalesforceInput_1.start();

				resourceMap.put("reader_tSalesforceInput_1", reader_tSalesforceInput_1);

				for (; available_tSalesforceInput_1; available_tSalesforceInput_1 = reader_tSalesforceInput_1
						.advance()) {
					nb_line_tSalesforceInput_1++;

					if (multi_output_is_allowed_tSalesforceInput_1) {
						row28 = null;

					}

					try {
						Object data_tSalesforceInput_1 = reader_tSalesforceInput_1.getCurrent();

						if (multi_output_is_allowed_tSalesforceInput_1) {
							row28 = new row28Struct();
						}

						// Construct the factory once when the first data arrives.
						if (factory_tSalesforceInput_1 == null) {
							factory_tSalesforceInput_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
									.createIndexedRecordConverter(data_tSalesforceInput_1.getClass());
						}

						// Enforce the outgoing schema on the input.
						outgoingEnforcer_tSalesforceInput_1
								.setWrapped(factory_tSalesforceInput_1.convertToAvro(data_tSalesforceInput_1));
						Object columnValue_0_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(0);
						row28.Id = (String) (columnValue_0_tSalesforceInput_1);
						Object columnValue_1_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(1);
						if (columnValue_1_tSalesforceInput_1 == null) {
							row28.IsActive = false;
						} else {
							row28.IsActive = (boolean) (columnValue_1_tSalesforceInput_1);
						}
						Object columnValue_2_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(2);
						row28.ProductCode = (String) (columnValue_2_tSalesforceInput_1);
						Object columnValue_3_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(3);
						row28.Brand_Haddad__c = (String) (columnValue_3_tSalesforceInput_1);
						Object columnValue_4_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(4);
						row28.Family = (String) (columnValue_4_tSalesforceInput_1);
						Object columnValue_5_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(5);
						row28.Warehouse_Available_Stock__c = (Double) (columnValue_5_tSalesforceInput_1);
						Object columnValue_6_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(6);
						row28.Image_1_Link_Haddad__c = (String) (columnValue_6_tSalesforceInput_1);
						Object columnValue_7_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(7);
						row28.Image_2_Link_Haddad__c = (String) (columnValue_7_tSalesforceInput_1);
						Object columnValue_8_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(8);
						row28.Image_3_Link_Haddad__c = (String) (columnValue_8_tSalesforceInput_1);
						Object columnValue_9_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(9);
						row28.Image_4_Link_Haddad__c = (String) (columnValue_9_tSalesforceInput_1);
						Object columnValue_10_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(10);
						row28.Image_5_Link_Haddad__c = (String) (columnValue_10_tSalesforceInput_1);
						Object columnValue_11_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(11);
						row28.Product_Code_External_Id__c = (String) (columnValue_11_tSalesforceInput_1);
						Object columnValue_12_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(12);
						row28.Age_Group_Haddad__c = (String) (columnValue_12_tSalesforceInput_1);
						Object columnValue_13_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(13);
						row28.Brand_Haddad__r_Name = (String) (columnValue_13_tSalesforceInput_1);
						Object columnValue_14_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(14);
						row28.Category_Haddad__r_Name = (String) (columnValue_14_tSalesforceInput_1);
						Object columnValue_15_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(15);
						row28.Color_Code_Haddad__c = (String) (columnValue_15_tSalesforceInput_1);
						Object columnValue_16_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(16);
						row28.Color_Haddad__r_Name = (String) (columnValue_16_tSalesforceInput_1);
						Object columnValue_17_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(17);
						row28.Color_Haddad__r_Color_Name_External__c = (String) (columnValue_17_tSalesforceInput_1);
						Object columnValue_18_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(18);
						row28.Country_of_origin_Haddad__c = (String) (columnValue_18_tSalesforceInput_1);
						Object columnValue_19_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(19);
						row28.Description = (String) (columnValue_19_tSalesforceInput_1);
						Object columnValue_20_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(20);
						row28.Gender_Haddad__c = (String) (columnValue_20_tSalesforceInput_1);
						Object columnValue_21_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(21);
						row28.Name = (String) (columnValue_21_tSalesforceInput_1);
						Object columnValue_22_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(22);
						row28.Product_Status__c = (String) (columnValue_22_tSalesforceInput_1);
						Object columnValue_23_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(23);
						row28.Ref__c = (String) (columnValue_23_tSalesforceInput_1);
						Object columnValue_24_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(24);
						row28.Season_Product_Haddad__r_Name = (String) (columnValue_24_tSalesforceInput_1);
						Object columnValue_25_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(25);
						row28.Style_Haddad__r_Name = (String) (columnValue_25_tSalesforceInput_1);
					} catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_1) {
						java.util.Map<String, Object> info_tSalesforceInput_1 = e_tSalesforceInput_1.getRejectInfo();
						// TODO use a method instead of getting method by the special key
						// "error/errorMessage"
						Object errorMessage_tSalesforceInput_1 = null;
						if (info_tSalesforceInput_1.containsKey("error")) {
							errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("error");
						} else if (info_tSalesforceInput_1.containsKey("errorMessage")) {
							errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("errorMessage");
						} else {
							errorMessage_tSalesforceInput_1 = "Rejected but error message missing";
						}
						errorMessage_tSalesforceInput_1 = "Row " + nb_line_tSalesforceInput_1 + ": "
								+ errorMessage_tSalesforceInput_1;
						System.err.println(errorMessage_tSalesforceInput_1);
						// If the record is reject, the main line record should put NULL
						row28 = null;
					}
					java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_1 = new java.util.ArrayList<Object>();
					java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_1 = null;

					/**
					 * [tSalesforceInput_1 begin ] stop
					 */

					/**
					 * [tSalesforceInput_1 main ] start
					 */

					currentComponent = "tSalesforceInput_1";

					tos_count_tSalesforceInput_1++;

					/**
					 * [tSalesforceInput_1 main ] stop
					 */

					/**
					 * [tSalesforceInput_1 process_data_begin ] start
					 */

					currentComponent = "tSalesforceInput_1";

					/**
					 * [tSalesforceInput_1 process_data_begin ] stop
					 */

					/**
					 * [tUniqRow_1 main ] start
					 */

					currentComponent = "tUniqRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row28");
					}

					row1 = null;
					if (row28.Color_Code_Haddad__c == null) {
						finder_tUniqRow_1.Color_Code_Haddad__c = null;
					} else {
						finder_tUniqRow_1.Color_Code_Haddad__c = row28.Color_Code_Haddad__c.toLowerCase();
					}
					if (row28.Style_Haddad__r_Name == null) {
						finder_tUniqRow_1.Style_Haddad__r_Name = null;
					} else {
						finder_tUniqRow_1.Style_Haddad__r_Name = row28.Style_Haddad__r_Name.toLowerCase();
					}
					finder_tUniqRow_1.hashCodeDirty = true;
					if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
						KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

						if (row28.Color_Code_Haddad__c == null) {
							new_tUniqRow_1.Color_Code_Haddad__c = null;
						} else {
							new_tUniqRow_1.Color_Code_Haddad__c = row28.Color_Code_Haddad__c.toLowerCase();
						}
						if (row28.Style_Haddad__r_Name == null) {
							new_tUniqRow_1.Style_Haddad__r_Name = null;
						} else {
							new_tUniqRow_1.Style_Haddad__r_Name = row28.Style_Haddad__r_Name.toLowerCase();
						}

						keystUniqRow_1.add(new_tUniqRow_1);
						if (row1 == null) {

							row1 = new row1Struct();
						}
						row1.Id = row28.Id;
						row1.IsActive = row28.IsActive;
						row1.ProductCode = row28.ProductCode;
						row1.Brand_Haddad__c = row28.Brand_Haddad__c;
						row1.Family = row28.Family;
						row1.Warehouse_Available_Stock__c = row28.Warehouse_Available_Stock__c;
						row1.Image_1_Link_Haddad__c = row28.Image_1_Link_Haddad__c;
						row1.Image_2_Link_Haddad__c = row28.Image_2_Link_Haddad__c;
						row1.Image_3_Link_Haddad__c = row28.Image_3_Link_Haddad__c;
						row1.Image_4_Link_Haddad__c = row28.Image_4_Link_Haddad__c;
						row1.Image_5_Link_Haddad__c = row28.Image_5_Link_Haddad__c;
						row1.Product_Code_External_Id__c = row28.Product_Code_External_Id__c;
						row1.Age_Group_Haddad__c = row28.Age_Group_Haddad__c;
						row1.Brand_Haddad__r_Name = row28.Brand_Haddad__r_Name;
						row1.Category_Haddad__r_Name = row28.Category_Haddad__r_Name;
						row1.Color_Code_Haddad__c = row28.Color_Code_Haddad__c;
						row1.Color_Haddad__r_Name = row28.Color_Haddad__r_Name;
						row1.Color_Haddad__r_Color_Name_External__c = row28.Color_Haddad__r_Color_Name_External__c;
						row1.Country_of_origin_Haddad__c = row28.Country_of_origin_Haddad__c;
						row1.Description = row28.Description;
						row1.Gender_Haddad__c = row28.Gender_Haddad__c;
						row1.Name = row28.Name;
						row1.Product_Status__c = row28.Product_Status__c;
						row1.Ref__c = row28.Ref__c;
						row1.Season_Product_Haddad__r_Name = row28.Season_Product_Haddad__r_Name;
						row1.Style_Haddad__r_Name = row28.Style_Haddad__r_Name;
						nb_uniques_tUniqRow_1++;
					} else {
						nb_duplicates_tUniqRow_1++;
					}

					tos_count_tUniqRow_1++;

					/**
					 * [tUniqRow_1 main ] stop
					 */

					/**
					 * [tUniqRow_1 process_data_begin ] start
					 */

					currentComponent = "tUniqRow_1";

					/**
					 * [tUniqRow_1 process_data_begin ] stop
					 */
// Start of branch "row1"
					if (row1 != null) {

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							getAssets = null;
							log11 = null;

// # Output table : 'getAssets'
							getAssets_tmp.Id = row1.Id;
							getAssets_tmp.IsActive = row1.IsActive;
							getAssets_tmp.ProductCode = row1.ProductCode;
							getAssets_tmp.Brand_Haddad__c = row1.Brand_Haddad__c;
							getAssets_tmp.Family = row1.Family;
							getAssets_tmp.Warehouse_Available_Stock__c = row1.Warehouse_Available_Stock__c;
							getAssets_tmp.Image_1_Link_Haddad__c = row1.Image_1_Link_Haddad__c;
							getAssets_tmp.Image_2_Link_Haddad__c = row1.Image_2_Link_Haddad__c;
							getAssets_tmp.Image_3_Link_Haddad__c = row1.Image_3_Link_Haddad__c;
							getAssets_tmp.Image_4_Link_Haddad__c = row1.Image_4_Link_Haddad__c;
							getAssets_tmp.Image_5_Link_Haddad__c = row1.Image_5_Link_Haddad__c;
							getAssets_tmp.Product_Code_External_Id__c = row1.Product_Code_External_Id__c;
							getAssets_tmp.Age_Group_Haddad__c = row1.Age_Group_Haddad__c;
							getAssets_tmp.Brand_Haddad__r_Name = row1.Brand_Haddad__r_Name;
							getAssets_tmp.Category_Haddad__r_Name = row1.Category_Haddad__r_Name;
							getAssets_tmp.Color_Code_Haddad__c = row1.Color_Code_Haddad__c;
							getAssets_tmp.Color_Haddad__r_Name = row1.Color_Haddad__r_Name;
							getAssets_tmp.Color_Haddad__r_Color_Name_External__c = row1.Color_Haddad__r_Color_Name_External__c;
							getAssets_tmp.Country_of_origin_Haddad__c = row1.Country_of_origin_Haddad__c;
							getAssets_tmp.Description = row1.Description;
							getAssets_tmp.Gender_Haddad__c = row1.Gender_Haddad__c;
							getAssets_tmp.Name = row1.Name;
							getAssets_tmp.Product_Status__c = row1.Product_Status__c;
							getAssets_tmp.Ref__c = row1.Ref__c;
							getAssets_tmp.Season_Product_Haddad__r_Name = row1.Season_Product_Haddad__r_Name;
							getAssets_tmp.Style_Haddad__r_Name = row1.Style_Haddad__r_Name;
							getAssets = getAssets_tmp;

// # Output table : 'log11'
							log11_tmp.Id = row1.Id;
							log11_tmp.IsActive = row1.IsActive;
							log11_tmp.ProductCode = row1.ProductCode;
							log11_tmp.Brand_Haddad__c = row1.Brand_Haddad__c;
							log11_tmp.Family = row1.Family;
							log11_tmp.Warehouse_Available_Stock__c = row1.Warehouse_Available_Stock__c;
							log11_tmp.Image_1_Link_Haddad__c = row1.Image_1_Link_Haddad__c;
							log11_tmp.Image_2_Link_Haddad__c = row1.Image_2_Link_Haddad__c;
							log11_tmp.Image_3_Link_Haddad__c = row1.Image_3_Link_Haddad__c;
							log11_tmp.Image_4_Link_Haddad__c = row1.Image_4_Link_Haddad__c;
							log11_tmp.Image_5_Link_Haddad__c = row1.Image_5_Link_Haddad__c;
							log11_tmp.Product_Code_External_Id__c = row1.Product_Code_External_Id__c;
							log11_tmp.Age_Group_Haddad__c = row1.Age_Group_Haddad__c;
							log11_tmp.Brand_Haddad__r_Name = row1.Brand_Haddad__r_Name;
							log11_tmp.Category_Haddad__r_Name = row1.Category_Haddad__r_Name;
							log11_tmp.Color_Code_Haddad__c = row1.Color_Code_Haddad__c;
							log11_tmp.Color_Haddad__r_Name = row1.Color_Haddad__r_Name;
							log11_tmp.Color_Haddad__r_Color_Name_External__c = row1.Color_Haddad__r_Color_Name_External__c;
							log11_tmp.Country_of_origin_Haddad__c = row1.Country_of_origin_Haddad__c;
							log11_tmp.Description = row1.Description;
							log11_tmp.Gender_Haddad__c = row1.Gender_Haddad__c;
							log11_tmp.Name = row1.Name;
							log11_tmp.Product_Status__c = row1.Product_Status__c;
							log11_tmp.Ref__c = row1.Ref__c;
							log11_tmp.Season_Product_Haddad__r_Name = row1.Season_Product_Haddad__r_Name;
							log11_tmp.Style_Haddad__r_Name = row1.Style_Haddad__r_Name;
							log11 = log11_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "getAssets"
						if (getAssets != null) {

							/**
							 * [tRESTClient_2 main ] start
							 */

							currentComponent = "tRESTClient_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "getAssets");
							}

							row4 = null;

// expected response body
							Object responseDoc_tRESTClient_2 = null;

							try {
								// request body
								org.dom4j.Document requestDoc_tRESTClient_2 = null;
								String requestString_tRESTClient_2 = null;

								Object requestBody_tRESTClient_2 = requestDoc_tRESTClient_2 != null
										? requestDoc_tRESTClient_2
										: requestString_tRESTClient_2;

								// resposne class name
								Class<?> responseClass_tRESTClient_2 = String.class;

								// create web client instance
								org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_2 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

								boolean inOSGi = routines.system.BundleUtils.inOSGi();

								final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_2 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

								String url = "https://haddadbrand.bynder.com/api/v4/media/?";
								// {baseUri}tRESTClient
								factoryBean_tRESTClient_2
										.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
								factoryBean_tRESTClient_2.setAddress(url);

								features_tRESTClient_2.add(new org.apache.cxf.feature.LoggingFeature());

								factoryBean_tRESTClient_2.setFeatures(features_tRESTClient_2);

								java.util.List<Object> providers_tRESTClient_2 = new java.util.ArrayList<Object>();
								providers_tRESTClient_2.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
									// workaround for https://jira.talendforge.org/browse/TESB-7276
									public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type, java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
											throws IOException, javax.ws.rs.WebApplicationException {
										String contentLength = headers.getFirst("Content-Length");
										if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
												&& Integer.valueOf(contentLength) <= 0) {
											try {
												return org.dom4j.DocumentHelper.parseText("<root/>");
											} catch (org.dom4j.DocumentException e_tRESTClient_2) {
												e_tRESTClient_2.printStackTrace();
											}
											return null;
										}
										return super.readFrom(cls, type, anns, mt, headers, is);
									}
								});
								org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_2 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
								jsonProvider_tRESTClient_2.setIgnoreNamespaces(true);
								jsonProvider_tRESTClient_2.setAttributesToElements(true);

								jsonProvider_tRESTClient_2.setSupportUnwrapped(true);
								jsonProvider_tRESTClient_2.setWrapperName("root");

								jsonProvider_tRESTClient_2.setDropRootElement(false);
								jsonProvider_tRESTClient_2.setConvertTypesToStrings(true);
								providers_tRESTClient_2.add(jsonProvider_tRESTClient_2);
								factoryBean_tRESTClient_2.setProviders(providers_tRESTClient_2);
								factoryBean_tRESTClient_2.setTransportId("http://cxf.apache.org/transports/http");

								boolean use_auth_tRESTClient_2 = false;
								if (use_auth_tRESTClient_2 && "SAML".equals("OAUTH2_BEARER")) {
									if (!inOSGi) {
										throw new IllegalArgumentException(
												"SAML based security scenarios are not supported in Studio (standalone)");
									}
									// set SAML Token authentication

									final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
											.decryptPassword(
													"ENC:[0/wVULobG86qhYyJGaG2fiKD4l5Mfc1gUut80EFTdcdoGzO09ks=]");

									org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
											.createSTSClient(factoryBean_tRESTClient_2.getBus(),
													"otman.nikraj@haddadeurope.com.partial",
													decryptedPassword_tRESTClient_2);

									org.talend.esb.security.saml.SAMLRESTUtils
											.configureClient(factoryBean_tRESTClient_2, stsClient);
								}

								org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_2 = factoryBean_tRESTClient_2
										.createWebClient();

								// set request path
								webClient_tRESTClient_2.path("");

								// set connection properties
								org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_2 = org.apache.cxf.jaxrs.client.WebClient
										.getConfig(webClient_tRESTClient_2);
								org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_2 = clientConfig_tRESTClient_2
										.getHttpConduit();

								if (clientConfig_tRESTClient_2.getEndpoint() != null
										&& clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo() != null) {
									clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo()
											.setProperty("enable.webclient.operation.reporting", true);
								}

								org.apache.cxf.configuration.jsse.TLSClientParameters tlsClientParameters_tRESTClient_2 = new org.apache.cxf.configuration.jsse.TLSClientParameters();
								tlsClientParameters_tRESTClient_2.setDisableCNCheck(true);
								conduit_tRESTClient_2.setTlsClientParameters(tlsClientParameters_tRESTClient_2);

								if (use_auth_tRESTClient_2 && "BASIC".equals("OAUTH2_BEARER")) {
									// set BASIC auth

									final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
											.decryptPassword(
													"ENC:[Z+acERQpmg/HE8XQAeStmkG+hyZ4ZBOes9inD7xDCMGe04kfyP0=]");

									org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
									authPolicy_tRESTClient_2.setAuthorizationType("Basic");
									authPolicy_tRESTClient_2.setUserName("otman.nikraj@haddadeurope.com.partial");
									authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
									conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
								} else if (use_auth_tRESTClient_2 && "HTTP Digest".equals("OAUTH2_BEARER")) {
									// set Digest auth

									final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
											.decryptPassword(
													"ENC:[/QVs89wLIwCJLTTBbAxHaqj4hG3/aVE/AZZ9qjk+VCbzA37758w=]");

									org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
									authPolicy_tRESTClient_2.setAuthorizationType("Digest");
									authPolicy_tRESTClient_2.setUserName("otman.nikraj@haddadeurope.com.partial");
									authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
									conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
								}

								if (!inOSGi) {
									conduit_tRESTClient_2.getClient().setReceiveTimeout((long) (60 * 1000L));
									conduit_tRESTClient_2.getClient().setConnectionTimeout((long) (30 * 1000L));
									boolean use_proxy_tRESTClient_2 = false;
									if (use_proxy_tRESTClient_2) {

										final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
												.decryptPassword("ENC:[HBtHXoPFLMbO8NWNlq5uy8NWKT2+ERv/NBW03A==]");

										conduit_tRESTClient_2.getClient().setProxyServer("61.163.92.4");
										conduit_tRESTClient_2.getClient().setProxyServerPort(Integer.valueOf(8080));
										conduit_tRESTClient_2.getProxyAuthorization().setUserName("");
										conduit_tRESTClient_2.getProxyAuthorization()
												.setPassword(decryptedPassword_tRESTClient_2);
									}
								}

								conduit_tRESTClient_2.getClient().setAutoRedirect(true);
								clientConfig_tRESTClient_2.getRequestContext().put("http.redirect.relative.uri", true);
								clientConfig_tRESTClient_2.getRequestContext().put("http.redirect.same.host.only",
										false);

								// set Accept-Type
								webClient_tRESTClient_2.accept("application/json");

								// set optional query and header properties if any

								webClient_tRESTClient_2.header("Authorization",
										globalMap.get("tokentype") + " " + globalMap.get("accesstoken"));

								webClient_tRESTClient_2.header("Accept", "application/json");

								webClient_tRESTClient_2.header("content-Type", "application/json");

								if (use_auth_tRESTClient_2 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
									// set oAuth2 bearer token
									webClient_tRESTClient_2.header("Authorization", "Bearer "
											+ globalMap.get("tokentype") + " " + globalMap.get("accesstoken"));
								}

								if (use_auth_tRESTClient_2 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {

									final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
											.decryptPassword(
													"ENC:[SSbmRUeHr3djv6ThtZdkdbm6MdQ+NwXXyERpxO2DIKzcdAdUl24=]");

									String username_tRESTClient_2 = "otman.nikraj@haddadeurope.com.partial";
									String password_tRESTClient_2 = decryptedPassword_tRESTClient_2;

									String bearerHeader_tRESTClient_2 = null;

									try {
										if (!inOSGi) {
											org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_2 = new org.springframework.context.support.ClassPathXmlApplicationContext(
													"META-INF/tesb/oidc-context.xml");
											org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_2 = context_tRESTClient_2
													.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
											bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils
													.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2,
															oidcConfiguration_tRESTClient_2);
										} else {
											bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils
													.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2);
										}
									} catch (Exception ex) {
										throw new javax.ws.rs.WebApplicationException(
												"Failed to get OIDC access token: ", ex);
									}

									webClient_tRESTClient_2.header("Authorization", bearerHeader_tRESTClient_2);
								}

								// if FORM request then capture query parameters into Form, otherwise set them
								// as queries

								webClient_tRESTClient_2.query("property_Style_Code", getAssets.Style_Haddad__r_Name);

								webClient_tRESTClient_2.query("property_Color_Code", getAssets.Color_Code_Haddad__c);

								try {
									// start send request

									responseDoc_tRESTClient_2 = webClient_tRESTClient_2
											.get(responseClass_tRESTClient_2);

									int webClientResponseStatus_tRESTClient_2 = webClient_tRESTClient_2.getResponse()
											.getStatus();
									if (webClientResponseStatus_tRESTClient_2 >= 300) {
										throw new javax.ws.rs.WebApplicationException(
												webClient_tRESTClient_2.getResponse());
									}

									if (row4 == null) {
										row4 = new row4Struct();
									}

									row4.statusCode = webClientResponseStatus_tRESTClient_2;

									{
										Object responseObj_tRESTClient_2 = responseDoc_tRESTClient_2;

										if (responseObj_tRESTClient_2 != null) {
											if (responseClass_tRESTClient_2 == String.class) {
												row4.string = (String) responseObj_tRESTClient_2;
											} else {
												routines.system.Document responseTalendDoc_tRESTClient_2 = null;
												if (null != responseObj_tRESTClient_2) {
													responseTalendDoc_tRESTClient_2 = new routines.system.Document();
													responseTalendDoc_tRESTClient_2.setDocument(
															(org.dom4j.Document) responseObj_tRESTClient_2);
												}
												row4.body = responseTalendDoc_tRESTClient_2;
											}
										}
									}

									globalMap.put("tRESTClient_2_HEADERS",
											webClient_tRESTClient_2.getResponse().getHeaders());

								} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_2) {

									throw ex_tRESTClient_2;

								}

							} catch (Exception e_tRESTClient_2) {

								throw new TalendException(e_tRESTClient_2, currentComponent, globalMap);

							}

							tos_count_tRESTClient_2++;

							/**
							 * [tRESTClient_2 main ] stop
							 */

							/**
							 * [tRESTClient_2 process_data_begin ] start
							 */

							currentComponent = "tRESTClient_2";

							/**
							 * [tRESTClient_2 process_data_begin ] stop
							 */
// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tExtractJSONFields_2 main ] start
								 */

								currentComponent = "tExtractJSONFields_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
								}

								if (row4.string != null) {// C_01
									jsonStr_tExtractJSONFields_2 = row4.string.toString();

									row5 = null;

									String loopPath_tExtractJSONFields_2 = "$";
									java.util.List<Object> resultset_tExtractJSONFields_2 = new java.util.ArrayList<Object>();

									boolean isStructError_tExtractJSONFields_2 = true;
									com.jayway.jsonpath.ReadContext document_tExtractJSONFields_2 = null;
									try {
										document_tExtractJSONFields_2 = com.jayway.jsonpath.JsonPath
												.parse(jsonStr_tExtractJSONFields_2);
										com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
												.getCompiledJsonPath(loopPath_tExtractJSONFields_2);
										Object result_tExtractJSONFields_2 = document_tExtractJSONFields_2.read(
												compiledLoopPath_tExtractJSONFields_2,
												net.minidev.json.JSONObject.class);
										if (result_tExtractJSONFields_2 instanceof net.minidev.json.JSONArray) {
											resultset_tExtractJSONFields_2 = (net.minidev.json.JSONArray) result_tExtractJSONFields_2;
										} else {
											resultset_tExtractJSONFields_2.add(result_tExtractJSONFields_2);
										}

										isStructError_tExtractJSONFields_2 = false;
									} catch (java.lang.Exception ex_tExtractJSONFields_2) {
										System.err.println(ex_tExtractJSONFields_2.getMessage());
									}

									String jsonPath_tExtractJSONFields_2 = null;
									com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_2 = null;

									Object value_tExtractJSONFields_2 = null;

									Object root_tExtractJSONFields_2 = null;
									for (int i_tExtractJSONFields_2 = 0; isStructError_tExtractJSONFields_2
											|| (i_tExtractJSONFields_2 < resultset_tExtractJSONFields_2
													.size()); i_tExtractJSONFields_2++) {
										if (!isStructError_tExtractJSONFields_2) {
											Object row_tExtractJSONFields_2 = resultset_tExtractJSONFields_2
													.get(i_tExtractJSONFields_2);
											row5 = null;
											row5 = new row5Struct();
											nb_line_tExtractJSONFields_2++;
											try {
												jsonPath_tExtractJSONFields_2 = "$.id";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.id = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.id =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.description";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.description = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.description =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.type";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.type = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.type =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.idHash";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.idHash = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.idHash =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.tags";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.tags = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.tags =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.brandId";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.brandId = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.brandId =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.name";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.name = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.name =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Color_Code";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Color_Code = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Color_Code =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Style_Code";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Style_Code = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Style_Code =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Brand";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Brand = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Brand =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.extension";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.extension = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.extension =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Style_Reference";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Style_Reference = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Style_Reference =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.isPublic";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.isPublic = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.isPublic =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Season";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Season = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Season =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Year";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Year = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Year =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Asset_Type";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Asset_Type = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Asset_Type =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Asset_Subtype";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Asset_Subtype = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Asset_Subtype =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.userCreated";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.userCreated = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.userCreated =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.filename";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.filename = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.filename =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Gender";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Gender = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Gender =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Age_Group";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Age_Group = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Age_Group =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Division";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Sub_Division = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Sub_Division =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Sub_Division";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Division = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Division =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.Terms_of_Use";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.Terms_of_Use = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.Terms_of_Use =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.thumbnails.webimage";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.webimage = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.webimage =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.thumbnails.thul";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.thul = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.thul =

															null

													;
												}
												jsonPath_tExtractJSONFields_2 = "$.property_Photo_View";
												compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
														.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

												try {

													value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
															.read(row_tExtractJSONFields_2);

													row5.property_Photo_View = value_tExtractJSONFields_2 == null ?

															null

															: value_tExtractJSONFields_2.toString();
												} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
													row5.property_Photo_View =

															null

													;
												}
											} catch (java.lang.Exception ex_tExtractJSONFields_2) {
												System.err.println(ex_tExtractJSONFields_2.getMessage());
												row5 = null;
											}

										}

										isStructError_tExtractJSONFields_2 = false;

//}

										tos_count_tExtractJSONFields_2++;

										/**
										 * [tExtractJSONFields_2 main ] stop
										 */

										/**
										 * [tExtractJSONFields_2 process_data_begin ] start
										 */

										currentComponent = "tExtractJSONFields_2";

										/**
										 * [tExtractJSONFields_2 process_data_begin ] stop
										 */
// Start of branch "row5"
										if (row5 != null) {

											/**
											 * [tLogRow_2 main ] start
											 */

											currentComponent = "tLogRow_2";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
											}

///////////////////////		

											String[] row_tLogRow_2 = new String[27];

											if (row5.id != null) { //
												row_tLogRow_2[0] = String.valueOf(row5.id);

											} //

											if (row5.description != null) { //
												row_tLogRow_2[1] = String.valueOf(row5.description);

											} //

											if (row5.type != null) { //
												row_tLogRow_2[2] = String.valueOf(row5.type);

											} //

											if (row5.idHash != null) { //
												row_tLogRow_2[3] = String.valueOf(row5.idHash);

											} //

											if (row5.tags != null) { //
												row_tLogRow_2[4] = String.valueOf(row5.tags);

											} //

											if (row5.brandId != null) { //
												row_tLogRow_2[5] = String.valueOf(row5.brandId);

											} //

											if (row5.name != null) { //
												row_tLogRow_2[6] = String.valueOf(row5.name);

											} //

											if (row5.property_Color_Code != null) { //
												row_tLogRow_2[7] = String.valueOf(row5.property_Color_Code);

											} //

											if (row5.property_Style_Code != null) { //
												row_tLogRow_2[8] = String.valueOf(row5.property_Style_Code);

											} //

											if (row5.property_Brand != null) { //
												row_tLogRow_2[9] = String.valueOf(row5.property_Brand);

											} //

											if (row5.extension != null) { //
												row_tLogRow_2[10] = String.valueOf(row5.extension);

											} //

											if (row5.property_Style_Reference != null) { //
												row_tLogRow_2[11] = String.valueOf(row5.property_Style_Reference);

											} //

											if (row5.isPublic != null) { //
												row_tLogRow_2[12] = String.valueOf(row5.isPublic);

											} //

											if (row5.property_Season != null) { //
												row_tLogRow_2[13] = String.valueOf(row5.property_Season);

											} //

											if (row5.property_Year != null) { //
												row_tLogRow_2[14] = String.valueOf(row5.property_Year);

											} //

											if (row5.property_Asset_Type != null) { //
												row_tLogRow_2[15] = String.valueOf(row5.property_Asset_Type);

											} //

											if (row5.property_Asset_Subtype != null) { //
												row_tLogRow_2[16] = String.valueOf(row5.property_Asset_Subtype);

											} //

											if (row5.userCreated != null) { //
												row_tLogRow_2[17] = String.valueOf(row5.userCreated);

											} //

											if (row5.filename != null) { //
												row_tLogRow_2[18] = String.valueOf(row5.filename);

											} //

											if (row5.property_Gender != null) { //
												row_tLogRow_2[19] = String.valueOf(row5.property_Gender);

											} //

											if (row5.property_Age_Group != null) { //
												row_tLogRow_2[20] = String.valueOf(row5.property_Age_Group);

											} //

											if (row5.property_Sub_Division != null) { //
												row_tLogRow_2[21] = String.valueOf(row5.property_Sub_Division);

											} //

											if (row5.property_Division != null) { //
												row_tLogRow_2[22] = String.valueOf(row5.property_Division);

											} //

											if (row5.Terms_of_Use != null) { //
												row_tLogRow_2[23] = String.valueOf(row5.Terms_of_Use);

											} //

											if (row5.webimage != null) { //
												row_tLogRow_2[24] = String.valueOf(row5.webimage);

											} //

											if (row5.thul != null) { //
												row_tLogRow_2[25] = String.valueOf(row5.thul);

											} //

											if (row5.property_Photo_View != null) { //
												row_tLogRow_2[26] = String.valueOf(row5.property_Photo_View);

											} //

											util_tLogRow_2.addRow(row_tLogRow_2);
											nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

											tos_count_tLogRow_2++;

											/**
											 * [tLogRow_2 main ] stop
											 */

											/**
											 * [tLogRow_2 process_data_begin ] start
											 */

											currentComponent = "tLogRow_2";

											/**
											 * [tLogRow_2 process_data_begin ] stop
											 */

											/**
											 * [tLogRow_2 process_data_end ] start
											 */

											currentComponent = "tLogRow_2";

											/**
											 * [tLogRow_2 process_data_end ] stop
											 */

										} // End of branch "row5"

										// end for
									}

								} // C_01

								/**
								 * [tExtractJSONFields_2 process_data_end ] start
								 */

								currentComponent = "tExtractJSONFields_2";

								/**
								 * [tExtractJSONFields_2 process_data_end ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tRESTClient_2 process_data_end ] start
							 */

							currentComponent = "tRESTClient_2";

							/**
							 * [tRESTClient_2 process_data_end ] stop
							 */

						} // End of branch "getAssets"

// Start of branch "log11"
						if (log11 != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "log11");
							}

///////////////////////		

							String[] row_tLogRow_1 = new String[26];

							if (log11.Id != null) { //
								row_tLogRow_1[0] = String.valueOf(log11.Id);

							} //

							row_tLogRow_1[1] = String.valueOf(log11.IsActive);

							if (log11.ProductCode != null) { //
								row_tLogRow_1[2] = String.valueOf(log11.ProductCode);

							} //

							if (log11.Brand_Haddad__c != null) { //
								row_tLogRow_1[3] = String.valueOf(log11.Brand_Haddad__c);

							} //

							if (log11.Family != null) { //
								row_tLogRow_1[4] = String.valueOf(log11.Family);

							} //

							if (log11.Warehouse_Available_Stock__c != null) { //
								row_tLogRow_1[5] = FormatterUtils.formatUnwithE(log11.Warehouse_Available_Stock__c);

							} //

							if (log11.Image_1_Link_Haddad__c != null) { //
								row_tLogRow_1[6] = String.valueOf(log11.Image_1_Link_Haddad__c);

							} //

							if (log11.Image_2_Link_Haddad__c != null) { //
								row_tLogRow_1[7] = String.valueOf(log11.Image_2_Link_Haddad__c);

							} //

							if (log11.Image_3_Link_Haddad__c != null) { //
								row_tLogRow_1[8] = String.valueOf(log11.Image_3_Link_Haddad__c);

							} //

							if (log11.Image_4_Link_Haddad__c != null) { //
								row_tLogRow_1[9] = String.valueOf(log11.Image_4_Link_Haddad__c);

							} //

							if (log11.Image_5_Link_Haddad__c != null) { //
								row_tLogRow_1[10] = String.valueOf(log11.Image_5_Link_Haddad__c);

							} //

							if (log11.Product_Code_External_Id__c != null) { //
								row_tLogRow_1[11] = String.valueOf(log11.Product_Code_External_Id__c);

							} //

							if (log11.Age_Group_Haddad__c != null) { //
								row_tLogRow_1[12] = String.valueOf(log11.Age_Group_Haddad__c);

							} //

							if (log11.Brand_Haddad__r_Name != null) { //
								row_tLogRow_1[13] = String.valueOf(log11.Brand_Haddad__r_Name);

							} //

							if (log11.Category_Haddad__r_Name != null) { //
								row_tLogRow_1[14] = String.valueOf(log11.Category_Haddad__r_Name);

							} //

							if (log11.Color_Code_Haddad__c != null) { //
								row_tLogRow_1[15] = String.valueOf(log11.Color_Code_Haddad__c);

							} //

							if (log11.Color_Haddad__r_Name != null) { //
								row_tLogRow_1[16] = String.valueOf(log11.Color_Haddad__r_Name);

							} //

							if (log11.Color_Haddad__r_Color_Name_External__c != null) { //
								row_tLogRow_1[17] = String.valueOf(log11.Color_Haddad__r_Color_Name_External__c);

							} //

							if (log11.Country_of_origin_Haddad__c != null) { //
								row_tLogRow_1[18] = String.valueOf(log11.Country_of_origin_Haddad__c);

							} //

							if (log11.Description != null) { //
								row_tLogRow_1[19] = String.valueOf(log11.Description);

							} //

							if (log11.Gender_Haddad__c != null) { //
								row_tLogRow_1[20] = String.valueOf(log11.Gender_Haddad__c);

							} //

							if (log11.Name != null) { //
								row_tLogRow_1[21] = String.valueOf(log11.Name);

							} //

							if (log11.Product_Status__c != null) { //
								row_tLogRow_1[22] = String.valueOf(log11.Product_Status__c);

							} //

							if (log11.Ref__c != null) { //
								row_tLogRow_1[23] = String.valueOf(log11.Ref__c);

							} //

							if (log11.Season_Product_Haddad__r_Name != null) { //
								row_tLogRow_1[24] = String.valueOf(log11.Season_Product_Haddad__r_Name);

							} //

							if (log11.Style_Haddad__r_Name != null) { //
								row_tLogRow_1[25] = String.valueOf(log11.Style_Haddad__r_Name);

							} //

							util_tLogRow_1.addRow(row_tLogRow_1);
							nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

						} // End of branch "log11"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

					} // End of branch "row1"

					/**
					 * [tUniqRow_1 process_data_end ] start
					 */

					currentComponent = "tUniqRow_1";

					/**
					 * [tUniqRow_1 process_data_end ] stop
					 */

					/**
					 * [tSalesforceInput_1 process_data_end ] start
					 */

					currentComponent = "tSalesforceInput_1";

					/**
					 * [tSalesforceInput_1 process_data_end ] stop
					 */

					/**
					 * [tSalesforceInput_1 end ] start
					 */

					currentComponent = "tSalesforceInput_1";

// end of generic

					resourceMap.put("finish_tSalesforceInput_1", Boolean.TRUE);

				} // while
				reader_tSalesforceInput_1.close();
				final java.util.Map<String, Object> resultMap_tSalesforceInput_1 = reader_tSalesforceInput_1
						.getReturnValues();
				if (resultMap_tSalesforceInput_1 != null) {
					for (java.util.Map.Entry<String, Object> entry_tSalesforceInput_1 : resultMap_tSalesforceInput_1
							.entrySet()) {
						switch (entry_tSalesforceInput_1.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "ERROR_MESSAGE",
									entry_tSalesforceInput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_LINE",
									entry_tSalesforceInput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_SUCCESS",
									entry_tSalesforceInput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_REJECT",
									entry_tSalesforceInput_1.getValue());
							break;
						default:
							StringBuilder studio_key_tSalesforceInput_1 = new StringBuilder();
							for (int i_tSalesforceInput_1 = 0; i_tSalesforceInput_1 < entry_tSalesforceInput_1.getKey()
									.length(); i_tSalesforceInput_1++) {
								char ch_tSalesforceInput_1 = entry_tSalesforceInput_1.getKey()
										.charAt(i_tSalesforceInput_1);
								if (Character.isUpperCase(ch_tSalesforceInput_1) && i_tSalesforceInput_1 > 0) {
									studio_key_tSalesforceInput_1.append('_');
								}
								studio_key_tSalesforceInput_1.append(ch_tSalesforceInput_1);
							}
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1",
									studio_key_tSalesforceInput_1.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tSalesforceInput_1.getValue());
							break;
						}
					}
				}

				ok_Hash.put("tSalesforceInput_1", true);
				end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());

				/**
				 * [tSalesforceInput_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tRESTClient_2 end ] start
				 */

				currentComponent = "tRESTClient_2";

				if (globalMap.get("tRESTClient_2_NB_LINE") == null) {
					globalMap.put("tRESTClient_2_NB_LINE", 1);
				}

// [tRESTCliend_end]
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "getAssets");
				}

				ok_Hash.put("tRESTClient_2", true);
				end_Hash.put("tRESTClient_2", System.currentTimeMillis());

				/**
				 * [tRESTClient_2 end ] stop
				 */

				/**
				 * [tExtractJSONFields_2 end ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tExtractJSONFields_2", true);
				end_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "log11");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceInput_1 finally ] start
				 */

				currentComponent = "tSalesforceInput_1";

// finally of generic

				if (resourceMap.get("finish_tSalesforceInput_1") == null) {
					if (resourceMap.get("reader_tSalesforceInput_1") != null) {
						try {
							((org.talend.components.api.component.runtime.Reader) resourceMap
									.get("reader_tSalesforceInput_1")).close();
						} catch (java.io.IOException e_tSalesforceInput_1) {
							String errorMessage_tSalesforceInput_1 = "failed to release the resource in tSalesforceInput_1 :"
									+ e_tSalesforceInput_1.getMessage();
							System.err.println(errorMessage_tSalesforceInput_1);
						}
					}
				}

				/**
				 * [tSalesforceInput_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tRESTClient_2 finally ] start
				 */

				currentComponent = "tRESTClient_2";

				/**
				 * [tRESTClient_2 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_2 finally ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				/**
				 * [tExtractJSONFields_2 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");
				if (conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String url_connectionStatsLogs = "jdbc:sqlserver://" + "neowise-testing.database.windows.net";
				String port_connectionStatsLogs = "1433";
				String dbname_connectionStatsLogs = "ads_hbe_erp";
				if (!"".equals(port_connectionStatsLogs)) {
					url_connectionStatsLogs += ":" + "1433";
				}
				if (!"".equals(dbname_connectionStatsLogs)) {

					url_connectionStatsLogs += ";databaseName=" + "ads_hbe_erp";
				}
				url_connectionStatsLogs += ";appName=" + projectName + ";" + "";
				String dbUser_connectionStatsLogs = "melusior";

				final String decryptedPassword_connectionStatsLogs = routines.system.PasswordEncryptUtil
						.decryptPassword(
								"ENC:[SYfZ2ZQSBiAGX2DtZKIG5p/A9JsF2NwnGNnZlMNV26iuvSzC9z9Gi2C7XxqhlylxfBK6+kqwtO4=]");
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				String sharedConnectionName_connectionStatsLogs = "StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"com.microsoft.sqlserver.jdbc.SQLServerDriver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("dbschema_connectionStatsLogs", "talend");

				globalMap.put("db_connectionStatsLogs", "ads_hbe_erp");

				globalMap.put("conn_connectionStatsLogs", conn_connectionStatsLogs);

				globalMap.put("shareIdentitySetting_connectionStatsLogs", false);

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct
			implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DEV_equilibrer = new byte[0];
		static byte[] commonByteArray_DEV_equilibrer = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_equilibrer.length) {
					if (length < 1024 && commonByteArray_DEV_equilibrer.length == 0) {
						commonByteArray_DEV_equilibrer = new byte[1024];
					} else {
						commonByteArray_DEV_equilibrer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_equilibrer, 0, length);
				strReturn = new String(commonByteArray_DEV_equilibrer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_equilibrer) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Main");
				}

				int tos_count_talendLogs_DB = 0;

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;
				int rejectedCount_talendLogs_DB = 0;
				String dbschema_talendLogs_DB = null;
				String tableName_talendLogs_DB = null;
				boolean whetherReject_talendLogs_DB = false;

				java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
				long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_talendLogs_DB;

				java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_talendLogs_DB = null;
				String dbUser_talendLogs_DB = null;
				dbschema_talendLogs_DB = (String) globalMap.get("dbschema_connectionStatsLogs");
				conn_talendLogs_DB = (java.sql.Connection) globalMap.get("conn_connectionStatsLogs");

				int batchSize_talendLogs_DB = 10000;
				int batchSizeCounter_talendLogs_DB = 0;

				if (dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
					tableName_talendLogs_DB = "log";
				} else {
					tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "log";
				}
				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "log" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }
							boolean whetherExist_talendLogs_DB = false;
							try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
								try {
									isExistStmt_talendLogs_DB
											.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]");
									whetherExist_talendLogs_DB = true;
								} catch (java.lang.Exception e) {
									whetherExist_talendLogs_DB = false;
								}
							}
							if (!whetherExist_talendLogs_DB) {
								try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement()) {
									stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB
											+ "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
								}
							}
							GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB
						+ "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "log" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,
						insert_talendLogs_DB, keyPsmt_talendLogs_DB);
				resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
				boolean isShareIdentity_talendLogs_DB = globalMap
						.get("shareIdentitySetting_connectionStatsLogs") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB main ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Main");
						}

						whetherReject_talendLogs_DB = false;
						if (row_talendLogs_LOGS.moment != null) {
							pstmt_talendLogs_DB.setTimestamp(1,
									new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
						} else {
							pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
						}

						if (row_talendLogs_LOGS.pid == null) {
							pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
						}

						if (row_talendLogs_LOGS.root_pid == null) {
							pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
						}

						if (row_talendLogs_LOGS.father_pid == null) {
							pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
						}

						if (row_talendLogs_LOGS.project == null) {
							pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
						}

						if (row_talendLogs_LOGS.job == null) {
							pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
						}

						if (row_talendLogs_LOGS.context == null) {
							pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
						}

						if (row_talendLogs_LOGS.priority == null) {
							pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
						}

						if (row_talendLogs_LOGS.type == null) {
							pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
						}

						if (row_talendLogs_LOGS.origin == null) {
							pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
						}

						if (row_talendLogs_LOGS.message == null) {
							pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
						}

						if (row_talendLogs_LOGS.code == null) {
							pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
						}

						pstmt_talendLogs_DB.addBatch();
						nb_line_talendLogs_DB++;

						batchSizeCounter_talendLogs_DB++;

						////////// batch execute by batch size///////
						class LimitBytesHelper_talendLogs_DB {
							public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									int countSum_talendLogs_DB = 0;
									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}

							public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}
						}
						if ((batchSize_talendLogs_DB > 0)
								&& (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {

							insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB()
									.limitBytePart1(insertedCount_talendLogs_DB, pstmt_talendLogs_DB);

							batchSizeCounter_talendLogs_DB = 0;
						}

						//////////// commit every////////////

						tos_count_talendLogs_DB++;

						/**
						 * [talendLogs_DB main ] stop
						 */

						/**
						 * [talendLogs_DB process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(String.format(
							"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				try {
					int countSum_talendLogs_DB = 0;
					if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {

						for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
							if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							countSum_talendLogs_DB += countEach_talendLogs_DB;
						}

					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_talendLogs_DB = 0;
					for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

					System.err.println(e.getMessage());

				}
				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);

				}
				resourceMap.put("statementClosed_talendLogs_DB", true);

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB + deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED", nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED", nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED", nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Main");
				}

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
					if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendLogs_DB")) != null) {
						pstmtToClose_talendLogs_DB.close();
					}
				}

				/**
				 * [talendLogs_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
		public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password,
				String dbConnectionName) throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
		}

		public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
				throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
		}
	};

	private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";

	{
		globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
	}

	public static void main(String[] args) {
		final equilibrer equilibrerClass = new equilibrer();

		int exitCode = equilibrerClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = equilibrer.class.getClassLoader()
					.getResourceAsStream("dev/equilibrer_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = equilibrer.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRESTClient_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRESTClient_1) {
			globalMap.put("tRESTClient_1_SUBPROCESS_STATE", -1);

			e_tRESTClient_1.printStackTrace();

		}
		try {
			errorCode = null;
			tSalesforceConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tSalesforceConnection_1) {
			globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", -1);

			e_tSalesforceConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : equilibrer");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));

		connections.put("conn_tSalesforceConnection_1", globalMap.get("conn_tSalesforceConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 330602 characters generated by Talend Open Studio for Data Integration on the
 * 13 décembre 2023 12:33:23 GMT
 ************************************************************************************************/