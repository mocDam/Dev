// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dev.ecom_renameasset_bynder_sujob_prod_debug_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG Purpose:
 * Ecom_RenameAsset_Bynder_SuJob_PROD<br>
 * Description: Ecom_RenameAsset_Bynder_SuJob_PROD <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status
 */
public class Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (LastRunDate != null) {

				this.setProperty("LastRunDate", LastRunDate.toString());

			}

			if (fileType != null) {

				this.setProperty("fileType", fileType.toString());

			}

			if (asset_LastRunFile != null) {

				this.setProperty("asset_LastRunFile", asset_LastRunFile.toString());

			}

			if (tempAsset_LastRunFile != null) {

				this.setProperty("tempAsset_LastRunFile", tempAsset_LastRunFile.toString());

			}

			if (File_Datetime != null) {

				this.setProperty("File_Datetime", File_Datetime.toString());

			}

			if (bynderDirectory != null) {

				this.setProperty("bynderDirectory", bynderDirectory.toString());

			}

			if (bynderSubDirectory != null) {

				this.setProperty("bynderSubDirectory", bynderSubDirectory.toString());

			}

			if (AssetFlag != null) {

				this.setProperty("AssetFlag", AssetFlag.toString());

			}

			if (SQLSERVER_LOG_AdditionalParams != null) {

				this.setProperty("SQLSERVER_LOG_AdditionalParams", SQLSERVER_LOG_AdditionalParams.toString());

			}

			if (SQLSERVER_LOG_Database != null) {

				this.setProperty("SQLSERVER_LOG_Database", SQLSERVER_LOG_Database.toString());

			}

			if (SQLSERVER_LOG_Login != null) {

				this.setProperty("SQLSERVER_LOG_Login", SQLSERVER_LOG_Login.toString());

			}

			if (SQLSERVER_LOG_Password != null) {

				this.setProperty("SQLSERVER_LOG_Password", SQLSERVER_LOG_Password.toString());

			}

			if (SQLSERVER_LOG_Port != null) {

				this.setProperty("SQLSERVER_LOG_Port", SQLSERVER_LOG_Port.toString());

			}

			if (SQLSERVER_LOG_Schema != null) {

				this.setProperty("SQLSERVER_LOG_Schema", SQLSERVER_LOG_Schema.toString());

			}

			if (SQLSERVER_LOG_Server != null) {

				this.setProperty("SQLSERVER_LOG_Server", SQLSERVER_LOG_Server.toString());

			}

		}

		public String LastRunDate;

		public String getLastRunDate() {
			return this.LastRunDate;
		}

		public String fileType;

		public String getFileType() {
			return this.fileType;
		}

		public String asset_LastRunFile;

		public String getAsset_LastRunFile() {
			return this.asset_LastRunFile;
		}

		public String tempAsset_LastRunFile;

		public String getTempAsset_LastRunFile() {
			return this.tempAsset_LastRunFile;
		}

		public String File_Datetime;

		public String getFile_Datetime() {
			return this.File_Datetime;
		}

		public String bynderDirectory;

		public String getBynderDirectory() {
			return this.bynderDirectory;
		}

		public String bynderSubDirectory;

		public String getBynderSubDirectory() {
			return this.bynderSubDirectory;
		}

		public String AssetFlag;

		public String getAssetFlag() {
			return this.AssetFlag;
		}

		public String SQLSERVER_LOG_AdditionalParams;

		public String getSQLSERVER_LOG_AdditionalParams() {
			return this.SQLSERVER_LOG_AdditionalParams;
		}

		public String SQLSERVER_LOG_Database;

		public String getSQLSERVER_LOG_Database() {
			return this.SQLSERVER_LOG_Database;
		}

		public String SQLSERVER_LOG_Login;

		public String getSQLSERVER_LOG_Login() {
			return this.SQLSERVER_LOG_Login;
		}

		public java.lang.String SQLSERVER_LOG_Password;

		public java.lang.String getSQLSERVER_LOG_Password() {
			return this.SQLSERVER_LOG_Password;
		}

		public String SQLSERVER_LOG_Port;

		public String getSQLSERVER_LOG_Port() {
			return this.SQLSERVER_LOG_Port;
		}

		public String SQLSERVER_LOG_Schema;

		public String getSQLSERVER_LOG_Schema() {
			return this.SQLSERVER_LOG_Schema;
		}

		public String SQLSERVER_LOG_Server;

		public String getSQLSERVER_LOG_Server() {
			return this.SQLSERVER_LOG_Server;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileProperties_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileProperties_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon process_data_begin ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_begin ] stop
				 */

				/**
				 * [preStaLogCon process_data_end ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_end ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public static class copyOfoutputStruct implements routines.system.IPersistableRow<copyOfoutputStruct> {
		final static byte[] commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];
		static byte[] commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		public String File_Datetime;

		public String getFile_Datetime() {
			return this.File_Datetime;
		}

		public String NewAssetName;

		public String getNewAssetName() {
			return this.NewAssetName;
		}

		public String FileExtenstion;

		public String getFileExtenstion() {
			return this.FileExtenstion;
		}

		public String StyleColor;

		public String getStyleColor() {
			return this.StyleColor;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length) {
					if (length < 1024 && commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length == 0) {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[1024];
					} else {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length);
				strReturn = new String(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

					this.File_Datetime = readString(dis);

					this.NewAssetName = readString(dis);

					this.FileExtenstion = readString(dis);

					this.StyleColor = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

				// String

				writeString(this.File_Datetime, dos);

				// String

				writeString(this.NewAssetName, dos);

				// String

				writeString(this.FileExtenstion, dos);

				// String

				writeString(this.StyleColor, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append(",File_Datetime=" + File_Datetime);
			sb.append(",NewAssetName=" + NewAssetName);
			sb.append(",FileExtenstion=" + FileExtenstion);
			sb.append(",StyleColor=" + StyleColor);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfoutputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];
		static byte[] commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		public String File_Datetime;

		public String getFile_Datetime() {
			return this.File_Datetime;
		}

		public String StyleColor;

		public String getStyleColor() {
			return this.StyleColor;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length) {
					if (length < 1024 && commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length == 0) {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[1024];
					} else {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length);
				strReturn = new String(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

					this.File_Datetime = readString(dis);

					this.StyleColor = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

				// String

				writeString(this.File_Datetime, dos);

				// String

				writeString(this.StyleColor, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append(",File_Datetime=" + File_Datetime);
			sb.append(",StyleColor=" + StyleColor);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];
		static byte[] commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length) {
					if (length < 1024 && commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length == 0) {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[1024];
					} else {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length);
				strReturn = new String(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row4Struct row4 = new row4Struct();
				copyOfoutputStruct copyOfoutput = new copyOfoutputStruct();

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tFileProperties_2 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());

				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;

				String directory_tFileList_2 = "N:/HADDAD/Bynder Assets/hors eCom/image/01Front/FlatShot";
				final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_2.add("*.png");
				maskList_tFileList_2.add("*.jpg");
				maskList_tFileList_2.add("*.jpeg");
				for (final String filemask_tFileList_2 : maskList_tFileList_2) {
					String filemask_compile_tFileList_2 = filemask_tFileList_2;

					filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(
							filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_2, java.util.regex.Pattern.CASE_INSENSITIVE);

					patternList_tFileList_2.add(fileNamePattern_tFileList_2);
				}
				int NB_FILEtFileList_2 = 0;

				final boolean case_sensitive_tFileList_2 = false;
				final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
				java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);

				file_tFileList_2.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_2 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
								if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()) {
									if (!filePath_tFileList_2.contains(file.getAbsolutePath())) {
										list_tFileList_2.add(file);
										filePath_tFileList_2.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_2);

				for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++) {
					java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
					String fileName_tFileList_2 = files_tFileList_2.getName();

					String currentFileName_tFileList_2 = files_tFileList_2.getName();
					String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
					String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
					String currentFileExtension_tFileList_2 = null;

					if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()) {
						currentFileExtension_tFileList_2 = files_tFileList_2.getName()
								.substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_2 = "";
					}

					NB_FILEtFileList_2++;
					globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
					globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

					/**
					 * [tFileList_2 begin ] stop
					 */

					/**
					 * [tFileList_2 main ] start
					 */

					currentComponent = "tFileList_2";

					tos_count_tFileList_2++;

					/**
					 * [tFileList_2 main ] stop
					 */

					/**
					 * [tFileList_2 process_data_begin ] start
					 */

					currentComponent = "tFileList_2";

					/**
					 * [tFileList_2 process_data_begin ] stop
					 */
					NB_ITERATE_tFileProperties_2++;

					if (execStat) {
						runStat.updateStatOnConnection("row4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("copyOfoutput", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileProperties_2);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileCopy_2 begin ] start
					 */

					ok_Hash.put("tFileCopy_2", false);
					start_Hash.put("tFileCopy_2", System.currentTimeMillis());

					currentComponent = "tFileCopy_2";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfoutput");
					}

					int tos_count_tFileCopy_2 = 0;

					/**
					 * [tFileCopy_2 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
					}

					int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_1__Struct {
						String var1;
						String Style_Code;
						String Color_Code;
						String FileExtenstion;
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
					copyOfoutputStruct copyOfoutput_tmp = new copyOfoutputStruct();
// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tJavaRow_2 begin ] start
					 */

					ok_Hash.put("tJavaRow_2", false);
					start_Hash.put("tJavaRow_2", System.currentTimeMillis());

					currentComponent = "tJavaRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
					}

					int tos_count_tJavaRow_2 = 0;

					int nb_line_tJavaRow_2 = 0;

					/**
					 * [tJavaRow_2 begin ] stop
					 */

					/**
					 * [tFileProperties_2 begin ] start
					 */

					ok_Hash.put("tFileProperties_2", false);
					start_Hash.put("tFileProperties_2", System.currentTimeMillis());

					currentComponent = "tFileProperties_2";

					int tos_count_tFileProperties_2 = 0;

					java.io.File file_tFileProperties_2 = new java.io.File(
							(String) globalMap.get("tFileList_2_CURRENT_FILEPATH"));
					row2 = new row2Struct();

					if (file_tFileProperties_2.exists()) {
						row2.abs_path = file_tFileProperties_2.getAbsolutePath();
						row2.dirname = file_tFileProperties_2.getParent();
						row2.basename = file_tFileProperties_2.getName();
						String r_tFileProperties_2 = (file_tFileProperties_2.canRead()) ? "r" : "-";
						String w_tFileProperties_2 = (file_tFileProperties_2.canWrite()) ? "w" : "-";
						// String x_ = (file_.canExecute())?"x":"-"; /*since JDK1.6*/
						row2.mode_string = r_tFileProperties_2 + w_tFileProperties_2;
						row2.size = file_tFileProperties_2.length();
						row2.mtime = file_tFileProperties_2.lastModified();
						row2.mtime_string = (new java.util.Date(file_tFileProperties_2.lastModified())).toString();

					}

					/**
					 * [tFileProperties_2 begin ] stop
					 */

					/**
					 * [tFileProperties_2 main ] start
					 */

					currentComponent = "tFileProperties_2";

					tos_count_tFileProperties_2++;

					/**
					 * [tFileProperties_2 main ] stop
					 */

					/**
					 * [tFileProperties_2 process_data_begin ] start
					 */

					currentComponent = "tFileProperties_2";

					/**
					 * [tFileProperties_2 process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_2 main ] start
					 */

					currentComponent = "tJavaRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
					}

					// Code generated according to input schema and output schema

					row4.abs_path = row2.abs_path;
					row4.dirname = row2.dirname;
					row4.basename = row2.basename;
					row4.mode_string = row2.mode_string;
					row4.size = row2.size;
					row4.mtime = row2.mtime;
					row4.mtime_string = row2.mtime_string;
					row4.File_Datetime = TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",
							TalendDate.parseDateLocale("EEE MMM dd HH:mm:ss z yyyy", row4.mtime_string, "EN"));

					context.File_Datetime = TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",
							TalendDate.parseDateLocale("EEE MMM dd HH:mm:ss z yyyy", row4.mtime_string, "EN"));

					System.out.println(" CODE" + StringHandling.INDEX(row4.basename, "PLV"));

					if (StringHandling.INDEX(row4.basename, "PLV") > 0) {
						row4.StyleColor = StringHandling.LEFT(row4.basename,
								StringHandling.INDEX(row4.basename, "PLV") - 1) + "-PLV";

					} else {

						row4.StyleColor = StringHandling.LEFT(row4.basename, 6) + "-"
								+ StringHandling.RIGHT(StringHandling.LEFT(row4.basename, 10), 3);

					}

					System.out.println("StyleColor   " + row4.StyleColor);
					nb_line_tJavaRow_2++;

					tos_count_tJavaRow_2++;

					/**
					 * [tJavaRow_2 main ] stop
					 */

					/**
					 * [tJavaRow_2 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_2";

					/**
					 * [tJavaRow_2 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;
						Var.var1 = row4.basename;
						Var.Style_Code = StringHandling.INDEX("PLV", row4.basename) > 0
								? StringHandling.LEFT(row4.basename, StringHandling.INDEX("PLV", row4.basename))
								: StringHandling.LEFT(row4.basename, 6);
						Var.Color_Code = StringHandling.INDEX("PLV", row4.basename) > 0 ? "PLV"
								: StringHandling.RIGHT(StringHandling.LEFT(row4.basename, 10), 3);
						Var.FileExtenstion = row4.basename.substring(row4.basename.indexOf("."),
								StringHandling.LEN(row4.basename));// ###############################
						// ###############################
						// # Output tables

						copyOfoutput = null;

// # Output table : 'copyOfoutput'
// # Filter conditions 
						if (

						Relational.NOT(Var.FileExtenstion.equals("CSV") || Var.FileExtenstion.equals("csv"))

						) {
							copyOfoutput_tmp.abs_path = row4.abs_path;
							copyOfoutput_tmp.dirname = row4.dirname;
							copyOfoutput_tmp.basename = row4.basename;
							copyOfoutput_tmp.mode_string = row4.mode_string;
							copyOfoutput_tmp.size = row4.size;
							copyOfoutput_tmp.mtime = row4.mtime;
							copyOfoutput_tmp.mtime_string = row4.mtime_string;
							copyOfoutput_tmp.File_Datetime = row4.File_Datetime;
							copyOfoutput_tmp.NewAssetName = Var.Style_Code + "-" + Var.Color_Code + context.AssetFlag;
							copyOfoutput_tmp.FileExtenstion = Var.FileExtenstion;
							copyOfoutput_tmp.StyleColor = row4.StyleColor;
							copyOfoutput = copyOfoutput_tmp;
						} // closing filter/reject
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
// Start of branch "copyOfoutput"
					if (copyOfoutput != null) {

						/**
						 * [tFileCopy_2 main ] start
						 */

						currentComponent = "tFileCopy_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfoutput");
						}

						String srcFileName_tFileCopy_2 = context.bynderSubDirectory + copyOfoutput.basename;

						java.io.File srcFile_tFileCopy_2 = new java.io.File(srcFileName_tFileCopy_2);

						// here need check first, before mkdirs().
						if (!srcFile_tFileCopy_2.exists() || !srcFile_tFileCopy_2.isFile()) {
							String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2 = String.format(
									"The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_2);
							System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2);
						}
						String desDirName_tFileCopy_2 = context.bynderDirectory + "/image/temp/";

						String desFileName_tFileCopy_2 = copyOfoutput.NewAssetName + copyOfoutput.FileExtenstion;

						if (desFileName_tFileCopy_2 != null && ("").equals(desFileName_tFileCopy_2.trim())) {
							desFileName_tFileCopy_2 = "NewName.temp";
						}

						java.io.File desFile_tFileCopy_2 = new java.io.File(desDirName_tFileCopy_2,
								desFileName_tFileCopy_2);

						if (!srcFile_tFileCopy_2.getPath().equals(desFile_tFileCopy_2.getPath())) {
							java.io.File parentFile_tFileCopy_2 = desFile_tFileCopy_2.getParentFile();

							if (parentFile_tFileCopy_2 != null && !parentFile_tFileCopy_2.exists()) {
								parentFile_tFileCopy_2.mkdirs();
							}
							try {
								org.talend.FileCopy.copyFile(srcFile_tFileCopy_2.getPath(),
										desFile_tFileCopy_2.getPath(), false);
							} catch (Exception e) {
								System.err.println("tFileCopy_2 " + e.getMessage());
							}

						}
						globalMap.put("tFileCopy_2_DESTINATION_FILEPATH", desFile_tFileCopy_2.getPath());
						globalMap.put("tFileCopy_2_DESTINATION_FILENAME", desFile_tFileCopy_2.getName());

						globalMap.put("tFileCopy_2_SOURCE_DIRECTORY", srcFile_tFileCopy_2.getParent());
						globalMap.put("tFileCopy_2_DESTINATION_DIRECTORY", desFile_tFileCopy_2.getParent());

						tos_count_tFileCopy_2++;

						/**
						 * [tFileCopy_2 main ] stop
						 */

						/**
						 * [tFileCopy_2 process_data_begin ] start
						 */

						currentComponent = "tFileCopy_2";

						/**
						 * [tFileCopy_2 process_data_begin ] stop
						 */

						/**
						 * [tFileCopy_2 process_data_end ] start
						 */

						currentComponent = "tFileCopy_2";

						/**
						 * [tFileCopy_2 process_data_end ] stop
						 */

					} // End of branch "copyOfoutput"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tJavaRow_2 process_data_end ] start
					 */

					currentComponent = "tJavaRow_2";

					/**
					 * [tJavaRow_2 process_data_end ] stop
					 */

					/**
					 * [tFileProperties_2 process_data_end ] start
					 */

					currentComponent = "tFileProperties_2";

					/**
					 * [tFileProperties_2 process_data_end ] stop
					 */

					/**
					 * [tFileProperties_2 end ] start
					 */

					currentComponent = "tFileProperties_2";

					ok_Hash.put("tFileProperties_2", true);
					end_Hash.put("tFileProperties_2", System.currentTimeMillis());

					/**
					 * [tFileProperties_2 end ] stop
					 */

					/**
					 * [tJavaRow_2 end ] start
					 */

					currentComponent = "tJavaRow_2";

					globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
					}

					ok_Hash.put("tJavaRow_2", true);
					end_Hash.put("tJavaRow_2", System.currentTimeMillis());

					/**
					 * [tJavaRow_2 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
					}

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tFileCopy_2 end ] start
					 */

					currentComponent = "tFileCopy_2";

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfoutput");
					}

					ok_Hash.put("tFileCopy_2", true);
					end_Hash.put("tFileCopy_2", System.currentTimeMillis());

					/**
					 * [tFileCopy_2 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileProperties_2);
					}

					/**
					 * [tFileList_2 process_data_end ] start
					 */

					currentComponent = "tFileList_2";

					/**
					 * [tFileList_2 process_data_end ] stop
					 */

					/**
					 * [tFileList_2 end ] start
					 */

					currentComponent = "tFileList_2";

				}
				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_2 finally ] start
				 */

				currentComponent = "tFileList_2";

				/**
				 * [tFileList_2 finally ] stop
				 */

				/**
				 * [tFileProperties_2 finally ] start
				 */

				currentComponent = "tFileProperties_2";

				/**
				 * [tFileProperties_2 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileCopy_2 finally ] start
				 */

				currentComponent = "tFileCopy_2";

				/**
				 * [tFileCopy_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfoutput_0Struct implements routines.system.IPersistableRow<copyOfoutput_0Struct> {
		final static byte[] commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];
		static byte[] commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		public String File_Datetime;

		public String getFile_Datetime() {
			return this.File_Datetime;
		}

		public String NewAssetName;

		public String getNewAssetName() {
			return this.NewAssetName;
		}

		public String FileExtenstion;

		public String getFileExtenstion() {
			return this.FileExtenstion;
		}

		public String StyleColor;

		public String getStyleColor() {
			return this.StyleColor;
		}

		public String AssetSuffix;

		public String getAssetSuffix() {
			return this.AssetSuffix;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length) {
					if (length < 1024 && commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length == 0) {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[1024];
					} else {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length);
				strReturn = new String(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

					this.File_Datetime = readString(dis);

					this.NewAssetName = readString(dis);

					this.FileExtenstion = readString(dis);

					this.StyleColor = readString(dis);

					this.AssetSuffix = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

				// String

				writeString(this.File_Datetime, dos);

				// String

				writeString(this.NewAssetName, dos);

				// String

				writeString(this.FileExtenstion, dos);

				// String

				writeString(this.StyleColor, dos);

				// String

				writeString(this.AssetSuffix, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append(",File_Datetime=" + File_Datetime);
			sb.append(",NewAssetName=" + NewAssetName);
			sb.append(",FileExtenstion=" + FileExtenstion);
			sb.append(",StyleColor=" + StyleColor);
			sb.append(",AssetSuffix=" + AssetSuffix);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfoutput_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];
		static byte[] commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		public String File_Datetime;

		public String getFile_Datetime() {
			return this.File_Datetime;
		}

		public String StyleColor;

		public String getStyleColor() {
			return this.StyleColor;
		}

		public String AssetSuffix;

		public String getAssetSuffix() {
			return this.AssetSuffix;
		}

		public String AssetFlag;

		public String getAssetFlag() {
			return this.AssetFlag;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length) {
					if (length < 1024 && commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length == 0) {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[1024];
					} else {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length);
				strReturn = new String(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

					this.File_Datetime = readString(dis);

					this.StyleColor = readString(dis);

					this.AssetSuffix = readString(dis);

					this.AssetFlag = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

				// String

				writeString(this.File_Datetime, dos);

				// String

				writeString(this.StyleColor, dos);

				// String

				writeString(this.AssetSuffix, dos);

				// String

				writeString(this.AssetFlag, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append(",File_Datetime=" + File_Datetime);
			sb.append(",StyleColor=" + StyleColor);
			sb.append(",AssetSuffix=" + AssetSuffix);
			sb.append(",AssetFlag=" + AssetFlag);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];
		static byte[] commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length) {
					if (length < 1024 && commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length == 0) {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[1024];
					} else {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length);
				strReturn = new String(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();
				copyOfoutput_0Struct copyOfoutput_0 = new copyOfoutput_0Struct();

				/**
				 * [tFileList_3 begin ] start
				 */

				int NB_ITERATE_tFileProperties_3 = 0; // for statistics

				ok_Hash.put("tFileList_3", false);
				start_Hash.put("tFileList_3", System.currentTimeMillis());

				currentComponent = "tFileList_3";

				int tos_count_tFileList_3 = 0;

				String directory_tFileList_3 = "N:/HADDAD/Bynder Assets/hors eCom/image/01Front/FlatShot";
				final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_3 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_3.add("*.png");
				maskList_tFileList_3.add("*.jpg");
				maskList_tFileList_3.add("*.jpeg");
				for (final String filemask_tFileList_3 : maskList_tFileList_3) {
					String filemask_compile_tFileList_3 = filemask_tFileList_3;

					filemask_compile_tFileList_3 = org.apache.oro.text.GlobCompiler.globToPerl5(
							filemask_tFileList_3.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_3, java.util.regex.Pattern.CASE_INSENSITIVE);

					patternList_tFileList_3.add(fileNamePattern_tFileList_3);
				}
				int NB_FILEtFileList_3 = 0;

				final boolean case_sensitive_tFileList_3 = false;
				final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_3 = new java.util.HashSet<String>();
				java.io.File file_tFileList_3 = new java.io.File(directory_tFileList_3);

				file_tFileList_3.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_3 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_3 : patternList_tFileList_3) {
								if (fileNamePattern_tFileList_3.matcher(fileName_tFileList_3).matches()) {
									if (!filePath_tFileList_3.contains(file.getAbsolutePath())) {
										list_tFileList_3.add(file);
										filePath_tFileList_3.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_3);

				for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3.size(); i_tFileList_3++) {
					java.io.File files_tFileList_3 = list_tFileList_3.get(i_tFileList_3);
					String fileName_tFileList_3 = files_tFileList_3.getName();

					String currentFileName_tFileList_3 = files_tFileList_3.getName();
					String currentFilePath_tFileList_3 = files_tFileList_3.getAbsolutePath();
					String currentFileDirectory_tFileList_3 = files_tFileList_3.getParent();
					String currentFileExtension_tFileList_3 = null;

					if (files_tFileList_3.getName().contains(".") && files_tFileList_3.isFile()) {
						currentFileExtension_tFileList_3 = files_tFileList_3.getName()
								.substring(files_tFileList_3.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_3 = "";
					}

					NB_FILEtFileList_3++;
					globalMap.put("tFileList_3_CURRENT_FILE", currentFileName_tFileList_3);
					globalMap.put("tFileList_3_CURRENT_FILEPATH", currentFilePath_tFileList_3);
					globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_3);
					globalMap.put("tFileList_3_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_3);
					globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);

					/**
					 * [tFileList_3 begin ] stop
					 */

					/**
					 * [tFileList_3 main ] start
					 */

					currentComponent = "tFileList_3";

					tos_count_tFileList_3++;

					/**
					 * [tFileList_3 main ] stop
					 */

					/**
					 * [tFileList_3 process_data_begin ] start
					 */

					currentComponent = "tFileList_3";

					/**
					 * [tFileList_3 process_data_begin ] stop
					 */
					NB_ITERATE_tFileProperties_3++;

					if (execStat) {
						runStat.updateStatOnConnection("row6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("copyOfoutput_0", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row7", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tFileProperties_3);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileCopy_3 begin ] start
					 */

					ok_Hash.put("tFileCopy_3", false);
					start_Hash.put("tFileCopy_3", System.currentTimeMillis());

					currentComponent = "tFileCopy_3";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfoutput_0");
					}

					int tos_count_tFileCopy_3 = 0;

					/**
					 * [tFileCopy_3 begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());

					currentComponent = "tMap_2";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
					}

					int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
					class Var__tMap_2__Struct {
						String var1;
						String Style_Code;
						String Color_Code;
						String FileExtenstion;
					}
					Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
					copyOfoutput_0Struct copyOfoutput_0_tmp = new copyOfoutput_0Struct();
// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [tJavaRow_4 begin ] start
					 */

					ok_Hash.put("tJavaRow_4", false);
					start_Hash.put("tJavaRow_4", System.currentTimeMillis());

					currentComponent = "tJavaRow_4";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
					}

					int tos_count_tJavaRow_4 = 0;

					int nb_line_tJavaRow_4 = 0;

					/**
					 * [tJavaRow_4 begin ] stop
					 */

					/**
					 * [tFileProperties_3 begin ] start
					 */

					ok_Hash.put("tFileProperties_3", false);
					start_Hash.put("tFileProperties_3", System.currentTimeMillis());

					currentComponent = "tFileProperties_3";

					int tos_count_tFileProperties_3 = 0;

					java.io.File file_tFileProperties_3 = new java.io.File(
							(String) globalMap.get("tFileList_3_CURRENT_FILEPATH"));
					row6 = new row6Struct();

					if (file_tFileProperties_3.exists()) {
						row6.abs_path = file_tFileProperties_3.getAbsolutePath();
						row6.dirname = file_tFileProperties_3.getParent();
						row6.basename = file_tFileProperties_3.getName();
						String r_tFileProperties_3 = (file_tFileProperties_3.canRead()) ? "r" : "-";
						String w_tFileProperties_3 = (file_tFileProperties_3.canWrite()) ? "w" : "-";
						// String x_ = (file_.canExecute())?"x":"-"; /*since JDK1.6*/
						row6.mode_string = r_tFileProperties_3 + w_tFileProperties_3;
						row6.size = file_tFileProperties_3.length();
						row6.mtime = file_tFileProperties_3.lastModified();
						row6.mtime_string = (new java.util.Date(file_tFileProperties_3.lastModified())).toString();

					}

					/**
					 * [tFileProperties_3 begin ] stop
					 */

					/**
					 * [tFileProperties_3 main ] start
					 */

					currentComponent = "tFileProperties_3";

					tos_count_tFileProperties_3++;

					/**
					 * [tFileProperties_3 main ] stop
					 */

					/**
					 * [tFileProperties_3 process_data_begin ] start
					 */

					currentComponent = "tFileProperties_3";

					/**
					 * [tFileProperties_3 process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_4 main ] start
					 */

					currentComponent = "tJavaRow_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
					}

					// Code generated according to input schema and output schema

					row7.abs_path = row6.abs_path;
					row7.dirname = row6.dirname;
					row7.basename = row6.basename;
					row7.mode_string = row6.mode_string;
					row7.size = row6.size;
					row7.mtime = row6.mtime;
					row7.mtime_string = row6.mtime_string;
					row7.File_Datetime = TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",
							TalendDate.parseDateLocale("EEE MMM dd HH:mm:ss z yyyy", row7.mtime_string, "EN"));

					context.File_Datetime = TalendDate.formatDate("yyyy-MM-dd HH:mm:ss",
							TalendDate.parseDateLocale("EEE MMM dd HH:mm:ss z yyyy", row7.mtime_string, "EN"));

					row7.StyleColor = StringHandling.LEFT(row7.basename, 6) + "-"
							+ StringHandling.RIGHT(StringHandling.LEFT(row7.basename, 10), 3);

					row7.AssetFlag = context.AssetFlag;

					if (globalMap.containsKey(row7.StyleColor)) {
						globalMap.put(row7.StyleColor, (Integer) globalMap.get(row7.StyleColor) + 1);

						row7.AssetSuffix = "" + (Integer) globalMap.get(row7.StyleColor);

					} else {

						row7.AssetSuffix = "1";
						globalMap.put(row7.StyleColor, 1);

					}

					nb_line_tJavaRow_4++;

					tos_count_tJavaRow_4++;

					/**
					 * [tJavaRow_4 main ] stop
					 */

					/**
					 * [tJavaRow_4 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_4";

					/**
					 * [tJavaRow_4 process_data_begin ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;
						Var.var1 = row7.basename;
						Var.Style_Code = StringHandling.LEFT(row7.basename, 6);
						Var.Color_Code = StringHandling.RIGHT(StringHandling.LEFT(row7.basename, 10), 3);
						Var.FileExtenstion = row7.basename.substring(row7.basename.indexOf("."),
								StringHandling.LEN(row7.basename));// ###############################
						// ###############################
						// # Output tables

						copyOfoutput_0 = null;

// # Output table : 'copyOfoutput_0'
// # Filter conditions 
						if (

						Relational.NOT(Var.FileExtenstion.equals("CSV") || Var.FileExtenstion.equals("csv"))

						) {
							copyOfoutput_0_tmp.abs_path = row7.abs_path;
							copyOfoutput_0_tmp.dirname = row7.dirname;
							copyOfoutput_0_tmp.basename = row7.basename;
							copyOfoutput_0_tmp.mode_string = row7.mode_string;
							copyOfoutput_0_tmp.size = row7.size;
							copyOfoutput_0_tmp.mtime = row7.mtime;
							copyOfoutput_0_tmp.mtime_string = row7.mtime_string;
							copyOfoutput_0_tmp.File_Datetime = row7.File_Datetime;
							copyOfoutput_0_tmp.NewAssetName = Var.Style_Code + "-" + Var.Color_Code + context.AssetFlag
									+ row7.AssetSuffix;
							copyOfoutput_0_tmp.FileExtenstion = Var.FileExtenstion;
							copyOfoutput_0_tmp.StyleColor = row7.StyleColor;
							copyOfoutput_0_tmp.AssetSuffix = row7.AssetSuffix;
							copyOfoutput_0 = copyOfoutput_0_tmp;
						} // closing filter/reject
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */

					/**
					 * [tMap_2 process_data_begin ] start
					 */

					currentComponent = "tMap_2";

					/**
					 * [tMap_2 process_data_begin ] stop
					 */
// Start of branch "copyOfoutput_0"
					if (copyOfoutput_0 != null) {

						/**
						 * [tFileCopy_3 main ] start
						 */

						currentComponent = "tFileCopy_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfoutput_0");
						}

						String srcFileName_tFileCopy_3 = context.bynderSubDirectory + copyOfoutput_0.basename;

						java.io.File srcFile_tFileCopy_3 = new java.io.File(srcFileName_tFileCopy_3);

						// here need check first, before mkdirs().
						if (!srcFile_tFileCopy_3.exists() || !srcFile_tFileCopy_3.isFile()) {
							String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_3 = String.format(
									"The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_3);
							System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_3);
						}
						String desDirName_tFileCopy_3 = context.bynderDirectory + "/image/temp/";

						String desFileName_tFileCopy_3 = copyOfoutput_0.NewAssetName + copyOfoutput_0.FileExtenstion;

						if (desFileName_tFileCopy_3 != null && ("").equals(desFileName_tFileCopy_3.trim())) {
							desFileName_tFileCopy_3 = "NewName.temp";
						}

						java.io.File desFile_tFileCopy_3 = new java.io.File(desDirName_tFileCopy_3,
								desFileName_tFileCopy_3);

						if (!srcFile_tFileCopy_3.getPath().equals(desFile_tFileCopy_3.getPath())) {
							java.io.File parentFile_tFileCopy_3 = desFile_tFileCopy_3.getParentFile();

							if (parentFile_tFileCopy_3 != null && !parentFile_tFileCopy_3.exists()) {
								parentFile_tFileCopy_3.mkdirs();
							}
							try {
								org.talend.FileCopy.copyFile(srcFile_tFileCopy_3.getPath(),
										desFile_tFileCopy_3.getPath(), false);
							} catch (Exception e) {
								System.err.println("tFileCopy_3 " + e.getMessage());
							}

						}
						globalMap.put("tFileCopy_3_DESTINATION_FILEPATH", desFile_tFileCopy_3.getPath());
						globalMap.put("tFileCopy_3_DESTINATION_FILENAME", desFile_tFileCopy_3.getName());

						globalMap.put("tFileCopy_3_SOURCE_DIRECTORY", srcFile_tFileCopy_3.getParent());
						globalMap.put("tFileCopy_3_DESTINATION_DIRECTORY", desFile_tFileCopy_3.getParent());

						tos_count_tFileCopy_3++;

						/**
						 * [tFileCopy_3 main ] stop
						 */

						/**
						 * [tFileCopy_3 process_data_begin ] start
						 */

						currentComponent = "tFileCopy_3";

						/**
						 * [tFileCopy_3 process_data_begin ] stop
						 */

						/**
						 * [tFileCopy_3 process_data_end ] start
						 */

						currentComponent = "tFileCopy_3";

						/**
						 * [tFileCopy_3 process_data_end ] stop
						 */

					} // End of branch "copyOfoutput_0"

					/**
					 * [tMap_2 process_data_end ] start
					 */

					currentComponent = "tMap_2";

					/**
					 * [tMap_2 process_data_end ] stop
					 */

					/**
					 * [tJavaRow_4 process_data_end ] start
					 */

					currentComponent = "tJavaRow_4";

					/**
					 * [tJavaRow_4 process_data_end ] stop
					 */

					/**
					 * [tFileProperties_3 process_data_end ] start
					 */

					currentComponent = "tFileProperties_3";

					/**
					 * [tFileProperties_3 process_data_end ] stop
					 */

					/**
					 * [tFileProperties_3 end ] start
					 */

					currentComponent = "tFileProperties_3";

					ok_Hash.put("tFileProperties_3", true);
					end_Hash.put("tFileProperties_3", System.currentTimeMillis());

					/**
					 * [tFileProperties_3 end ] stop
					 */

					/**
					 * [tJavaRow_4 end ] start
					 */

					currentComponent = "tJavaRow_4";

					globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);
					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
					}

					ok_Hash.put("tJavaRow_4", true);
					end_Hash.put("tJavaRow_4", System.currentTimeMillis());

					/**
					 * [tJavaRow_4 end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
					}

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tFileCopy_3 end ] start
					 */

					currentComponent = "tFileCopy_3";

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfoutput_0");
					}

					ok_Hash.put("tFileCopy_3", true);
					end_Hash.put("tFileCopy_3", System.currentTimeMillis());

					/**
					 * [tFileCopy_3 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tFileProperties_3);
					}

					/**
					 * [tFileList_3 process_data_end ] start
					 */

					currentComponent = "tFileList_3";

					/**
					 * [tFileList_3 process_data_end ] stop
					 */

					/**
					 * [tFileList_3 end ] start
					 */

					currentComponent = "tFileList_3";

				}
				globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);

				ok_Hash.put("tFileList_3", true);
				end_Hash.put("tFileList_3", System.currentTimeMillis());

				/**
				 * [tFileList_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_3 finally ] start
				 */

				currentComponent = "tFileList_3";

				/**
				 * [tFileList_3 finally ] stop
				 */

				/**
				 * [tFileProperties_3 finally ] start
				 */

				currentComponent = "tFileProperties_3";

				/**
				 * [tFileProperties_3 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileCopy_3 finally ] start
				 */

				currentComponent = "tFileCopy_3";

				/**
				 * [tFileCopy_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				String AssetFlag = "_F_F";

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				if (StringHandling.RIGHT(context.AssetFlag, 2).equals("_D")) {

					if (execStat) {
						runStat.updateStatOnConnection("If2", 0, "true");
					}

					tFileList_3Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If2", 0, "false");
					}
				}
				if (StringHandling.RIGHT("_F_F", 2).equals("_F")
						|| StringHandling.RIGHT(context.AssetFlag, 2).equals("_B")
						|| StringHandling.RIGHT(context.AssetFlag, 2).equals("_L")
						|| StringHandling.RIGHT(context.AssetFlag, 2).equals("_R")) {

					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "true");
					}

					tFileList_2Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "false");
					}
				}

				/**
				 * [tJava_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");
				if (conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String url_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server;
				String port_connectionStatsLogs = context.SQLSERVER_LOG_Port;
				String dbname_connectionStatsLogs = context.SQLSERVER_LOG_Database;
				if (!"".equals(port_connectionStatsLogs)) {
					url_connectionStatsLogs += ":" + context.SQLSERVER_LOG_Port;
				}
				if (!"".equals(dbname_connectionStatsLogs)) {

					url_connectionStatsLogs += ";databaseName=" + context.SQLSERVER_LOG_Database;
				}
				url_connectionStatsLogs += ";appName=" + projectName + ";" + context.SQLSERVER_LOG_AdditionalParams;
				String dbUser_connectionStatsLogs = context.SQLSERVER_LOG_Login;

				final String decryptedPassword_connectionStatsLogs = context.SQLSERVER_LOG_Password;
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				String sharedConnectionName_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server
						+ ":" + context.SQLSERVER_LOG_Port + ";DatabaseName=" + context.SQLSERVER_LOG_Schema + ";"
						+ context.SQLSERVER_LOG_AdditionalParams + "" + "_StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"com.microsoft.sqlserver.jdbc.SQLServerDriver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("dbschema_connectionStatsLogs", context.SQLSERVER_LOG_Schema);

				globalMap.put("db_connectionStatsLogs", context.SQLSERVER_LOG_Database);

				globalMap.put("conn_connectionStatsLogs", conn_connectionStatsLogs);

				globalMap.put("shareIdentitySetting_connectionStatsLogs", false);

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct
			implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];
		static byte[] commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length) {
					if (length < 1024 && commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.length == 0) {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[1024];
					} else {
						commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length);
				strReturn = new String(commonByteArray_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Main");
				}

				int tos_count_talendLogs_DB = 0;

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;
				int rejectedCount_talendLogs_DB = 0;
				String dbschema_talendLogs_DB = null;
				String tableName_talendLogs_DB = null;
				boolean whetherReject_talendLogs_DB = false;

				java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
				long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_talendLogs_DB;

				java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_talendLogs_DB = null;
				String dbUser_talendLogs_DB = null;
				dbschema_talendLogs_DB = (String) globalMap.get("dbschema_connectionStatsLogs");
				conn_talendLogs_DB = (java.sql.Connection) globalMap.get("conn_connectionStatsLogs");

				int batchSize_talendLogs_DB = 10000;
				int batchSizeCounter_talendLogs_DB = 0;

				if (dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
					tableName_talendLogs_DB = "log";
				} else {
					tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "log";
				}
				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "log" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }
							boolean whetherExist_talendLogs_DB = false;
							try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
								try {
									isExistStmt_talendLogs_DB
											.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]");
									whetherExist_talendLogs_DB = true;
								} catch (java.lang.Exception e) {
									whetherExist_talendLogs_DB = false;
								}
							}
							if (!whetherExist_talendLogs_DB) {
								try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement()) {
									stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB
											+ "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
								}
							}
							GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB
						+ "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "log" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,
						insert_talendLogs_DB, keyPsmt_talendLogs_DB);
				resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
				boolean isShareIdentity_talendLogs_DB = globalMap
						.get("shareIdentitySetting_connectionStatsLogs") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB main ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Main");
						}

						whetherReject_talendLogs_DB = false;
						if (row_talendLogs_LOGS.moment != null) {
							pstmt_talendLogs_DB.setTimestamp(1,
									new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
						} else {
							pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
						}

						if (row_talendLogs_LOGS.pid == null) {
							pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
						}

						if (row_talendLogs_LOGS.root_pid == null) {
							pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
						}

						if (row_talendLogs_LOGS.father_pid == null) {
							pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
						}

						if (row_talendLogs_LOGS.project == null) {
							pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
						}

						if (row_talendLogs_LOGS.job == null) {
							pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
						}

						if (row_talendLogs_LOGS.context == null) {
							pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
						}

						if (row_talendLogs_LOGS.priority == null) {
							pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
						}

						if (row_talendLogs_LOGS.type == null) {
							pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
						}

						if (row_talendLogs_LOGS.origin == null) {
							pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
						}

						if (row_talendLogs_LOGS.message == null) {
							pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
						}

						if (row_talendLogs_LOGS.code == null) {
							pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
						}

						pstmt_talendLogs_DB.addBatch();
						nb_line_talendLogs_DB++;

						batchSizeCounter_talendLogs_DB++;

						////////// batch execute by batch size///////
						class LimitBytesHelper_talendLogs_DB {
							public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									int countSum_talendLogs_DB = 0;
									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}

							public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}
						}
						if ((batchSize_talendLogs_DB > 0)
								&& (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {

							insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB()
									.limitBytePart1(insertedCount_talendLogs_DB, pstmt_talendLogs_DB);

							batchSizeCounter_talendLogs_DB = 0;
						}

						//////////// commit every////////////

						tos_count_talendLogs_DB++;

						/**
						 * [talendLogs_DB main ] stop
						 */

						/**
						 * [talendLogs_DB process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(String.format(
							"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				try {
					int countSum_talendLogs_DB = 0;
					if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {

						for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
							if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							countSum_talendLogs_DB += countEach_talendLogs_DB;
						}

					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_talendLogs_DB = 0;
					for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

					System.err.println(e.getMessage());

				}
				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);

				}
				resourceMap.put("statementClosed_talendLogs_DB", true);

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB + deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED", nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED", nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED", nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Main");
				}

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
					if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendLogs_DB")) != null) {
						pstmtToClose_talendLogs_DB.close();
					}
				}

				/**
				 * [talendLogs_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUGClass = new Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG();

		int exitCode = Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUGClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.class.getClassLoader()
					.getResourceAsStream(
							"dev/ecom_renameasset_bynder_sujob_prod_debug_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("LastRunDate", "id_String");
					context.LastRunDate = (String) context.getProperty("LastRunDate");
					context.setContextType("fileType", "id_String");
					context.fileType = (String) context.getProperty("fileType");
					context.setContextType("asset_LastRunFile", "id_String");
					context.asset_LastRunFile = (String) context.getProperty("asset_LastRunFile");
					context.setContextType("tempAsset_LastRunFile", "id_String");
					context.tempAsset_LastRunFile = (String) context.getProperty("tempAsset_LastRunFile");
					context.setContextType("File_Datetime", "id_String");
					context.File_Datetime = (String) context.getProperty("File_Datetime");
					context.setContextType("bynderDirectory", "id_String");
					context.bynderDirectory = (String) context.getProperty("bynderDirectory");
					context.setContextType("bynderSubDirectory", "id_String");
					context.bynderSubDirectory = (String) context.getProperty("bynderSubDirectory");
					context.setContextType("AssetFlag", "id_String");
					context.AssetFlag = (String) context.getProperty("AssetFlag");
					context.setContextType("SQLSERVER_LOG_AdditionalParams", "id_String");
					context.SQLSERVER_LOG_AdditionalParams = (String) context
							.getProperty("SQLSERVER_LOG_AdditionalParams");
					context.setContextType("SQLSERVER_LOG_Database", "id_String");
					context.SQLSERVER_LOG_Database = (String) context.getProperty("SQLSERVER_LOG_Database");
					context.setContextType("SQLSERVER_LOG_Login", "id_String");
					context.SQLSERVER_LOG_Login = (String) context.getProperty("SQLSERVER_LOG_Login");
					context.setContextType("SQLSERVER_LOG_Password", "id_Password");
					String pwd_SQLSERVER_LOG_Password_value = context.getProperty("SQLSERVER_LOG_Password");
					context.SQLSERVER_LOG_Password = null;
					if (pwd_SQLSERVER_LOG_Password_value != null) {
						if (context_param.containsKey("SQLSERVER_LOG_Password")) {// no need to decrypt if it come from
																					// program argument or parent job
																					// runtime
							context.SQLSERVER_LOG_Password = pwd_SQLSERVER_LOG_Password_value;
						} else if (!pwd_SQLSERVER_LOG_Password_value.isEmpty()) {
							try {
								context.SQLSERVER_LOG_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_SQLSERVER_LOG_Password_value);
								context.put("SQLSERVER_LOG_Password", context.SQLSERVER_LOG_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("SQLSERVER_LOG_Port", "id_String");
					context.SQLSERVER_LOG_Port = (String) context.getProperty("SQLSERVER_LOG_Port");
					context.setContextType("SQLSERVER_LOG_Schema", "id_String");
					context.SQLSERVER_LOG_Schema = (String) context.getProperty("SQLSERVER_LOG_Schema");
					context.setContextType("SQLSERVER_LOG_Server", "id_String");
					context.SQLSERVER_LOG_Server = (String) context.getProperty("SQLSERVER_LOG_Server");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("LastRunDate")) {
				context.LastRunDate = (String) parentContextMap.get("LastRunDate");
			}
			if (parentContextMap.containsKey("fileType")) {
				context.fileType = (String) parentContextMap.get("fileType");
			}
			if (parentContextMap.containsKey("asset_LastRunFile")) {
				context.asset_LastRunFile = (String) parentContextMap.get("asset_LastRunFile");
			}
			if (parentContextMap.containsKey("tempAsset_LastRunFile")) {
				context.tempAsset_LastRunFile = (String) parentContextMap.get("tempAsset_LastRunFile");
			}
			if (parentContextMap.containsKey("File_Datetime")) {
				context.File_Datetime = (String) parentContextMap.get("File_Datetime");
			}
			if (parentContextMap.containsKey("bynderDirectory")) {
				context.bynderDirectory = (String) parentContextMap.get("bynderDirectory");
			}
			if (parentContextMap.containsKey("bynderSubDirectory")) {
				context.bynderSubDirectory = (String) parentContextMap.get("bynderSubDirectory");
			}
			if (parentContextMap.containsKey("AssetFlag")) {
				context.AssetFlag = (String) parentContextMap.get("AssetFlag");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_AdditionalParams")) {
				context.SQLSERVER_LOG_AdditionalParams = (String) parentContextMap
						.get("SQLSERVER_LOG_AdditionalParams");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Database")) {
				context.SQLSERVER_LOG_Database = (String) parentContextMap.get("SQLSERVER_LOG_Database");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Login")) {
				context.SQLSERVER_LOG_Login = (String) parentContextMap.get("SQLSERVER_LOG_Login");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Password")) {
				context.SQLSERVER_LOG_Password = (java.lang.String) parentContextMap.get("SQLSERVER_LOG_Password");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Port")) {
				context.SQLSERVER_LOG_Port = (String) parentContextMap.get("SQLSERVER_LOG_Port");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Schema")) {
				context.SQLSERVER_LOG_Schema = (String) parentContextMap.get("SQLSERVER_LOG_Schema");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Server")) {
				context.SQLSERVER_LOG_Server = (String) parentContextMap.get("SQLSERVER_LOG_Server");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SQLSERVER_LOG_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Ecom_RenameAsset_Bynder_SuJob_PROD_DEBUG");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 156998 characters generated by Talend Open Studio for Data Integration on the
 * 19 septembre 2023 15:11:23 CEST
 ************************************************************************************************/