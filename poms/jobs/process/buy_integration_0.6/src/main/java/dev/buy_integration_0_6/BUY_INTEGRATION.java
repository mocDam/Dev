// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dev.buy_integration_0_6;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;
import java.util.*;
import java.lang.reflect.*;

@SuppressWarnings("unused")

/**
 * Job: BUY_INTEGRATION Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status
 */
public class BUY_INTEGRATION implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (IntegrationPath != null) {

				this.setProperty("IntegrationPath", IntegrationPath.toString());

			}

			if (LogPath != null) {

				this.setProperty("LogPath", LogPath.toString());

			}

			if (ExtractPath != null) {

				this.setProperty("ExtractPath", ExtractPath.toString());

			}

			if (ReferentielPath != null) {

				this.setProperty("ReferentielPath", ReferentielPath.toString());

			}

			if (ExtractPathFinal != null) {

				this.setProperty("ExtractPathFinal", ExtractPathFinal.toString());

			}

			if (ErrorDataEntity != null) {

				this.setProperty("ErrorDataEntity", ErrorDataEntity.toString());

			}

			if (ModelFilePath != null) {

				this.setProperty("ModelFilePath", ModelFilePath.toString());

			}

		}

		public String IntegrationPath;

		public String getIntegrationPath() {
			return this.IntegrationPath;
		}

		public String LogPath;

		public String getLogPath() {
			return this.LogPath;
		}

		public String ExtractPath;

		public String getExtractPath() {
			return this.ExtractPath;
		}

		public String ReferentielPath;

		public String getReferentielPath() {
			return this.ReferentielPath;
		}

		public String ExtractPathFinal;

		public String getExtractPathFinal() {
			return this.ExtractPathFinal;
		}

		public String ErrorDataEntity;

		public String getErrorDataEntity() {
			return this.ErrorDataEntity;
		}

		public String ModelFilePath;

		public String getModelFilePath() {
			return this.ModelFilePath;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.6";
	private final String jobName = "BUY_INTEGRATION";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					BUY_INTEGRATION.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(BUY_INTEGRATION.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tWaitForFile_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSleep_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tForeach_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSleep_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSleep_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSleep_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSleep_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileArchive_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tForeach_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSleep_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSleep_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSleep_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSleep_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendLogs_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_FILE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWaitForFile_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tForeach_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSleep_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSleep_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWaitForFile_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tWaitForFile_1 begin ] start
				 */

				int NB_ITERATE_tSleep_4 = 0; // for statistics

				ok_Hash.put("tWaitForFile_1", false);
				start_Hash.put("tWaitForFile_1", System.currentTimeMillis());

				currentComponent = "tWaitForFile_1";

				int tos_count_tWaitForFile_1 = 0;

				class Util_tWaitForFile_1 {

					private boolean flagt = false;

					private java.util.regex.Pattern fileNamePatternt = null;
					private java.util.List<String> list;

					public java.util.List<String> getFiles() {
						setFiles();
						return list;
					}

					public Util_tWaitForFile_1() {
						this.list = new java.util.ArrayList<String>();
					}

					public void addFile(java.io.File file) {
						this.list.add(file.getPath());
					}

					void setFiles() {
						String directoryt = context.IntegrationPath;
						String filemaskt = "*.xlsx" + "$";

						if (filemaskt.indexOf("^") == -1) {
							filemaskt = "^" + filemaskt;
						}
						if (!(filemaskt.lastIndexOf(".*$") == -1) && filemaskt.lastIndexOf("*.*$") == -1) {
							filemaskt = filemaskt.substring(0, filemaskt.length() - 3) + "$";
							flagt = true;
						} else {
							filemaskt = java.util.regex.Pattern.compile("[*]").matcher(filemaskt).replaceAll(".*");
						}

						boolean case_sensitivet = true;
						fileNamePatternt = java.util.regex.Pattern.compile(filemaskt);
						if (!case_sensitivet) {
							fileNamePatternt = java.util.regex.Pattern.compile(filemaskt,
									java.util.regex.Pattern.CASE_INSENSITIVE);
						}
						java.io.File filet = new java.io.File(directoryt);
						filet.listFiles(new java.io.FilenameFilter() {

							public boolean accept(java.io.File dir, String name) {
								java.io.File file = new java.io.File(dir, name);
								if (file.isFile()) {
									String fileNamet = name;
									if (flagt == true) {
										if (!(fileNamet.indexOf(".") == -1)) {
											if (fileNamePatternt.matcher(fileNamet.substring(0, fileNamet.indexOf(".")))
													.find()) {
												addFile(file);

											}
										} else {
											if (fileNamePatternt.matcher(fileNamet).find()) {
												addFile(file);
											}
										}
									} else {
										if (fileNamePatternt.matcher(fileNamet).find()) {
											addFile(file);
										}
									}

									return true;
								}
								return false;
							}

						});

					}

					java.util.List<java.io.File> getCreatedFiles(java.util.List<String> originalFiles,
							java.util.List<String> fetchOneTimeFiles) {
						java.util.List<java.io.File> newCreatedFiles = new java.util.ArrayList<java.io.File>();
						String[] array = originalFiles.toArray(new String[] {});
						for (String file : fetchOneTimeFiles) {
							int index = java.util.Arrays.binarySearch(array, file);
							if (index < 0) {
								newCreatedFiles.add(new java.io.File(file));
							}
						}
						return newCreatedFiles;
					}

				}

				Util_tWaitForFile_1 util_tWaitForFile_1 = new Util_tWaitForFile_1();
				java.util.List<String> originalFiles_tWaitForFile_1 = util_tWaitForFile_1.getFiles();

				int count_tWaitForFile_1 = 0;

				while (true) {
					boolean found_tWaitForFile_1 = false;
					if (globalMap.get("tWaitForFile_1_PRESENT_FILE") != null) {
						globalMap.remove("tWaitForFile_1_PRESENT_FILE");
					}
					if (count_tWaitForFile_1 < originalFiles_tWaitForFile_1.size()) {
						java.io.File file_tWaitForFile_1 = new java.io.File(
								originalFiles_tWaitForFile_1.get(count_tWaitForFile_1));

						globalMap.put("tWaitForFile_1_FILENAME", file_tWaitForFile_1.getName());
						globalMap.put("tWaitForFile_1_PRESENT_FILE", file_tWaitForFile_1.getAbsolutePath());
						found_tWaitForFile_1 = true;
					} else {

						util_tWaitForFile_1 = new Util_tWaitForFile_1();

						java.util.List<String> fetchFilesOneTime_tWaitForFile_1 = util_tWaitForFile_1.getFiles();

						List<String> intersectionList = new java.util.ArrayList<String>();

						for (String cachedFile : originalFiles_tWaitForFile_1) {
							if (fetchFilesOneTime_tWaitForFile_1.contains(cachedFile)) {
								intersectionList.add(cachedFile);
							}
						}

						util_tWaitForFile_1 = new Util_tWaitForFile_1();
						originalFiles_tWaitForFile_1 = intersectionList;
						if (globalMap.get("tWaitForFile_1_CREATED_FILE") != null) {
							globalMap.remove("tWaitForFile_1_CREATED_FILE");
						}
						java.util.Collections.sort(originalFiles_tWaitForFile_1);
						java.util.List<java.io.File> newCreatedFiles_tWaitForFile_1 = util_tWaitForFile_1
								.getCreatedFiles(originalFiles_tWaitForFile_1, fetchFilesOneTime_tWaitForFile_1);

						for (int i = 0; i < newCreatedFiles_tWaitForFile_1.size(); i++) {
							java.io.File file_tWaitForFile_1 = newCreatedFiles_tWaitForFile_1.get(i);

							globalMap.put("tWaitForFile_1_FILENAME", file_tWaitForFile_1.getName());
							globalMap.put("tWaitForFile_1_CREATED_FILE", file_tWaitForFile_1.getAbsolutePath());
							found_tWaitForFile_1 = true;
							originalFiles_tWaitForFile_1.add(file_tWaitForFile_1.getPath());
							break;
						}

					}
					count_tWaitForFile_1++;

					globalMap.put("tWaitForFile_1_CURRENT_ITERATION", count_tWaitForFile_1);

					if (!found_tWaitForFile_1) {

						Thread.sleep(1 * 1000);
						continue;
					}

					/**
					 * [tWaitForFile_1 begin ] stop
					 */

					/**
					 * [tWaitForFile_1 main ] start
					 */

					currentComponent = "tWaitForFile_1";

					tos_count_tWaitForFile_1++;

					/**
					 * [tWaitForFile_1 main ] stop
					 */

					/**
					 * [tWaitForFile_1 process_data_begin ] start
					 */

					currentComponent = "tWaitForFile_1";

					/**
					 * [tWaitForFile_1 process_data_begin ] stop
					 */
					NB_ITERATE_tSleep_4++;

					if (execStat) {
						runStat.updateStatOnConnection("If7", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row15", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("If2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("If1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row12", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("If8", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row14", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("If4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row13", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row7", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("If6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row9", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("If3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row10", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row5", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row8", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row11", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tSleep_4);
						// Thread.sleep(1000);
					}

					/**
					 * [tJavaRow_3 begin ] start
					 */

					ok_Hash.put("tJavaRow_3", false);
					start_Hash.put("tJavaRow_3", System.currentTimeMillis());

					currentComponent = "tJavaRow_3";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
					}

					int tos_count_tJavaRow_3 = 0;

					int nb_line_tJavaRow_3 = 0;

					/**
					 * [tJavaRow_3 begin ] stop
					 */

					/**
					 * [tSleep_4 begin ] start
					 */

					ok_Hash.put("tSleep_4", false);
					start_Hash.put("tSleep_4", System.currentTimeMillis());

					currentComponent = "tSleep_4";

					int tos_count_tSleep_4 = 0;

					/**
					 * [tSleep_4 begin ] stop
					 */

					/**
					 * [tSleep_4 main ] start
					 */

					currentComponent = "tSleep_4";

					Thread.sleep((1) * 1000);

					tos_count_tSleep_4++;

					/**
					 * [tSleep_4 main ] stop
					 */

					/**
					 * [tSleep_4 process_data_begin ] start
					 */

					currentComponent = "tSleep_4";

					/**
					 * [tSleep_4 process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_3 main ] start
					 */

					currentComponent = "tJavaRow_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
					}

					context.ErrorDataEntity = "";
					nb_line_tJavaRow_3++;

					tos_count_tJavaRow_3++;

					/**
					 * [tJavaRow_3 main ] stop
					 */

					/**
					 * [tJavaRow_3 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_3";

					/**
					 * [tJavaRow_3 process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_3 process_data_end ] start
					 */

					currentComponent = "tJavaRow_3";

					/**
					 * [tJavaRow_3 process_data_end ] stop
					 */

					/**
					 * [tSleep_4 process_data_end ] start
					 */

					currentComponent = "tSleep_4";

					/**
					 * [tSleep_4 process_data_end ] stop
					 */

					/**
					 * [tSleep_4 end ] start
					 */

					currentComponent = "tSleep_4";

					ok_Hash.put("tSleep_4", true);
					end_Hash.put("tSleep_4", System.currentTimeMillis());

					/**
					 * [tSleep_4 end ] stop
					 */

					/**
					 * [tJavaRow_3 end ] start
					 */

					currentComponent = "tJavaRow_3";

					globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
					}

					ok_Hash.put("tJavaRow_3", true);
					end_Hash.put("tJavaRow_3", System.currentTimeMillis());

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
					}
					tForeach_1Process(globalMap);

					/**
					 * [tJavaRow_3 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tSleep_4);
					}

					/**
					 * [tWaitForFile_1 process_data_end ] start
					 */

					currentComponent = "tWaitForFile_1";

					/**
					 * [tWaitForFile_1 process_data_end ] stop
					 */

					/**
					 * [tWaitForFile_1 end ] start
					 */

					currentComponent = "tWaitForFile_1";

					if (false) {
						break;
					}
				}

				ok_Hash.put("tWaitForFile_1", true);
				end_Hash.put("tWaitForFile_1", System.currentTimeMillis());

				/**
				 * [tWaitForFile_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWaitForFile_1 finally ] start
				 */

				currentComponent = "tWaitForFile_1";

				/**
				 * [tWaitForFile_1 finally ] stop
				 */

				/**
				 * [tSleep_4 finally ] start
				 */

				currentComponent = "tSleep_4";

				/**
				 * [tSleep_4 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 1);
	}

	public void tForeach_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tForeach_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tForeach_1 begin ] start
				 */

				int NB_ITERATE_tFileExist_3 = 0; // for statistics

				ok_Hash.put("tForeach_1", false);
				start_Hash.put("tForeach_1", System.currentTimeMillis());

				currentComponent = "tForeach_1";

				int tos_count_tForeach_1 = 0;

				Object[] values_tForeach_1 = new Object[] { "Currencies.xlsx", "Colors.xlsx",
						"K3 Fashion - Brands.xlsx", "K3 Fashion - Product status setup.xlsx",
						"K3 Fashion - Retail seasons.xlsx", "K3 fashion - Sales Order category.xlsx",
						"Product attribute enumeration types.xlsx", "Product categories.xlsx",
						"region translations.xlsx", "RetailProductHierarchyCategoryEntity.xlsx", "Sizes.xlsx",
						"States.xlsx", };

				for (Object tmp_tForeach_1 : values_tForeach_1) {

					globalMap.put("tForeach_1_CURRENT_VALUE", tmp_tForeach_1);

					/**
					 * [tForeach_1 begin ] stop
					 */

					/**
					 * [tForeach_1 main ] start
					 */

					currentComponent = "tForeach_1";

					tos_count_tForeach_1++;

					/**
					 * [tForeach_1 main ] stop
					 */

					/**
					 * [tForeach_1 process_data_begin ] start
					 */

					currentComponent = "tForeach_1";

					/**
					 * [tForeach_1 process_data_begin ] stop
					 */
					NB_ITERATE_tFileExist_3++;

					if (execStat) {
						runStat.updateStatOnConnection("row7", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("If6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileExist_3);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileExist_3 begin ] start
					 */

					ok_Hash.put("tFileExist_3", false);
					start_Hash.put("tFileExist_3", System.currentTimeMillis());

					currentComponent = "tFileExist_3";

					int tos_count_tFileExist_3 = 0;

					/**
					 * [tFileExist_3 begin ] stop
					 */

					/**
					 * [tFileExist_3 main ] start
					 */

					currentComponent = "tFileExist_3";

					java.io.File file_tFileExist_3 = new java.io.File(
							context.ReferentielPath + ((String) globalMap.get("tForeach_1_CURRENT_VALUE")));
					if (!file_tFileExist_3.exists()) {
						globalMap.put("tFileExist_3_EXISTS", false);
					} else {
						globalMap.put("tFileExist_3_EXISTS", true);
					}

					globalMap.put("tFileExist_3_FILENAME",
							context.ReferentielPath + ((String) globalMap.get("tForeach_1_CURRENT_VALUE")));

					tos_count_tFileExist_3++;

					/**
					 * [tFileExist_3 main ] stop
					 */

					/**
					 * [tFileExist_3 process_data_begin ] start
					 */

					currentComponent = "tFileExist_3";

					/**
					 * [tFileExist_3 process_data_begin ] stop
					 */

					/**
					 * [tFileExist_3 process_data_end ] start
					 */

					currentComponent = "tFileExist_3";

					/**
					 * [tFileExist_3 process_data_end ] stop
					 */

					/**
					 * [tFileExist_3 end ] start
					 */

					currentComponent = "tFileExist_3";

					ok_Hash.put("tFileExist_3", true);
					end_Hash.put("tFileExist_3", System.currentTimeMillis());

					if (!((Boolean) globalMap.get("tFileExist_3_EXISTS"))) {

						if (execStat) {
							runStat.updateStatOnConnection("If6", 0, "true");
						}

						tSleep_2Process(globalMap);
					}

					else {
						if (execStat) {
							runStat.updateStatOnConnection("If6", 0, "false");
						}
					}

					/**
					 * [tFileExist_3 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileExist_3);
					}

					/**
					 * [tForeach_1 process_data_end ] start
					 */

					currentComponent = "tForeach_1";

					/**
					 * [tForeach_1 process_data_end ] stop
					 */

					/**
					 * [tForeach_1 end ] start
					 */

					currentComponent = "tForeach_1";

				}

				ok_Hash.put("tForeach_1", true);
				end_Hash.put("tForeach_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tSleep_3Process(globalMap);

				/**
				 * [tForeach_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tForeach_1 finally ] start
				 */

				currentComponent = "tForeach_1";

				/**
				 * [tForeach_1 finally ] stop
				 */

				/**
				 * [tFileExist_3 finally ] start
				 */

				currentComponent = "tFileExist_3";

				/**
				 * [tFileExist_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tForeach_1_SUBPROCESS_STATE", 1);
	}

	public void tSleep_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSleep_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSleep_3 begin ] start
				 */

				ok_Hash.put("tSleep_3", false);
				start_Hash.put("tSleep_3", System.currentTimeMillis());

				currentComponent = "tSleep_3";

				int tos_count_tSleep_3 = 0;

				/**
				 * [tSleep_3 begin ] stop
				 */

				/**
				 * [tSleep_3 main ] start
				 */

				currentComponent = "tSleep_3";

				Thread.sleep((1) * 1000);

				tos_count_tSleep_3++;

				/**
				 * [tSleep_3 main ] stop
				 */

				/**
				 * [tSleep_3 process_data_begin ] start
				 */

				currentComponent = "tSleep_3";

				/**
				 * [tSleep_3 process_data_begin ] stop
				 */

				/**
				 * [tSleep_3 process_data_end ] start
				 */

				currentComponent = "tSleep_3";

				/**
				 * [tSleep_3 process_data_end ] stop
				 */

				/**
				 * [tSleep_3 end ] start
				 */

				currentComponent = "tSleep_3";

				ok_Hash.put("tSleep_3", true);
				end_Hash.put("tSleep_3", System.currentTimeMillis());

				if (StringHandling.LEN(context.ErrorDataEntity) > 0) {

					if (execStat) {
						runStat.updateStatOnConnection("If7", 0, "true");
					}

					tSendMail_1Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If7", 0, "false");
					}
				}
				if (StringHandling.LEN(context.ErrorDataEntity) == 0) {

					if (execStat) {
						runStat.updateStatOnConnection("If8", 0, "true");
					}

					tRunJob_1Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If8", 0, "false");
					}
				}

				/**
				 * [tSleep_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSleep_3 finally ] start
				 */

				currentComponent = "tSleep_3";

				/**
				 * [tSleep_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSleep_3_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_1 begin ] start
				 */

				ok_Hash.put("tSendMail_1", false);
				start_Hash.put("tSendMail_1", System.currentTimeMillis());

				currentComponent = "tSendMail_1";

				int tos_count_tSendMail_1 = 0;

				/**
				 * [tSendMail_1 begin ] stop
				 */

				/**
				 * [tSendMail_1 main ] start
				 */

				currentComponent = "tSendMail_1";

				String smtpHost_tSendMail_1 = "smtp.office365.com";
				String smtpPort_tSendMail_1 = "587";
				String from_tSendMail_1 = ("djebiri.franck@haddadeurope.com");
				String to_tSendMail_1 = ("fdjebiri@b-wizz-u.com").replace(";", ",");
				String cc_tSendMail_1 = (("") == null || "".equals("")) ? null : ("").replace(";", ",");
				String bcc_tSendMail_1 = (("") == null || "".equals("")) ? null : ("").replace(";", ",");
				String subject_tSendMail_1 = ("Haddad - ERROR DATA ENTITIES NOT FOUND");

				java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();

				String message_tSendMail_1 = ((context.ErrorDataEntity) == null || "".equals(context.ErrorDataEntity))
						? "\"\""
						: (context.ErrorDataEntity);
				java.util.Properties props_tSendMail_1 = System.getProperties();
				props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
				props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
				props_tSendMail_1.put("mail.mime.encodefilename", "true");
				props_tSendMail_1.put("mail.smtp.starttls.enable", "true");
				try {

					props_tSendMail_1.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_1 = javax.mail.Session.getInstance(props_tSendMail_1,
							new javax.mail.Authenticator() {
								protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

									final String decryptedPassword_tSendMail_1 = routines.system.PasswordEncryptUtil
											.decryptPassword("ENC:[SR/QPj2F9tBYHl2HKz8GLqBllewYMvmDmoEYwY97zP1EygBy]");

									return new javax.mail.PasswordAuthentication("djebiri.franck@haddadeurope.com",
											decryptedPassword_tSendMail_1);
								}
							});

					javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(session_tSendMail_1);
					msg_tSendMail_1.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_1, null));
					msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(to_tSendMail_1, false));
					if (cc_tSendMail_1 != null)
						msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(cc_tSendMail_1, false));
					if (bcc_tSendMail_1 != null)
						msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(bcc_tSendMail_1, false));
					msg_tSendMail_1.setSubject(subject_tSendMail_1);

					for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1.size(); i_tSendMail_1++) {
						java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1.get(i_tSendMail_1);
						msg_tSendMail_1.setHeader(header_tSendMail_1.get("KEY"), header_tSendMail_1.get("VALUE"));
					}
					msg_tSendMail_1.setSentDate(new Date());
					msg_tSendMail_1.setHeader("X-Priority", "1"); // High->1 Normal->3 Low->5
					javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_1.setText(message_tSendMail_1, "ISO-8859-15", "plain");
					mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

					for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1.size(); i_tSendMail_1++) {
						String filename_tSendMail_1 = attachments_tSendMail_1.get(i_tSendMail_1);
						javax.activation.FileDataSource fds_tSendMail_1 = null;
						java.io.File file_tSendMail_1 = new java.io.File(filename_tSendMail_1);

						if (!file_tSendMail_1.exists()) {
							continue;
						}

						if (file_tSendMail_1.isDirectory()) {
							java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1.listFiles();
							for (java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1) {
								if (subFile_tSendMail_1.isFile()) {
									fds_tSendMail_1 = new javax.activation.FileDataSource(
											subFile_tSendMail_1.getAbsolutePath());
									mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_1
											.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1));
									mbpFile_tSendMail_1.setFileName(
											javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
									if (contentTransferEncoding_tSendMail_1.get(i_tSendMail_1)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
									}
									mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
								}
							}
						} else {
							mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_1 = new javax.activation.FileDataSource(filename_tSendMail_1);
							mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1));
							mbpFile_tSendMail_1
									.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
							if (contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
						}
					}
					// -- set the content --
					msg_tSendMail_1.setContent(mp_tSendMail_1);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_1 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_1.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_1.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_1.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_1
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_1
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_1);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_1);
				} catch (java.lang.Exception e) {

					System.err.println(e.toString());

				} finally {
					props_tSendMail_1.remove("mail.smtp.host");
					props_tSendMail_1.remove("mail.smtp.port");

					props_tSendMail_1.remove("mail.mime.encodefilename");

					props_tSendMail_1.remove("mail.smtp.starttls.enable");

					props_tSendMail_1.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_1++;

				/**
				 * [tSendMail_1 main ] stop
				 */

				/**
				 * [tSendMail_1 process_data_begin ] start
				 */

				currentComponent = "tSendMail_1";

				/**
				 * [tSendMail_1 process_data_begin ] stop
				 */

				/**
				 * [tSendMail_1 process_data_end ] start
				 */

				currentComponent = "tSendMail_1";

				/**
				 * [tSendMail_1 process_data_end ] stop
				 */

				/**
				 * [tSendMail_1 end ] start
				 */

				currentComponent = "tSendMail_1";

				ok_Hash.put("tSendMail_1", true);
				end_Hash.put("tSendMail_1", System.currentTimeMillis());

				/**
				 * [tSendMail_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_1 finally ] start
				 */

				currentComponent = "tSendMail_1";

				/**
				 * [tSendMail_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				class DealChildJobLibrary_tRunJob_1 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

				class JVMArgumentHelper_tRunJob_1 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				String osName_tRunJob_1 = System.getProperty("os.name");
				if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase().startsWith("win")) {

					paraList_tRunJob_1.add("C:/Program Files/Zulu/zulu-15/bin/java.exe");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/buy_validation_0.2/target/classpath.jar;"));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"dev.buy_validation_0_2.BUY_VALIDATION");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");

				} else {

					paraList_tRunJob_1.add("C:/Program Files/Zulu/zulu-15/bin/java.exe");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/buy_validation_0.2/target/classes:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/buy_validation_0.2/src/main/ext-resources:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/code/routines/target/classes:.:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/activation/6.0.0/activation-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/mail-1.4/6.0.0/mail-1.4-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talend_file_enhanced_20070724/6.0.0/talend_file_enhanced_20070724-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"dev.buy_validation_0_2.BUY_VALIDATION");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_1.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = context.IntegrationPath;
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--context_param IntegrationExcelPath="
							+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add("--context_param IntegrationExcelPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("IntegrationExcelPath", obj_tRunJob_1);

				obj_tRunJob_1 = ((String) globalMap.get("tWaitForFile_1_FILENAME"));
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add("--context_param ExcelFileName="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("ExcelFileName", obj_tRunJob_1);

				obj_tRunJob_1 = context.LogPath;
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add(
							"--context_param LogPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("LogPath", obj_tRunJob_1);

				obj_tRunJob_1 = context.ReferentielPath;
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1.add(
							"--context_param ReferentielPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add("--context_param ReferentielPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("ReferentielPath", obj_tRunJob_1);

				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

				Runtime runtime_tRunJob_1 = Runtime.getRuntime();
				Process ps_tRunJob_1 = null;

				// 0 indicates normal termination
				int result_tRunJob_1;
				StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
				try {
					ps_tRunJob_1 = runtime_tRunJob_1
							.exec((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

					Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
					normal_tRunJob_1.start();

					Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
					error_tRunJob_1.start();

					result_tRunJob_1 = ps_tRunJob_1.waitFor();
					normal_tRunJob_1.join(10000);
					error_tRunJob_1.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_1.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", result_tRunJob_1);
				if (result_tRunJob_1 != 0) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_1.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_1
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());

				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 process_data_begin ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_1 process_data_end ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				if (true) {

					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "true");
					}

					tFileExist_1Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "false");
					}
				}

				/**
				 * [tRunJob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_1 begin ] start
				 */

				ok_Hash.put("tFileExist_1", false);
				start_Hash.put("tFileExist_1", System.currentTimeMillis());

				currentComponent = "tFileExist_1";

				int tos_count_tFileExist_1 = 0;

				/**
				 * [tFileExist_1 begin ] stop
				 */

				/**
				 * [tFileExist_1 main ] start
				 */

				currentComponent = "tFileExist_1";

				java.io.File file_tFileExist_1 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tWaitForFile_1_FILENAME")));
				if (!file_tFileExist_1.exists()) {
					globalMap.put("tFileExist_1_EXISTS", false);
				} else {
					globalMap.put("tFileExist_1_EXISTS", true);
				}

				globalMap.put("tFileExist_1_FILENAME",
						context.IntegrationPath + ((String) globalMap.get("tWaitForFile_1_FILENAME")));

				tos_count_tFileExist_1++;

				/**
				 * [tFileExist_1 main ] stop
				 */

				/**
				 * [tFileExist_1 process_data_begin ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 process_data_begin ] stop
				 */

				/**
				 * [tFileExist_1 process_data_end ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 process_data_end ] stop
				 */

				/**
				 * [tFileExist_1 end ] start
				 */

				currentComponent = "tFileExist_1";

				ok_Hash.put("tFileExist_1", true);
				end_Hash.put("tFileExist_1", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_1_EXISTS"))) {

					if (execStat) {
						runStat.updateStatOnConnection("If2", 0, "true");
					}

					tRunJob_2Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If2", 0, "false");
					}
				}

				/**
				 * [tFileExist_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_1 finally ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				class DealChildJobLibrary_tRunJob_2 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

				class JVMArgumentHelper_tRunJob_2 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_2 jvm_argument_helper_tRunJob_2 = new JVMArgumentHelper_tRunJob_2();

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				String osName_tRunJob_2 = System.getProperty("os.name");
				if (osName_tRunJob_2 != null && osName_tRunJob_2.toLowerCase().startsWith("win")) {

					paraList_tRunJob_2.add("C:/Program Files/Zulu/zulu-15/bin/java.exe");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/extract_for_dynamics_0.2/target/classpath.jar;"));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"dev.extract_for_dynamics_0_2.EXTRACT_FOR_DYNAMICS");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "%*");

				} else {

					paraList_tRunJob_2.add("C:/Program Files/Zulu/zulu-15/bin/java.exe");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/extract_for_dynamics_0.2/target/classes:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/extract_for_dynamics_0.2/src/main/ext-resources:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/code/routines/target/classes:.:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/components/lib/thashfile/3.1-20190910/thashfile-3.1-20190910.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"dev.extract_for_dynamics_0_2.EXTRACT_FOR_DYNAMICS");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_2.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = context.IntegrationPath;
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--context_param IntegrationExcelPath="
							+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add("--context_param IntegrationExcelPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("IntegrationExcelPath", obj_tRunJob_2);

				obj_tRunJob_2 = ((String) globalMap.get("tWaitForFile_1_FILENAME"));
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add("--context_param ExcelFileName="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("ExcelFileName", obj_tRunJob_2);

				obj_tRunJob_2 = context.LogPath;
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add(
							"--context_param LogPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("LogPath", obj_tRunJob_2);

				obj_tRunJob_2 = context.ExtractPath;
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--context_param ExtractPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add("--context_param ExtractPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("ExtractPath", obj_tRunJob_2);

				obj_tRunJob_2 = context.ReferentielPath;
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2.add(
							"--context_param ReferentielPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add("--context_param ReferentielPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("ReferentielPath", obj_tRunJob_2);

				class ConsoleHelper_tRunJob_2 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_2 consoleHelper_tRunJob_2 = new ConsoleHelper_tRunJob_2();

				Runtime runtime_tRunJob_2 = Runtime.getRuntime();
				Process ps_tRunJob_2 = null;

				// 0 indicates normal termination
				int result_tRunJob_2;
				StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
				try {
					ps_tRunJob_2 = runtime_tRunJob_2
							.exec((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

					Thread normal_tRunJob_2 = consoleHelper_tRunJob_2.getNormalThread(ps_tRunJob_2);
					normal_tRunJob_2.start();

					Thread error_tRunJob_2 = consoleHelper_tRunJob_2.getErrorThread(ps_tRunJob_2, errorMsg_tRunJob_2);
					error_tRunJob_2.start();

					result_tRunJob_2 = ps_tRunJob_2.waitFor();
					normal_tRunJob_2.join(10000);
					error_tRunJob_2.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_2.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", result_tRunJob_2);
				if (result_tRunJob_2 != 0) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_2.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_2
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_2.toString());

				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 process_data_begin ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_2 process_data_end ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				if (true) {

					if (execStat) {
						runStat.updateStatOnConnection("If3", 0, "true");
					}

					tFileExist_2Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If3", 0, "false");
					}
				}

				/**
				 * [tRunJob_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_2 begin ] start
				 */

				ok_Hash.put("tFileExist_2", false);
				start_Hash.put("tFileExist_2", System.currentTimeMillis());

				currentComponent = "tFileExist_2";

				int tos_count_tFileExist_2 = 0;

				/**
				 * [tFileExist_2 begin ] stop
				 */

				/**
				 * [tFileExist_2 main ] start
				 */

				currentComponent = "tFileExist_2";

				java.io.File file_tFileExist_2 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tWaitForFile_1_FILENAME")));
				if (!file_tFileExist_2.exists()) {
					globalMap.put("tFileExist_2_EXISTS", false);
				} else {
					globalMap.put("tFileExist_2_EXISTS", true);
				}

				globalMap.put("tFileExist_2_FILENAME",
						context.IntegrationPath + ((String) globalMap.get("tWaitForFile_1_FILENAME")));

				tos_count_tFileExist_2++;

				/**
				 * [tFileExist_2 main ] stop
				 */

				/**
				 * [tFileExist_2 process_data_begin ] start
				 */

				currentComponent = "tFileExist_2";

				/**
				 * [tFileExist_2 process_data_begin ] stop
				 */

				/**
				 * [tFileExist_2 process_data_end ] start
				 */

				currentComponent = "tFileExist_2";

				/**
				 * [tFileExist_2 process_data_end ] stop
				 */

				/**
				 * [tFileExist_2 end ] start
				 */

				currentComponent = "tFileExist_2";

				ok_Hash.put("tFileExist_2", true);
				end_Hash.put("tFileExist_2", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_2_EXISTS"))) {

					if (execStat) {
						runStat.updateStatOnConnection("If4", 0, "true");
					}

					tRunJob_3Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If4", 0, "false");
					}
				}

				/**
				 * [tFileExist_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_2 finally ] start
				 */

				currentComponent = "tFileExist_2";

				/**
				 * [tFileExist_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row3Struct row1 = row3;
				row3Struct row2 = row3;
				row3Struct row4 = row3;
				row3Struct row8 = row3;
				row3Struct row10 = row3;
				row3Struct row11 = row3;
				row3Struct row5 = row3;
				row3Struct row12 = row3;
				row3Struct row13 = row3;
				row3Struct row14 = row3;
				row3Struct row15 = row3;

				/**
				 * [tFileCopy_7 begin ] start
				 */

				ok_Hash.put("tFileCopy_7", false);
				start_Hash.put("tFileCopy_7", System.currentTimeMillis());

				currentComponent = "tFileCopy_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tFileCopy_7 = 0;

				/**
				 * [tFileCopy_7 begin ] stop
				 */

				/**
				 * [tFileCopy_6 begin ] start
				 */

				ok_Hash.put("tFileCopy_6", false);
				start_Hash.put("tFileCopy_6", System.currentTimeMillis());

				currentComponent = "tFileCopy_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tFileCopy_6 = 0;

				/**
				 * [tFileCopy_6 begin ] stop
				 */

				/**
				 * [tFileCopy_5 begin ] start
				 */

				ok_Hash.put("tFileCopy_5", false);
				start_Hash.put("tFileCopy_5", System.currentTimeMillis());

				currentComponent = "tFileCopy_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tFileCopy_5 = 0;

				/**
				 * [tFileCopy_5 begin ] stop
				 */

				/**
				 * [tFileCopy_4 begin ] start
				 */

				ok_Hash.put("tFileCopy_4", false);
				start_Hash.put("tFileCopy_4", System.currentTimeMillis());

				currentComponent = "tFileCopy_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tFileCopy_4 = 0;

				/**
				 * [tFileCopy_4 begin ] stop
				 */

				/**
				 * [tFileCopy_1 begin ] start
				 */

				ok_Hash.put("tFileCopy_1", false);
				start_Hash.put("tFileCopy_1", System.currentTimeMillis());

				currentComponent = "tFileCopy_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFileCopy_1 = 0;

				/**
				 * [tFileCopy_1 begin ] stop
				 */

				/**
				 * [tFileArchive_1 begin ] start
				 */

				ok_Hash.put("tFileArchive_1", false);
				start_Hash.put("tFileArchive_1", System.currentTimeMillis());

				currentComponent = "tFileArchive_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tFileArchive_1 = 0;

				/**
				 * [tFileArchive_1 begin ] stop
				 */

				/**
				 * [tSleep_5 begin ] start
				 */

				ok_Hash.put("tSleep_5", false);
				start_Hash.put("tSleep_5", System.currentTimeMillis());

				currentComponent = "tSleep_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tSleep_5 = 0;

				/**
				 * [tSleep_5 begin ] stop
				 */

				/**
				 * [tFileCopy_3 begin ] start
				 */

				ok_Hash.put("tFileCopy_3", false);
				start_Hash.put("tFileCopy_3", System.currentTimeMillis());

				currentComponent = "tFileCopy_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tFileCopy_3 = 0;

				/**
				 * [tFileCopy_3 begin ] stop
				 */

				/**
				 * [tFileCopy_2 begin ] start
				 */

				ok_Hash.put("tFileCopy_2", false);
				start_Hash.put("tFileCopy_2", System.currentTimeMillis());

				currentComponent = "tFileCopy_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFileCopy_2 = 0;

				/**
				 * [tFileCopy_2 begin ] stop
				 */

				/**
				 * [tSleep_1 begin ] start
				 */

				ok_Hash.put("tSleep_1", false);
				start_Hash.put("tSleep_1", System.currentTimeMillis());

				currentComponent = "tSleep_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tSleep_1 = 0;

				/**
				 * [tSleep_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				class DealChildJobLibrary_tRunJob_3 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_3 dealChildJobLibrary_tRunJob_3 = new DealChildJobLibrary_tRunJob_3();

				class JVMArgumentHelper_tRunJob_3 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_3 jvm_argument_helper_tRunJob_3 = new JVMArgumentHelper_tRunJob_3();

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				String osName_tRunJob_3 = System.getProperty("os.name");
				if (osName_tRunJob_3 != null && osName_tRunJob_3.toLowerCase().startsWith("win")) {

					paraList_tRunJob_3.add("C:/Program Files/Zulu/zulu-15/bin/java.exe");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx1024M");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/extract_for_dynamics_price_0.2/target/classpath.jar;"));

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							"dev.extract_for_dynamics_price_0_2.EXTRACT_FOR_DYNAMICS_PRICE");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "%*");

				} else {

					paraList_tRunJob_3.add("C:/Program Files/Zulu/zulu-15/bin/java.exe");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx1024M");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/extract_for_dynamics_price_0.2/target/classes:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/extract_for_dynamics_price_0.2/src/main/ext-resources:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/code/routines/target/classes:.:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talend_file_enhanced_20070724/6.0.0/talend_file_enhanced_20070724-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/components/lib/thashfile/3.1-20190910/thashfile-3.1-20190910.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
							"dev.extract_for_dynamics_price_0_2.EXTRACT_FOR_DYNAMICS_PRICE");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");

					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_3.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = context.IntegrationPath;
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3.add("--context_param IntegrationExcelPath="
							+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add("--context_param IntegrationExcelPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("IntegrationExcelPath", obj_tRunJob_3);

				obj_tRunJob_3 = ((String) globalMap.get("tWaitForFile_1_FILENAME"));
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add("--context_param ExcelFileName="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("ExcelFileName", obj_tRunJob_3);

				obj_tRunJob_3 = context.LogPath;
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add(
							"--context_param LogPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("LogPath", obj_tRunJob_3);

				obj_tRunJob_3 = context.ExtractPath;
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--context_param ExtractPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add("--context_param ExtractPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("ExtractPath", obj_tRunJob_3);

				obj_tRunJob_3 = context.ReferentielPath;
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3.add(
							"--context_param ReferentielPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add("--context_param ReferentielPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("ReferentielPath", obj_tRunJob_3);

				class ConsoleHelper_tRunJob_3 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_3 consoleHelper_tRunJob_3 = new ConsoleHelper_tRunJob_3();

				Runtime runtime_tRunJob_3 = Runtime.getRuntime();
				Process ps_tRunJob_3 = null;

				// 0 indicates normal termination
				int result_tRunJob_3;
				StringBuffer errorMsg_tRunJob_3 = new StringBuffer();
				try {
					ps_tRunJob_3 = runtime_tRunJob_3
							.exec((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

					Thread normal_tRunJob_3 = consoleHelper_tRunJob_3.getNormalThread(ps_tRunJob_3);
					normal_tRunJob_3.start();

					Thread error_tRunJob_3 = consoleHelper_tRunJob_3.getErrorThread(ps_tRunJob_3, errorMsg_tRunJob_3);
					error_tRunJob_3.start();

					result_tRunJob_3 = ps_tRunJob_3.waitFor();
					normal_tRunJob_3.join(10000);
					error_tRunJob_3.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_3.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", result_tRunJob_3);
				if (result_tRunJob_3 != 0) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_3.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_3
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_3.toString());

				}

				System.err.println(
						"when tRunJob runs in an independent process, it can't extract datas from tBufferOutput of child job.");

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 process_data_begin ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
				}

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tWaitForFile_1_FILENAME")));
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
						throw new RuntimeException(
								"File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
					throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath()
							+ " does not exist or is invalid or is not a file.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH",
						context.IntegrationPath + ((String) globalMap.get("tWaitForFile_1_FILENAME")));

				row1 = row3;

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
				}

				globalMap.put("dateError", TalendDate.formatDate("yyyy-MM-ddHHmmss", new Date()));

				row2 = row1;

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_begin ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_begin ] stop
				 */

				/**
				 * [tSleep_1 main ] start
				 */

				currentComponent = "tSleep_1";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
				}

				Thread.sleep((1) * 1000);

				row4 = row2;

				tos_count_tSleep_1++;

				/**
				 * [tSleep_1 main ] stop
				 */

				/**
				 * [tSleep_1 process_data_begin ] start
				 */

				currentComponent = "tSleep_1";

				/**
				 * [tSleep_1 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_2 main ] start
				 */

				currentComponent = "tFileCopy_2";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
				}

				String srcFileName_tFileCopy_2 = context.ModelFilePath + "Manifest.xml";

				java.io.File srcFile_tFileCopy_2 = new java.io.File(srcFileName_tFileCopy_2);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_2.exists() || !srcFile_tFileCopy_2.isFile()) {
					String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2 = String
							.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_2);
					System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2);
				}
				String desDirName_tFileCopy_2 = context.ExtractPath;

				String desFileName_tFileCopy_2 = srcFile_tFileCopy_2.getName();

				if (desFileName_tFileCopy_2 != null && ("").equals(desFileName_tFileCopy_2.trim())) {
					desFileName_tFileCopy_2 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_2 = new java.io.File(desDirName_tFileCopy_2, desFileName_tFileCopy_2);

				if (!srcFile_tFileCopy_2.getPath().equals(desFile_tFileCopy_2.getPath())) {
					java.io.File parentFile_tFileCopy_2 = desFile_tFileCopy_2.getParentFile();

					if (parentFile_tFileCopy_2 != null && !parentFile_tFileCopy_2.exists()) {
						parentFile_tFileCopy_2.mkdirs();
					}
					try {
						org.talend.FileCopy.copyFile(srcFile_tFileCopy_2.getPath(), desFile_tFileCopy_2.getPath(),
								false);
					} catch (Exception e) {
						System.err.println("tFileCopy_2 " + e.getMessage());
					}

				}
				globalMap.put("tFileCopy_2_DESTINATION_FILEPATH", desFile_tFileCopy_2.getPath());
				globalMap.put("tFileCopy_2_DESTINATION_FILENAME", desFile_tFileCopy_2.getName());

				globalMap.put("tFileCopy_2_SOURCE_DIRECTORY", srcFile_tFileCopy_2.getParent());
				globalMap.put("tFileCopy_2_DESTINATION_DIRECTORY", desFile_tFileCopy_2.getParent());

				row8 = row4;

				tos_count_tFileCopy_2++;

				/**
				 * [tFileCopy_2 main ] stop
				 */

				/**
				 * [tFileCopy_2 process_data_begin ] start
				 */

				currentComponent = "tFileCopy_2";

				/**
				 * [tFileCopy_2 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_3 main ] start
				 */

				currentComponent = "tFileCopy_3";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
				}

				String srcFileName_tFileCopy_3 = context.ModelFilePath + "PackageHeader.xml";

				java.io.File srcFile_tFileCopy_3 = new java.io.File(srcFileName_tFileCopy_3);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_3.exists() || !srcFile_tFileCopy_3.isFile()) {
					String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_3 = String
							.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_3);
					System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_3);
				}
				String desDirName_tFileCopy_3 = context.ExtractPath;

				String desFileName_tFileCopy_3 = srcFile_tFileCopy_3.getName();

				if (desFileName_tFileCopy_3 != null && ("").equals(desFileName_tFileCopy_3.trim())) {
					desFileName_tFileCopy_3 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_3 = new java.io.File(desDirName_tFileCopy_3, desFileName_tFileCopy_3);

				if (!srcFile_tFileCopy_3.getPath().equals(desFile_tFileCopy_3.getPath())) {
					java.io.File parentFile_tFileCopy_3 = desFile_tFileCopy_3.getParentFile();

					if (parentFile_tFileCopy_3 != null && !parentFile_tFileCopy_3.exists()) {
						parentFile_tFileCopy_3.mkdirs();
					}
					try {
						org.talend.FileCopy.copyFile(srcFile_tFileCopy_3.getPath(), desFile_tFileCopy_3.getPath(),
								false);
					} catch (Exception e) {
						System.err.println("tFileCopy_3 " + e.getMessage());
					}

				}
				globalMap.put("tFileCopy_3_DESTINATION_FILEPATH", desFile_tFileCopy_3.getPath());
				globalMap.put("tFileCopy_3_DESTINATION_FILENAME", desFile_tFileCopy_3.getName());

				globalMap.put("tFileCopy_3_SOURCE_DIRECTORY", srcFile_tFileCopy_3.getParent());
				globalMap.put("tFileCopy_3_DESTINATION_DIRECTORY", desFile_tFileCopy_3.getParent());

				row10 = row8;

				tos_count_tFileCopy_3++;

				/**
				 * [tFileCopy_3 main ] stop
				 */

				/**
				 * [tFileCopy_3 process_data_begin ] start
				 */

				currentComponent = "tFileCopy_3";

				/**
				 * [tFileCopy_3 process_data_begin ] stop
				 */

				/**
				 * [tSleep_5 main ] start
				 */

				currentComponent = "tSleep_5";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
				}

				Thread.sleep((3) * 1000);

				row11 = row10;

				tos_count_tSleep_5++;

				/**
				 * [tSleep_5 main ] stop
				 */

				/**
				 * [tSleep_5 process_data_begin ] start
				 */

				currentComponent = "tSleep_5";

				/**
				 * [tSleep_5 process_data_begin ] stop
				 */

				/**
				 * [tFileArchive_1 main ] start
				 */

				currentComponent = "tFileArchive_1";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
				}

				String sourceFile_tFileArchive_1 = context.ExtractPath;

				if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1),
						java.nio.file.LinkOption.NOFOLLOW_LINKS)) {
					throw new java.io.FileNotFoundException(
							sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
				}

				String zipFile_tFileArchive_1 = context.ExtractPath + "HBE1#MASTER FILE " + globalMap.get("dateError")
						+ ".zip";

				com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(
						sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
				zip_tFileArchive_1.setOverwriteExistTargetZip(true);
				zip_tFileArchive_1.setMakeTargetDir(false);
				zip_tFileArchive_1.setCompressLevel(4);
				zip_tFileArchive_1.setArchiveFormat("zip");
				zip_tFileArchive_1.setAllFiles(true);

				zip_tFileArchive_1.setContainSubDir(true);
				zip_tFileArchive_1.setEncoding("ISO-8859-15");
				zip_tFileArchive_1.setZip64Mode("ASNEEDED");
				zip_tFileArchive_1.setEncrypted(false);

				final String decryptedPassword_tFileArchive_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[Tj08uiZgfD6c05S4T03ZS2JMAvPdpVwz6HmlxQ==]");

				zip_tFileArchive_1.setPassword(decryptedPassword_tFileArchive_1);

				zip_tFileArchive_1.setUseZip4jEncryption(true);
				zip_tFileArchive_1.setEncryptionMethod(net.lingala.zip4j.util.Zip4jConstants.ENC_METHOD_STANDARD);

				globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH", zipFile_tFileArchive_1);

				globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

				zip_tFileArchive_1.doZip();

				row5 = row11;

				tos_count_tFileArchive_1++;

				/**
				 * [tFileArchive_1 main ] stop
				 */

				/**
				 * [tFileArchive_1 process_data_begin ] start
				 */

				currentComponent = "tFileArchive_1";

				/**
				 * [tFileArchive_1 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_1 main ] start
				 */

				currentComponent = "tFileCopy_1";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
				}

				String srcFileName_tFileCopy_1 = context.ExtractPath + "HBE1#MASTER FILE " + globalMap.get("dateError")
						+ ".zip";

				java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
					String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String
							.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
					System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
				}
				String desDirName_tFileCopy_1 = context.ExtractPathFinal;

				String desFileName_tFileCopy_1 = srcFile_tFileCopy_1.getName();

				if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())) {
					desFileName_tFileCopy_1 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1, desFileName_tFileCopy_1);

				if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())) {
					java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1.getParentFile();

					if (parentFile_tFileCopy_1 != null && !parentFile_tFileCopy_1.exists()) {
						parentFile_tFileCopy_1.mkdirs();
					}
					try {
						org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(),
								true);
					} catch (Exception e) {
						System.err.println("tFileCopy_1 " + e.getMessage());
					}
					java.io.File isRemoved_tFileCopy_1 = new java.io.File(
							context.ExtractPath + "HBE1#MASTER FILE " + globalMap.get("dateError") + ".zip");
					if (isRemoved_tFileCopy_1.exists()) {
						String errorMessageCouldNotRemoveFile_tFileCopy_1 = String.format(
								"tFileCopy_1 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.",
								srcFileName_tFileCopy_1);
						System.err.println(errorMessageCouldNotRemoveFile_tFileCopy_1 + "\n");
					}

				}
				globalMap.put("tFileCopy_1_DESTINATION_FILEPATH", desFile_tFileCopy_1.getPath());
				globalMap.put("tFileCopy_1_DESTINATION_FILENAME", desFile_tFileCopy_1.getName());

				globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
				globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());

				row12 = row5;

				tos_count_tFileCopy_1++;

				/**
				 * [tFileCopy_1 main ] stop
				 */

				/**
				 * [tFileCopy_1 process_data_begin ] start
				 */

				currentComponent = "tFileCopy_1";

				/**
				 * [tFileCopy_1 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_4 main ] start
				 */

				currentComponent = "tFileCopy_4";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
				}

				String srcFileName_tFileCopy_4 = context.ExtractPathFinal + "HBE1#MASTER FILE "
						+ globalMap.get("dateError") + ".zip";

				java.io.File srcFile_tFileCopy_4 = new java.io.File(srcFileName_tFileCopy_4);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_4.exists() || !srcFile_tFileCopy_4.isFile()) {
					String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_4 = String
							.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_4);
					System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_4);
				}
				String desDirName_tFileCopy_4 = context.ExtractPathFinal;

				String desFileName_tFileCopy_4 = "HBB1#MASTER FILE " + globalMap.get("dateError") + ".zip";

				if (desFileName_tFileCopy_4 != null && ("").equals(desFileName_tFileCopy_4.trim())) {
					desFileName_tFileCopy_4 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_4 = new java.io.File(desDirName_tFileCopy_4, desFileName_tFileCopy_4);

				if (!srcFile_tFileCopy_4.getPath().equals(desFile_tFileCopy_4.getPath())) {
					java.io.File parentFile_tFileCopy_4 = desFile_tFileCopy_4.getParentFile();

					if (parentFile_tFileCopy_4 != null && !parentFile_tFileCopy_4.exists()) {
						parentFile_tFileCopy_4.mkdirs();
					}
					try {
						org.talend.FileCopy.copyFile(srcFile_tFileCopy_4.getPath(), desFile_tFileCopy_4.getPath(),
								false);
					} catch (Exception e) {
						System.err.println("tFileCopy_4 " + e.getMessage());
					}

				}
				globalMap.put("tFileCopy_4_DESTINATION_FILEPATH", desFile_tFileCopy_4.getPath());
				globalMap.put("tFileCopy_4_DESTINATION_FILENAME", desFile_tFileCopy_4.getName());

				globalMap.put("tFileCopy_4_SOURCE_DIRECTORY", srcFile_tFileCopy_4.getParent());
				globalMap.put("tFileCopy_4_DESTINATION_DIRECTORY", desFile_tFileCopy_4.getParent());

				row13 = row12;

				tos_count_tFileCopy_4++;

				/**
				 * [tFileCopy_4 main ] stop
				 */

				/**
				 * [tFileCopy_4 process_data_begin ] start
				 */

				currentComponent = "tFileCopy_4";

				/**
				 * [tFileCopy_4 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_5 main ] start
				 */

				currentComponent = "tFileCopy_5";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
				}

				String srcFileName_tFileCopy_5 = context.ExtractPathFinal + "HBE1#MASTER FILE "
						+ globalMap.get("dateError") + ".zip";

				java.io.File srcFile_tFileCopy_5 = new java.io.File(srcFileName_tFileCopy_5);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_5.exists() || !srcFile_tFileCopy_5.isFile()) {
					String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_5 = String
							.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_5);
					System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_5);
				}
				String desDirName_tFileCopy_5 = context.ExtractPathFinal;

				String desFileName_tFileCopy_5 = "HBP1#MASTER FILE " + globalMap.get("dateError") + ".zip";

				if (desFileName_tFileCopy_5 != null && ("").equals(desFileName_tFileCopy_5.trim())) {
					desFileName_tFileCopy_5 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_5 = new java.io.File(desDirName_tFileCopy_5, desFileName_tFileCopy_5);

				if (!srcFile_tFileCopy_5.getPath().equals(desFile_tFileCopy_5.getPath())) {
					java.io.File parentFile_tFileCopy_5 = desFile_tFileCopy_5.getParentFile();

					if (parentFile_tFileCopy_5 != null && !parentFile_tFileCopy_5.exists()) {
						parentFile_tFileCopy_5.mkdirs();
					}
					try {
						org.talend.FileCopy.copyFile(srcFile_tFileCopy_5.getPath(), desFile_tFileCopy_5.getPath(),
								false);
					} catch (Exception e) {
						System.err.println("tFileCopy_5 " + e.getMessage());
					}

				}
				globalMap.put("tFileCopy_5_DESTINATION_FILEPATH", desFile_tFileCopy_5.getPath());
				globalMap.put("tFileCopy_5_DESTINATION_FILENAME", desFile_tFileCopy_5.getName());

				globalMap.put("tFileCopy_5_SOURCE_DIRECTORY", srcFile_tFileCopy_5.getParent());
				globalMap.put("tFileCopy_5_DESTINATION_DIRECTORY", desFile_tFileCopy_5.getParent());

				row14 = row13;

				tos_count_tFileCopy_5++;

				/**
				 * [tFileCopy_5 main ] stop
				 */

				/**
				 * [tFileCopy_5 process_data_begin ] start
				 */

				currentComponent = "tFileCopy_5";

				/**
				 * [tFileCopy_5 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_6 main ] start
				 */

				currentComponent = "tFileCopy_6";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
				}

				String srcFileName_tFileCopy_6 = context.ExtractPathFinal + "HBE1#MASTER FILE "
						+ globalMap.get("dateError") + ".zip";

				java.io.File srcFile_tFileCopy_6 = new java.io.File(srcFileName_tFileCopy_6);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_6.exists() || !srcFile_tFileCopy_6.isFile()) {
					String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_6 = String
							.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_6);
					System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_6);
				}
				String desDirName_tFileCopy_6 = context.ExtractPathFinal;

				String desFileName_tFileCopy_6 = "HBS1#MASTER FILE " + globalMap.get("dateError") + ".zip";

				if (desFileName_tFileCopy_6 != null && ("").equals(desFileName_tFileCopy_6.trim())) {
					desFileName_tFileCopy_6 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_6 = new java.io.File(desDirName_tFileCopy_6, desFileName_tFileCopy_6);

				if (!srcFile_tFileCopy_6.getPath().equals(desFile_tFileCopy_6.getPath())) {
					java.io.File parentFile_tFileCopy_6 = desFile_tFileCopy_6.getParentFile();

					if (parentFile_tFileCopy_6 != null && !parentFile_tFileCopy_6.exists()) {
						parentFile_tFileCopy_6.mkdirs();
					}
					try {
						org.talend.FileCopy.copyFile(srcFile_tFileCopy_6.getPath(), desFile_tFileCopy_6.getPath(),
								false);
					} catch (Exception e) {
						System.err.println("tFileCopy_6 " + e.getMessage());
					}

				}
				globalMap.put("tFileCopy_6_DESTINATION_FILEPATH", desFile_tFileCopy_6.getPath());
				globalMap.put("tFileCopy_6_DESTINATION_FILENAME", desFile_tFileCopy_6.getName());

				globalMap.put("tFileCopy_6_SOURCE_DIRECTORY", srcFile_tFileCopy_6.getParent());
				globalMap.put("tFileCopy_6_DESTINATION_DIRECTORY", desFile_tFileCopy_6.getParent());

				row15 = row14;

				tos_count_tFileCopy_6++;

				/**
				 * [tFileCopy_6 main ] stop
				 */

				/**
				 * [tFileCopy_6 process_data_begin ] start
				 */

				currentComponent = "tFileCopy_6";

				/**
				 * [tFileCopy_6 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_7 main ] start
				 */

				currentComponent = "tFileCopy_7";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
				}

				String srcFileName_tFileCopy_7 = context.ExtractPathFinal + "HBE1#MASTER FILE "
						+ globalMap.get("dateError") + ".zip";

				java.io.File srcFile_tFileCopy_7 = new java.io.File(srcFileName_tFileCopy_7);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_7.exists() || !srcFile_tFileCopy_7.isFile()) {
					String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_7 = String
							.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_7);
					System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_7);
				}
				String desDirName_tFileCopy_7 = context.ExtractPathFinal;

				String desFileName_tFileCopy_7 = "HBV1#MASTER FILE " + globalMap.get("dateError") + ".zip";

				if (desFileName_tFileCopy_7 != null && ("").equals(desFileName_tFileCopy_7.trim())) {
					desFileName_tFileCopy_7 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_7 = new java.io.File(desDirName_tFileCopy_7, desFileName_tFileCopy_7);

				if (!srcFile_tFileCopy_7.getPath().equals(desFile_tFileCopy_7.getPath())) {
					java.io.File parentFile_tFileCopy_7 = desFile_tFileCopy_7.getParentFile();

					if (parentFile_tFileCopy_7 != null && !parentFile_tFileCopy_7.exists()) {
						parentFile_tFileCopy_7.mkdirs();
					}
					try {
						org.talend.FileCopy.copyFile(srcFile_tFileCopy_7.getPath(), desFile_tFileCopy_7.getPath(),
								false);
					} catch (Exception e) {
						System.err.println("tFileCopy_7 " + e.getMessage());
					}

				}
				globalMap.put("tFileCopy_7_DESTINATION_FILEPATH", desFile_tFileCopy_7.getPath());
				globalMap.put("tFileCopy_7_DESTINATION_FILENAME", desFile_tFileCopy_7.getName());

				globalMap.put("tFileCopy_7_SOURCE_DIRECTORY", srcFile_tFileCopy_7.getParent());
				globalMap.put("tFileCopy_7_DESTINATION_DIRECTORY", desFile_tFileCopy_7.getParent());

				tos_count_tFileCopy_7++;

				/**
				 * [tFileCopy_7 main ] stop
				 */

				/**
				 * [tFileCopy_7 process_data_begin ] start
				 */

				currentComponent = "tFileCopy_7";

				/**
				 * [tFileCopy_7 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_7 process_data_end ] start
				 */

				currentComponent = "tFileCopy_7";

				/**
				 * [tFileCopy_7 process_data_end ] stop
				 */

				/**
				 * [tFileCopy_6 process_data_end ] start
				 */

				currentComponent = "tFileCopy_6";

				/**
				 * [tFileCopy_6 process_data_end ] stop
				 */

				/**
				 * [tFileCopy_5 process_data_end ] start
				 */

				currentComponent = "tFileCopy_5";

				/**
				 * [tFileCopy_5 process_data_end ] stop
				 */

				/**
				 * [tFileCopy_4 process_data_end ] start
				 */

				currentComponent = "tFileCopy_4";

				/**
				 * [tFileCopy_4 process_data_end ] stop
				 */

				/**
				 * [tFileCopy_1 process_data_end ] start
				 */

				currentComponent = "tFileCopy_1";

				/**
				 * [tFileCopy_1 process_data_end ] stop
				 */

				/**
				 * [tFileArchive_1 process_data_end ] start
				 */

				currentComponent = "tFileArchive_1";

				/**
				 * [tFileArchive_1 process_data_end ] stop
				 */

				/**
				 * [tSleep_5 process_data_end ] start
				 */

				currentComponent = "tSleep_5";

				/**
				 * [tSleep_5 process_data_end ] stop
				 */

				/**
				 * [tFileCopy_3 process_data_end ] start
				 */

				currentComponent = "tFileCopy_3";

				/**
				 * [tFileCopy_3 process_data_end ] stop
				 */

				/**
				 * [tFileCopy_2 process_data_end ] start
				 */

				currentComponent = "tFileCopy_2";

				/**
				 * [tFileCopy_2 process_data_end ] stop
				 */

				/**
				 * [tSleep_1 process_data_end ] start
				 */

				currentComponent = "tSleep_1";

				/**
				 * [tSleep_1 process_data_end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_end ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_end ] stop
				 */

				/**
				 * [tRunJob_3 process_data_end ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_end ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */

				/**
				 * [tSleep_1 end ] start
				 */

				currentComponent = "tSleep_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tSleep_1", true);
				end_Hash.put("tSleep_1", System.currentTimeMillis());

				/**
				 * [tSleep_1 end ] stop
				 */

				/**
				 * [tFileCopy_2 end ] start
				 */

				currentComponent = "tFileCopy_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFileCopy_2", true);
				end_Hash.put("tFileCopy_2", System.currentTimeMillis());

				/**
				 * [tFileCopy_2 end ] stop
				 */

				/**
				 * [tFileCopy_3 end ] start
				 */

				currentComponent = "tFileCopy_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tFileCopy_3", true);
				end_Hash.put("tFileCopy_3", System.currentTimeMillis());

				/**
				 * [tFileCopy_3 end ] stop
				 */

				/**
				 * [tSleep_5 end ] start
				 */

				currentComponent = "tSleep_5";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tSleep_5", true);
				end_Hash.put("tSleep_5", System.currentTimeMillis());

				/**
				 * [tSleep_5 end ] stop
				 */

				/**
				 * [tFileArchive_1 end ] start
				 */

				currentComponent = "tFileArchive_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tFileArchive_1", true);
				end_Hash.put("tFileArchive_1", System.currentTimeMillis());

				/**
				 * [tFileArchive_1 end ] stop
				 */

				/**
				 * [tFileCopy_1 end ] start
				 */

				currentComponent = "tFileCopy_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tFileCopy_1", true);
				end_Hash.put("tFileCopy_1", System.currentTimeMillis());

				/**
				 * [tFileCopy_1 end ] stop
				 */

				/**
				 * [tFileCopy_4 end ] start
				 */

				currentComponent = "tFileCopy_4";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tFileCopy_4", true);
				end_Hash.put("tFileCopy_4", System.currentTimeMillis());

				/**
				 * [tFileCopy_4 end ] stop
				 */

				/**
				 * [tFileCopy_5 end ] start
				 */

				currentComponent = "tFileCopy_5";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tFileCopy_5", true);
				end_Hash.put("tFileCopy_5", System.currentTimeMillis());

				/**
				 * [tFileCopy_5 end ] stop
				 */

				/**
				 * [tFileCopy_6 end ] start
				 */

				currentComponent = "tFileCopy_6";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tFileCopy_6", true);
				end_Hash.put("tFileCopy_6", System.currentTimeMillis());

				/**
				 * [tFileCopy_6 end ] stop
				 */

				/**
				 * [tFileCopy_7 end ] start
				 */

				currentComponent = "tFileCopy_7";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tFileCopy_7", true);
				end_Hash.put("tFileCopy_7", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileList_1Process(globalMap);

				/**
				 * [tFileCopy_7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */

				/**
				 * [tSleep_1 finally ] start
				 */

				currentComponent = "tSleep_1";

				/**
				 * [tSleep_1 finally ] stop
				 */

				/**
				 * [tFileCopy_2 finally ] start
				 */

				currentComponent = "tFileCopy_2";

				/**
				 * [tFileCopy_2 finally ] stop
				 */

				/**
				 * [tFileCopy_3 finally ] start
				 */

				currentComponent = "tFileCopy_3";

				/**
				 * [tFileCopy_3 finally ] stop
				 */

				/**
				 * [tSleep_5 finally ] start
				 */

				currentComponent = "tSleep_5";

				/**
				 * [tSleep_5 finally ] stop
				 */

				/**
				 * [tFileArchive_1 finally ] start
				 */

				currentComponent = "tFileArchive_1";

				/**
				 * [tFileArchive_1 finally ] stop
				 */

				/**
				 * [tFileCopy_1 finally ] start
				 */

				currentComponent = "tFileCopy_1";

				/**
				 * [tFileCopy_1 finally ] stop
				 */

				/**
				 * [tFileCopy_4 finally ] start
				 */

				currentComponent = "tFileCopy_4";

				/**
				 * [tFileCopy_4 finally ] stop
				 */

				/**
				 * [tFileCopy_5 finally ] start
				 */

				currentComponent = "tFileCopy_5";

				/**
				 * [tFileCopy_5 finally ] stop
				 */

				/**
				 * [tFileCopy_6 finally ] start
				 */

				currentComponent = "tFileCopy_6";

				/**
				 * [tFileCopy_6 finally ] stop
				 */

				/**
				 * [tFileCopy_7 finally ] start
				 */

				currentComponent = "tFileCopy_7";

				/**
				 * [tFileCopy_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileDelete_2 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.ExtractPath;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("*.*");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
							filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1.getName()
								.substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */

					/**
					 * [tFileList_1 process_data_begin ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_begin ] stop
					 */
					NB_ITERATE_tFileDelete_2++;

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileDelete_2);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileDelete_2 begin ] start
					 */

					ok_Hash.put("tFileDelete_2", false);
					start_Hash.put("tFileDelete_2", System.currentTimeMillis());

					currentComponent = "tFileDelete_2";

					int tos_count_tFileDelete_2 = 0;

					/**
					 * [tFileDelete_2 begin ] stop
					 */

					/**
					 * [tFileDelete_2 main ] start
					 */

					currentComponent = "tFileDelete_2";

					class DeleteFoldertFileDelete_2 {
						/**
						 * delete all the sub-files in 'file'
						 * 
						 * @param file
						 */
						public boolean delete(java.io.File file) {
							java.io.File[] files = file.listFiles();
							for (int i = 0; i < files.length; i++) {
								if (files[i].isFile()) {
									files[i].delete();
								} else if (files[i].isDirectory()) {
									if (!files[i].delete()) {
										delete(files[i]);
									}
								}
							}
							deleteDirectory(file);
							return file.delete();
						}

						/**
						 * delete all the sub-folders in 'file'
						 * 
						 * @param file
						 */
						private void deleteDirectory(java.io.File file) {
							java.io.File[] filed = file.listFiles();
							for (int i = 0; i < filed.length; i++) {
								if (filed[i].isDirectory()) {
									deleteDirectory(filed[i]);
								}
								filed[i].delete();
							}
						}

					}
					java.io.File file_tFileDelete_2 = new java.io.File(
							((String) globalMap.get("tFileList_1_CURRENT_FILEPATH")));
					if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
						if (file_tFileDelete_2.delete()) {
							globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
						} else {
							globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
							throw new RuntimeException(
									"File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
						}
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
						throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath()
								+ " does not exist or is invalid or is not a file.");
					}
					globalMap.put("tFileDelete_2_DELETE_PATH",
							((String) globalMap.get("tFileList_1_CURRENT_FILEPATH")));

					tos_count_tFileDelete_2++;

					/**
					 * [tFileDelete_2 main ] stop
					 */

					/**
					 * [tFileDelete_2 process_data_begin ] start
					 */

					currentComponent = "tFileDelete_2";

					/**
					 * [tFileDelete_2 process_data_begin ] stop
					 */

					/**
					 * [tFileDelete_2 process_data_end ] start
					 */

					currentComponent = "tFileDelete_2";

					/**
					 * [tFileDelete_2 process_data_end ] stop
					 */

					/**
					 * [tFileDelete_2 end ] start
					 */

					currentComponent = "tFileDelete_2";

					ok_Hash.put("tFileDelete_2", true);
					end_Hash.put("tFileDelete_2", System.currentTimeMillis());

					/**
					 * [tFileDelete_2 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileDelete_2);
					}

					/**
					 * [tFileList_1 process_data_end ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public Object EntitiesNotExists;

		public Object getEntitiesNotExists() {
			return this.EntitiesNotExists;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

					this.EntitiesNotExists = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.EntitiesNotExists);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EntitiesNotExists=" + String.valueOf(EntitiesNotExists));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public Object EntitiesNotExists;

		public Object getEntitiesNotExists() {
			return this.EntitiesNotExists;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

					this.EntitiesNotExists = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.EntitiesNotExists);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EntitiesNotExists=" + String.valueOf(EntitiesNotExists));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSleep_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSleep_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tSleep_2 begin ] start
				 */

				ok_Hash.put("tSleep_2", false);
				start_Hash.put("tSleep_2", System.currentTimeMillis());

				currentComponent = "tSleep_2";

				int tos_count_tSleep_2 = 0;

				/**
				 * [tSleep_2 begin ] stop
				 */

				/**
				 * [tSleep_2 main ] start
				 */

				currentComponent = "tSleep_2";

				Thread.sleep((1) * 1000);

				tos_count_tSleep_2++;

				/**
				 * [tSleep_2 main ] stop
				 */

				/**
				 * [tSleep_2 process_data_begin ] start
				 */

				currentComponent = "tSleep_2";

				/**
				 * [tSleep_2 process_data_begin ] stop
				 */

				/**
				 * [tJavaRow_1 main ] start
				 */

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
				}

				context.ErrorDataEntity += (String) globalMap.get("tForeach_1_CURRENT_VALUE") + " not found \n";
				nb_line_tJavaRow_1++;

				tos_count_tJavaRow_1++;

				/**
				 * [tJavaRow_1 main ] stop
				 */

				/**
				 * [tJavaRow_1 process_data_begin ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_1 main ] start
				 */

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
				}

///////////////////////		

				strBuffer_tLogRow_1 = new StringBuilder();

				if (row7.EntitiesNotExists != null) { //

					strBuffer_tLogRow_1.append(String.valueOf(row7.EntitiesNotExists));

				} //

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}
				consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
				consoleOut_tLogRow_1.flush();
				nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

				tos_count_tLogRow_1++;

				/**
				 * [tLogRow_1 main ] stop
				 */

				/**
				 * [tLogRow_1 process_data_begin ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_1 process_data_end ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_end ] stop
				 */

				/**
				 * [tJavaRow_1 process_data_end ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 process_data_end ] stop
				 */

				/**
				 * [tSleep_2 process_data_end ] start
				 */

				currentComponent = "tSleep_2";

				/**
				 * [tSleep_2 process_data_end ] stop
				 */

				/**
				 * [tSleep_2 end ] start
				 */

				currentComponent = "tSleep_2";

				ok_Hash.put("tSleep_2", true);
				end_Hash.put("tSleep_2", System.currentTimeMillis());

				/**
				 * [tSleep_2 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSleep_2 finally ] start
				 */

				currentComponent = "tSleep_2";

				/**
				 * [tSleep_2 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSleep_2_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct
			implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
		static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_INTEGRATION.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_INTEGRATION.length == 0) {
						commonByteArray_DEV_BUY_INTEGRATION = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_INTEGRATION = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_INTEGRATION, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_INTEGRATION, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_INTEGRATION) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_FILE begin ] start
				 */

				ok_Hash.put("talendLogs_FILE", false);
				start_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Main");
				}

				int tos_count_talendLogs_FILE = 0;

				String fileName_talendLogs_FILE = "";
				fileName_talendLogs_FILE = (new java.io.File(context.LogPath + "/" + "logs_file"
						+ TalendDate.formatDate("yyyy-MM-ddHH", new Date()) + ".txt")).getAbsolutePath().replace("\\",
								"/");
				String fullName_talendLogs_FILE = null;
				String extension_talendLogs_FILE = null;
				String directory_talendLogs_FILE = null;
				if ((fileName_talendLogs_FILE.indexOf("/") != -1)) {
					if (fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE.lastIndexOf("/")) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0,
								fileName_talendLogs_FILE.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE.lastIndexOf("."));
					}
					directory_talendLogs_FILE = fileName_talendLogs_FILE.substring(0,
							fileName_talendLogs_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0,
								fileName_talendLogs_FILE.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE.lastIndexOf("."));
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					}
					directory_talendLogs_FILE = "";
				}
				boolean isFileGenerated_talendLogs_FILE = true;
				java.io.File filetalendLogs_FILE = new java.io.File(fileName_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME", fileName_talendLogs_FILE);
				if (filetalendLogs_FILE.exists()) {
					isFileGenerated_talendLogs_FILE = false;
				}
				int nb_line_talendLogs_FILE = 0;
				int splitedFileNo_talendLogs_FILE = 0;
				int currentRow_talendLogs_FILE = 0;

				final String OUT_DELIM_talendLogs_FILE = /** Start field talendLogs_FILE:FIELDSEPARATOR */
						";"/** End field talendLogs_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendLogs_FILE = /** Start field talendLogs_FILE:ROWSEPARATOR */
						"\n"/** End field talendLogs_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendLogs_FILE != null && directory_talendLogs_FILE.trim().length() != 0) {
					java.io.File dir_talendLogs_FILE = new java.io.File(directory_talendLogs_FILE);
					if (!dir_talendLogs_FILE.exists()) {
						dir_talendLogs_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendLogs_FILE = null;

				outtalendLogs_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_talendLogs_FILE, true), "ISO-8859-15"));

				resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
				resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

				/**
				 * [talendLogs_FILE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE main ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Main");
						}

						StringBuilder sb_talendLogs_FILE = new StringBuilder();
						if (row_talendLogs_LOGS.moment != null) {
							sb_talendLogs_FILE.append(
									FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss"));
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.pid != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.root_pid != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.root_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.father_pid != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.father_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.project != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.project);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.job != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.job);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.context != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.context);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.priority != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.priority);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.type != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.type);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.origin != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.origin);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.message != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.message);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.code != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.code);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);

						nb_line_talendLogs_FILE++;
						resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

						outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());

						tos_count_talendLogs_FILE++;

						/**
						 * [talendLogs_FILE main ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(String.format(
							"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_FILE end ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (outtalendLogs_FILE != null) {
					outtalendLogs_FILE.flush();
					outtalendLogs_FILE.close();
				}

				globalMap.put("talendLogs_FILE_NB_LINE", nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME", fileName_talendLogs_FILE);

				resourceMap.put("finish_talendLogs_FILE", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Main");
				}

				ok_Hash.put("talendLogs_FILE", true);
				end_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				/**
				 * [talendLogs_FILE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_FILE finally ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (resourceMap.get("finish_talendLogs_FILE") == null) {

					java.io.Writer outtalendLogs_FILE = (java.io.Writer) resourceMap.get("out_talendLogs_FILE");
					if (outtalendLogs_FILE != null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}

				}

				/**
				 * [talendLogs_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final BUY_INTEGRATION BUY_INTEGRATIONClass = new BUY_INTEGRATION();

		int exitCode = BUY_INTEGRATIONClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = BUY_INTEGRATION.class.getClassLoader()
					.getResourceAsStream("dev/buy_integration_0_6/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = BUY_INTEGRATION.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("IntegrationPath", "id_String");
					context.IntegrationPath = (String) context.getProperty("IntegrationPath");
					context.setContextType("LogPath", "id_String");
					context.LogPath = (String) context.getProperty("LogPath");
					context.setContextType("ExtractPath", "id_String");
					context.ExtractPath = (String) context.getProperty("ExtractPath");
					context.setContextType("ReferentielPath", "id_String");
					context.ReferentielPath = (String) context.getProperty("ReferentielPath");
					context.setContextType("ExtractPathFinal", "id_String");
					context.ExtractPathFinal = (String) context.getProperty("ExtractPathFinal");
					context.setContextType("ErrorDataEntity", "id_String");
					context.ErrorDataEntity = (String) context.getProperty("ErrorDataEntity");
					context.setContextType("ModelFilePath", "id_String");
					context.ModelFilePath = (String) context.getProperty("ModelFilePath");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("IntegrationPath")) {
				context.IntegrationPath = (String) parentContextMap.get("IntegrationPath");
			}
			if (parentContextMap.containsKey("LogPath")) {
				context.LogPath = (String) parentContextMap.get("LogPath");
			}
			if (parentContextMap.containsKey("ExtractPath")) {
				context.ExtractPath = (String) parentContextMap.get("ExtractPath");
			}
			if (parentContextMap.containsKey("ReferentielPath")) {
				context.ReferentielPath = (String) parentContextMap.get("ReferentielPath");
			}
			if (parentContextMap.containsKey("ExtractPathFinal")) {
				context.ExtractPathFinal = (String) parentContextMap.get("ExtractPathFinal");
			}
			if (parentContextMap.containsKey("ErrorDataEntity")) {
				context.ErrorDataEntity = (String) parentContextMap.get("ErrorDataEntity");
			}
			if (parentContextMap.containsKey("ModelFilePath")) {
				context.ModelFilePath = (String) parentContextMap.get("ModelFilePath");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tWaitForFile_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tWaitForFile_1) {
			globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", -1);

			e_tWaitForFile_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : BUY_INTEGRATION");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 232531 characters generated by Talend Open Studio for Data Integration on the
 * 23 novembre 2021 à 11:58:21 CET
 ************************************************************************************************/