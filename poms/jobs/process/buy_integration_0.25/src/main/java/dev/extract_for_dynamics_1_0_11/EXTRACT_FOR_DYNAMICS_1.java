// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.extract_for_dynamics_1_0_11;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;
import java.util.*;
import java.lang.reflect.*;


@SuppressWarnings("unused")

/**
 * Job: EXTRACT_FOR_DYNAMICS_1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class EXTRACT_FOR_DYNAMICS_1 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ErrorHeader != null){
				
					this.setProperty("ErrorHeader", ErrorHeader.toString());
				
			}
			
			if(hasErrorHeader != null){
				
					this.setProperty("hasErrorHeader", hasErrorHeader.toString());
				
			}
			
			if(dateValidation != null){
				
					this.setProperty("dateValidation", dateValidation.toString());
				
			}
			
			if(timeValidation != null){
				
					this.setProperty("timeValidation", timeValidation.toString());
				
			}
			
			if(ReferentielPath != null){
				
					this.setProperty("ReferentielPath", ReferentielPath.toString());
				
			}
			
			if(IntegrationExcelPath != null){
				
					this.setProperty("IntegrationExcelPath", IntegrationExcelPath.toString());
				
			}
			
			if(ExcelFileName != null){
				
					this.setProperty("ExcelFileName", ExcelFileName.toString());
				
			}
			
			if(LogPath != null){
				
					this.setProperty("LogPath", LogPath.toString());
				
			}
			
			if(isNike != null){
				
					this.setProperty("isNike", isNike.toString());
				
			}
			
			if(ExtractPath != null){
				
					this.setProperty("ExtractPath", ExtractPath.toString());
				
			}
			
			if(ExtractPathHBE != null){
				
					this.setProperty("ExtractPathHBE", ExtractPathHBE.toString());
				
			}
			
			if(ExtractPathOTHER != null){
				
					this.setProperty("ExtractPathOTHER", ExtractPathOTHER.toString());
				
			}
			
		}

public String ErrorHeader;
public String getErrorHeader(){
	return this.ErrorHeader;
}
public Boolean hasErrorHeader;
public Boolean getHasErrorHeader(){
	return this.hasErrorHeader;
}
public String dateValidation;
public String getDateValidation(){
	return this.dateValidation;
}
public String timeValidation;
public String getTimeValidation(){
	return this.timeValidation;
}
public String ReferentielPath;
public String getReferentielPath(){
	return this.ReferentielPath;
}
public String IntegrationExcelPath;
public String getIntegrationExcelPath(){
	return this.IntegrationExcelPath;
}
public String ExcelFileName;
public String getExcelFileName(){
	return this.ExcelFileName;
}
public String LogPath;
public String getLogPath(){
	return this.LogPath;
}
public Boolean isNike;
public Boolean getIsNike(){
	return this.isNike;
}
public String ExtractPath;
public String getExtractPath(){
	return this.ExtractPath;
}
public String ExtractPathHBE;
public String getExtractPathHBE(){
	return this.ExtractPathHBE;
}
public String ExtractPathOTHER;
public String getExtractPathOTHER(){
	return this.ExtractPathOTHER;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.11";
	private final String jobName = "EXTRACT_FOR_DYNAMICS_1";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				EXTRACT_FOR_DYNAMICS_1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(EXTRACT_FOR_DYNAMICS_1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashOutput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_copyOfcopyOfsortie_fashion_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashOutput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public Object ExcelSchema;

				public Object getExcelSchema () {
					return this.ExcelSchema;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
						this.ExcelSchema = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ExcelSchema);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ExcelSchema="+String.valueOf(ExcelSchema));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				
			    public String newColumn46;

				public String getNewColumn46 () {
					return this.newColumn46;
				}
				
			    public String newColumn47;

				public String getNewColumn47 () {
					return this.newColumn47;
				}
				
			    public String newColumn48;

				public String getNewColumn48 () {
					return this.newColumn48;
				}
				
			    public String newColumn49;

				public String getNewColumn49 () {
					return this.newColumn49;
				}
				
			    public String newColumn50;

				public String getNewColumn50 () {
					return this.newColumn50;
				}
				
			    public String newColumn51;

				public String getNewColumn51 () {
					return this.newColumn51;
				}
				
			    public String newColumn52;

				public String getNewColumn52 () {
					return this.newColumn52;
				}
				
			    public String newColumn53;

				public String getNewColumn53 () {
					return this.newColumn53;
				}
				
			    public String newColumn54;

				public String getNewColumn54 () {
					return this.newColumn54;
				}
				
			    public String newColumn55;

				public String getNewColumn55 () {
					return this.newColumn55;
				}
				
			    public String newColumn56;

				public String getNewColumn56 () {
					return this.newColumn56;
				}
				
			    public String newColumn57;

				public String getNewColumn57 () {
					return this.newColumn57;
				}
				
			    public String newColumn58;

				public String getNewColumn58 () {
					return this.newColumn58;
				}
				
			    public String newColumn59;

				public String getNewColumn59 () {
					return this.newColumn59;
				}
				
			    public String newColumn60;

				public String getNewColumn60 () {
					return this.newColumn60;
				}
				
			    public String newColumn61;

				public String getNewColumn61 () {
					return this.newColumn61;
				}
				
			    public String newColumn62;

				public String getNewColumn62 () {
					return this.newColumn62;
				}
				
			    public String newColumn63;

				public String getNewColumn63 () {
					return this.newColumn63;
				}
				
			    public String newColumn64;

				public String getNewColumn64 () {
					return this.newColumn64;
				}
				
			    public String newColumn65;

				public String getNewColumn65 () {
					return this.newColumn65;
				}
				
			    public String newColumn66;

				public String getNewColumn66 () {
					return this.newColumn66;
				}
				
			    public String newColumn67;

				public String getNewColumn67 () {
					return this.newColumn67;
				}
				
			    public String newColumn68;

				public String getNewColumn68 () {
					return this.newColumn68;
				}
				
			    public String newColumn69;

				public String getNewColumn69 () {
					return this.newColumn69;
				}
				
			    public String newColumn70;

				public String getNewColumn70 () {
					return this.newColumn70;
				}
				
			    public String newColumn71;

				public String getNewColumn71 () {
					return this.newColumn71;
				}
				
			    public String newColumn72;

				public String getNewColumn72 () {
					return this.newColumn72;
				}
				
			    public String newColumn73;

				public String getNewColumn73 () {
					return this.newColumn73;
				}
				
			    public String newColumn74;

				public String getNewColumn74 () {
					return this.newColumn74;
				}
				
			    public String newColumn75;

				public String getNewColumn75 () {
					return this.newColumn75;
				}
				
			    public String newColumn76;

				public String getNewColumn76 () {
					return this.newColumn76;
				}
				
			    public String newColumn77;

				public String getNewColumn77 () {
					return this.newColumn77;
				}
				
			    public String newColumn78;

				public String getNewColumn78 () {
					return this.newColumn78;
				}
				
			    public String newColumn79;

				public String getNewColumn79 () {
					return this.newColumn79;
				}
				
			    public String newColumn80;

				public String getNewColumn80 () {
					return this.newColumn80;
				}
				
			    public String newColumn81;

				public String getNewColumn81 () {
					return this.newColumn81;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
					this.newColumn46 = readString(dis);
					
					this.newColumn47 = readString(dis);
					
					this.newColumn48 = readString(dis);
					
					this.newColumn49 = readString(dis);
					
					this.newColumn50 = readString(dis);
					
					this.newColumn51 = readString(dis);
					
					this.newColumn52 = readString(dis);
					
					this.newColumn53 = readString(dis);
					
					this.newColumn54 = readString(dis);
					
					this.newColumn55 = readString(dis);
					
					this.newColumn56 = readString(dis);
					
					this.newColumn57 = readString(dis);
					
					this.newColumn58 = readString(dis);
					
					this.newColumn59 = readString(dis);
					
					this.newColumn60 = readString(dis);
					
					this.newColumn61 = readString(dis);
					
					this.newColumn62 = readString(dis);
					
					this.newColumn63 = readString(dis);
					
					this.newColumn64 = readString(dis);
					
					this.newColumn65 = readString(dis);
					
					this.newColumn66 = readString(dis);
					
					this.newColumn67 = readString(dis);
					
					this.newColumn68 = readString(dis);
					
					this.newColumn69 = readString(dis);
					
					this.newColumn70 = readString(dis);
					
					this.newColumn71 = readString(dis);
					
					this.newColumn72 = readString(dis);
					
					this.newColumn73 = readString(dis);
					
					this.newColumn74 = readString(dis);
					
					this.newColumn75 = readString(dis);
					
					this.newColumn76 = readString(dis);
					
					this.newColumn77 = readString(dis);
					
					this.newColumn78 = readString(dis);
					
					this.newColumn79 = readString(dis);
					
					this.newColumn80 = readString(dis);
					
					this.newColumn81 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
					// String
				
						writeString(this.newColumn46,dos);
					
					// String
				
						writeString(this.newColumn47,dos);
					
					// String
				
						writeString(this.newColumn48,dos);
					
					// String
				
						writeString(this.newColumn49,dos);
					
					// String
				
						writeString(this.newColumn50,dos);
					
					// String
				
						writeString(this.newColumn51,dos);
					
					// String
				
						writeString(this.newColumn52,dos);
					
					// String
				
						writeString(this.newColumn53,dos);
					
					// String
				
						writeString(this.newColumn54,dos);
					
					// String
				
						writeString(this.newColumn55,dos);
					
					// String
				
						writeString(this.newColumn56,dos);
					
					// String
				
						writeString(this.newColumn57,dos);
					
					// String
				
						writeString(this.newColumn58,dos);
					
					// String
				
						writeString(this.newColumn59,dos);
					
					// String
				
						writeString(this.newColumn60,dos);
					
					// String
				
						writeString(this.newColumn61,dos);
					
					// String
				
						writeString(this.newColumn62,dos);
					
					// String
				
						writeString(this.newColumn63,dos);
					
					// String
				
						writeString(this.newColumn64,dos);
					
					// String
				
						writeString(this.newColumn65,dos);
					
					// String
				
						writeString(this.newColumn66,dos);
					
					// String
				
						writeString(this.newColumn67,dos);
					
					// String
				
						writeString(this.newColumn68,dos);
					
					// String
				
						writeString(this.newColumn69,dos);
					
					// String
				
						writeString(this.newColumn70,dos);
					
					// String
				
						writeString(this.newColumn71,dos);
					
					// String
				
						writeString(this.newColumn72,dos);
					
					// String
				
						writeString(this.newColumn73,dos);
					
					// String
				
						writeString(this.newColumn74,dos);
					
					// String
				
						writeString(this.newColumn75,dos);
					
					// String
				
						writeString(this.newColumn76,dos);
					
					// String
				
						writeString(this.newColumn77,dos);
					
					// String
				
						writeString(this.newColumn78,dos);
					
					// String
				
						writeString(this.newColumn79,dos);
					
					// String
				
						writeString(this.newColumn80,dos);
					
					// String
				
						writeString(this.newColumn81,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
		sb.append(",newColumn46="+newColumn46);
		sb.append(",newColumn47="+newColumn47);
		sb.append(",newColumn48="+newColumn48);
		sb.append(",newColumn49="+newColumn49);
		sb.append(",newColumn50="+newColumn50);
		sb.append(",newColumn51="+newColumn51);
		sb.append(",newColumn52="+newColumn52);
		sb.append(",newColumn53="+newColumn53);
		sb.append(",newColumn54="+newColumn54);
		sb.append(",newColumn55="+newColumn55);
		sb.append(",newColumn56="+newColumn56);
		sb.append(",newColumn57="+newColumn57);
		sb.append(",newColumn58="+newColumn58);
		sb.append(",newColumn59="+newColumn59);
		sb.append(",newColumn60="+newColumn60);
		sb.append(",newColumn61="+newColumn61);
		sb.append(",newColumn62="+newColumn62);
		sb.append(",newColumn63="+newColumn63);
		sb.append(",newColumn64="+newColumn64);
		sb.append(",newColumn65="+newColumn65);
		sb.append(",newColumn66="+newColumn66);
		sb.append(",newColumn67="+newColumn67);
		sb.append(",newColumn68="+newColumn68);
		sb.append(",newColumn69="+newColumn69);
		sb.append(",newColumn70="+newColumn70);
		sb.append(",newColumn71="+newColumn71);
		sb.append(",newColumn72="+newColumn72);
		sb.append(",newColumn73="+newColumn73);
		sb.append(",newColumn74="+newColumn74);
		sb.append(",newColumn75="+newColumn75);
		sb.append(",newColumn76="+newColumn76);
		sb.append(",newColumn77="+newColumn77);
		sb.append(",newColumn78="+newColumn78);
		sb.append(",newColumn79="+newColumn79);
		sb.append(",newColumn80="+newColumn80);
		sb.append(",newColumn81="+newColumn81);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[1];

        public void addRow(String[] row) {

            for (int i = 0; i < 1; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 0 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);	                

                  
                    //last column
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length()+2; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"ExcelSchema",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[+FohwLdp4uYsUARkPl83+KuMI9tzwGL8SmM7nA==]");
        String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
        if (password_tFileInputExcel_1.isEmpty()){
            password_tFileInputExcel_1 = null;
        }
			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = context.IntegrationExcelPath + context.ExcelFileName;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_1), password_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_1, password_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, 0, false));
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 0;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = 1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;
        Integer lastColumn_tFileInputExcel_1 = 80;
        if(lastColumn_tFileInputExcel_1!=null){
        	end_column_tFileInputExcel_1 = lastColumn_tFileInputExcel_1.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_1 = 82;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn";

				row1.newColumn = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn1";

				row1.newColumn1 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn1 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn2";

				row1.newColumn2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn2 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn3";

				row1.newColumn3 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn3 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn4";

				row1.newColumn4 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn4 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn5";

				row1.newColumn5 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn5 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn6";

				row1.newColumn6 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn6 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn7";

				row1.newColumn7 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn7 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn8";

				row1.newColumn8 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn8 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn9";

				row1.newColumn9 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn9 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 10;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn10";

				row1.newColumn10 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 11;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn11";

				row1.newColumn11 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 12;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn12";

				row1.newColumn12 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 13;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn13";

				row1.newColumn13 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 14;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn14";

				row1.newColumn14 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 15;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn15";

				row1.newColumn15 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 16;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn16";

				row1.newColumn16 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 17;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn17";

				row1.newColumn17 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 18;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn18";

				row1.newColumn18 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 19;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn19";

				row1.newColumn19 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 20;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn20";

				row1.newColumn20 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 21;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn21";

				row1.newColumn21 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 22;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn22";

				row1.newColumn22 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 23;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn23";

				row1.newColumn23 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 24;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn24";

				row1.newColumn24 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 25;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn25";

				row1.newColumn25 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 26;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn26";

				row1.newColumn26 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn26 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 27;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn27";

				row1.newColumn27 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn27 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 28;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn28";

				row1.newColumn28 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn28 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 29;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn29";

				row1.newColumn29 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn29 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 30;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn30";

				row1.newColumn30 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn30 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 31;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn31";

				row1.newColumn31 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn31 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 32;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn32";

				row1.newColumn32 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn32 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 33;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn33";

				row1.newColumn33 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn33 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 34;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn34";

				row1.newColumn34 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn34 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 35;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn35";

				row1.newColumn35 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn35 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 36;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn36";

				row1.newColumn36 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn36 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 37;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn37";

				row1.newColumn37 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn37 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 38;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn38";

				row1.newColumn38 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn38 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 39;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn39";

				row1.newColumn39 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn39 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 40;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn40";

				row1.newColumn40 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn40 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 41;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn41";

				row1.newColumn41 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn41 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 42;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn42";

				row1.newColumn42 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn42 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 43;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn43";

				row1.newColumn43 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn43 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 44;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn44";

				row1.newColumn44 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn44 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 45;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn45";

				row1.newColumn45 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn45 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 46;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn46";

				row1.newColumn46 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn46 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 47;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn47";

				row1.newColumn47 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn47 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 48;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn48";

				row1.newColumn48 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn48 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 49;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn49";

				row1.newColumn49 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn49 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 50;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn50";

				row1.newColumn50 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn50 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 51;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn51";

				row1.newColumn51 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn51 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 52;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn52";

				row1.newColumn52 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn52 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 53;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn53";

				row1.newColumn53 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn53 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 54;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn54";

				row1.newColumn54 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn54 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 55;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn55";

				row1.newColumn55 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn55 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 56;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn56";

				row1.newColumn56 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn56 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 57;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn57";

				row1.newColumn57 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn57 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 58;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn58";

				row1.newColumn58 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn58 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 59;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn59";

				row1.newColumn59 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn59 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 60;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn60";

				row1.newColumn60 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn60 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 61;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn61";

				row1.newColumn61 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn61 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 62;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn62";

				row1.newColumn62 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn62 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 63;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn63";

				row1.newColumn63 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn63 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 64;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn64";

				row1.newColumn64 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn64 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 65;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn65";

				row1.newColumn65 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn65 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 66;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn66";

				row1.newColumn66 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn66 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 67;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn67";

				row1.newColumn67 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn67 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 68;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn68";

				row1.newColumn68 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn68 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 69;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn69";

				row1.newColumn69 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn69 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 70;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn70";

				row1.newColumn70 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn70 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 71;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn71";

				row1.newColumn71 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn71 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 72;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn72";

				row1.newColumn72 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn72 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 73;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn73";

				row1.newColumn73 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn73 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 74;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn74";

				row1.newColumn74 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn74 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 75;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn75";

				row1.newColumn75 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn75 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 76;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn76";

				row1.newColumn76 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn76 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 77;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn77";

				row1.newColumn77 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn77 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 78;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn78";

				row1.newColumn78 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn78 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 79;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn79";

				row1.newColumn79 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn79 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 80;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn80";

				row1.newColumn80 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn80 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 81;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn81";

				row1.newColumn81 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn81 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// row2.id = row1.id * 2;
//
// lowercase the name
// row2.name = row1.name.toLowerCase();

Map<String, String> fieldMap = (Map<String, String>)globalMap.get("fieldMap");

for( Field f : row1.getClass().getFields() ) {
	if (f.get(row1) != null)
	{
		fieldMap.put((String)f.get(row1), f.getName());
	}
   
}


row2.ExcelSchema = fieldMap;
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[1];
   				
	    		if(row2.ExcelSchema != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row2.ExcelSchema)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

   			if (context.hasErrorHeader == false) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("No_Error", 0, "true");
					}
				
    			tFileInputExcel_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("No_Error", 0, "false");
					}   	 
   				}



/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String PRODUCTCATEGORYNAME;

				public String getPRODUCTCATEGORYNAME () {
					return this.PRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTCATEGORYHIERARCHYNAME;

				public String getPRODUCTCATEGORYHIERARCHYNAME () {
					return this.PRODUCTCATEGORYHIERARCHYNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.PRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYHIERARCHYNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",PRODUCTCATEGORYNAME="+PRODUCTCATEGORYNAME);
		sb.append(",PRODUCTCATEGORYHIERARCHYNAME="+PRODUCTCATEGORYHIERARCHYNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				
			    public String ISDEFAULT;

				public String getISDEFAULT () {
					return this.ISDEFAULT;
				}
				
			    public String NOOS;

				public String getNOOS () {
					return this.NOOS;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
					this.ISDEFAULT = readString(dis);
					
					this.NOOS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
					// String
				
						writeString(this.ISDEFAULT,dos);
					
					// String
				
						writeString(this.NOOS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",SEASONCODE="+SEASONCODE);
		sb.append(",ISDEFAULT="+ISDEFAULT);
		sb.append(",NOOS="+NOOS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String INVENTSIZEID;

				public String getINVENTSIZEID () {
					return this.INVENTSIZEID;
				}
				
			    public String INVENTSTYLEID;

				public String getINVENTSTYLEID () {
					return this.INVENTSTYLEID;
				}
				
			    public String INVENTCOLORID;

				public String getINVENTCOLORID () {
					return this.INVENTCOLORID;
				}
				
			    public String ORIGCOUNTRYREGIONID;

				public String getORIGCOUNTRYREGIONID () {
					return this.ORIGCOUNTRYREGIONID;
				}
				
			    public String ORIGSTATEID;

				public String getORIGSTATEID () {
					return this.ORIGSTATEID;
				}
				
			    public String TODATE;

				public String getTODATE () {
					return this.TODATE;
				}
				
			    public String FROMDATE;

				public String getFROMDATE () {
					return this.FROMDATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.INVENTSIZEID = readString(dis);
					
					this.INVENTSTYLEID = readString(dis);
					
					this.INVENTCOLORID = readString(dis);
					
					this.ORIGCOUNTRYREGIONID = readString(dis);
					
					this.ORIGSTATEID = readString(dis);
					
					this.TODATE = readString(dis);
					
					this.FROMDATE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.INVENTSIZEID,dos);
					
					// String
				
						writeString(this.INVENTSTYLEID,dos);
					
					// String
				
						writeString(this.INVENTCOLORID,dos);
					
					// String
				
						writeString(this.ORIGCOUNTRYREGIONID,dos);
					
					// String
				
						writeString(this.ORIGSTATEID,dos);
					
					// String
				
						writeString(this.TODATE,dos);
					
					// String
				
						writeString(this.FROMDATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",INVENTSIZEID="+INVENTSIZEID);
		sb.append(",INVENTSTYLEID="+INVENTSTYLEID);
		sb.append(",INVENTCOLORID="+INVENTCOLORID);
		sb.append(",ORIGCOUNTRYREGIONID="+ORIGCOUNTRYREGIONID);
		sb.append(",ORIGSTATEID="+ORIGSTATEID);
		sb.append(",TODATE="+TODATE);
		sb.append(",FROMDATE="+FROMDATE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String INVENTSIZEID;

				public String getINVENTSIZEID () {
					return this.INVENTSIZEID;
				}
				
			    public String INVENTSTYLEID;

				public String getINVENTSTYLEID () {
					return this.INVENTSTYLEID;
				}
				
			    public String INVENTCOLORID;

				public String getINVENTCOLORID () {
					return this.INVENTCOLORID;
				}
				
			    public String ORIGCOUNTRYREGIONID;

				public String getORIGCOUNTRYREGIONID () {
					return this.ORIGCOUNTRYREGIONID;
				}
				
			    public String ORIGSTATEID;

				public String getORIGSTATEID () {
					return this.ORIGSTATEID;
				}
				
			    public String TODATE;

				public String getTODATE () {
					return this.TODATE;
				}
				
			    public String FROMDATE;

				public String getFROMDATE () {
					return this.FROMDATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.INVENTSIZEID = readString(dis);
					
					this.INVENTSTYLEID = readString(dis);
					
					this.INVENTCOLORID = readString(dis);
					
					this.ORIGCOUNTRYREGIONID = readString(dis);
					
					this.ORIGSTATEID = readString(dis);
					
					this.TODATE = readString(dis);
					
					this.FROMDATE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.INVENTSIZEID,dos);
					
					// String
				
						writeString(this.INVENTSTYLEID,dos);
					
					// String
				
						writeString(this.INVENTCOLORID,dos);
					
					// String
				
						writeString(this.ORIGCOUNTRYREGIONID,dos);
					
					// String
				
						writeString(this.ORIGSTATEID,dos);
					
					// String
				
						writeString(this.TODATE,dos);
					
					// String
				
						writeString(this.FROMDATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",INVENTSIZEID="+INVENTSIZEID);
		sb.append(",INVENTSTYLEID="+INVENTSTYLEID);
		sb.append(",INVENTCOLORID="+INVENTCOLORID);
		sb.append(",ORIGCOUNTRYREGIONID="+ORIGCOUNTRYREGIONID);
		sb.append(",ORIGSTATEID="+ORIGSTATEID);
		sb.append(",TODATE="+TODATE);
		sb.append(",FROMDATE="+FROMDATE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTMASTERSIZEID;

				public String getPRODUCTMASTERSIZEID () {
					return this.PRODUCTMASTERSIZEID;
				}
				
			    public String LANGUAGEID;

				public String getLANGUAGEID () {
					return this.LANGUAGEID;
				}
				
			    public String TRANSLATEDSIZEDESCRIPTION;

				public String getTRANSLATEDSIZEDESCRIPTION () {
					return this.TRANSLATEDSIZEDESCRIPTION;
				}
				
			    public String TRANSLATEDSIZENAME;

				public String getTRANSLATEDSIZENAME () {
					return this.TRANSLATEDSIZENAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTMASTERSIZEID = readString(dis);
					
					this.LANGUAGEID = readString(dis);
					
					this.TRANSLATEDSIZEDESCRIPTION = readString(dis);
					
					this.TRANSLATEDSIZENAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTMASTERSIZEID,dos);
					
					// String
				
						writeString(this.LANGUAGEID,dos);
					
					// String
				
						writeString(this.TRANSLATEDSIZEDESCRIPTION,dos);
					
					// String
				
						writeString(this.TRANSLATEDSIZENAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTMASTERSIZEID="+PRODUCTMASTERSIZEID);
		sb.append(",LANGUAGEID="+LANGUAGEID);
		sb.append(",TRANSLATEDSIZEDESCRIPTION="+TRANSLATEDSIZEDESCRIPTION);
		sb.append(",TRANSLATEDSIZENAME="+TRANSLATEDSIZENAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTMASTERSTYLEID;

				public String getPRODUCTMASTERSTYLEID () {
					return this.PRODUCTMASTERSTYLEID;
				}
				
			    public String LANGUAGEID;

				public String getLANGUAGEID () {
					return this.LANGUAGEID;
				}
				
			    public String TRANSLATEDSTYLEDESCRIPTION;

				public String getTRANSLATEDSTYLEDESCRIPTION () {
					return this.TRANSLATEDSTYLEDESCRIPTION;
				}
				
			    public String TRANSLATEDSTYLENAME;

				public String getTRANSLATEDSTYLENAME () {
					return this.TRANSLATEDSTYLENAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTMASTERSTYLEID = readString(dis);
					
					this.LANGUAGEID = readString(dis);
					
					this.TRANSLATEDSTYLEDESCRIPTION = readString(dis);
					
					this.TRANSLATEDSTYLENAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTMASTERSTYLEID,dos);
					
					// String
				
						writeString(this.LANGUAGEID,dos);
					
					// String
				
						writeString(this.TRANSLATEDSTYLEDESCRIPTION,dos);
					
					// String
				
						writeString(this.TRANSLATEDSTYLENAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTMASTERSTYLEID="+PRODUCTMASTERSTYLEID);
		sb.append(",LANGUAGEID="+LANGUAGEID);
		sb.append(",TRANSLATEDSTYLEDESCRIPTION="+TRANSLATEDSTYLEDESCRIPTION);
		sb.append(",TRANSLATEDSTYLENAME="+TRANSLATEDSTYLENAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				
			    public String DROPID;

				public String getDROPID () {
					return this.DROPID;
				}
				
			    public String DISPLAYORDER;

				public String getDISPLAYORDER () {
					return this.DISPLAYORDER;
				}
				
			    public String ISDEFAULT;

				public String getISDEFAULT () {
					return this.ISDEFAULT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
					this.DROPID = readString(dis);
					
					this.DISPLAYORDER = readString(dis);
					
					this.ISDEFAULT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
					// String
				
						writeString(this.DROPID,dos);
					
					// String
				
						writeString(this.DISPLAYORDER,dos);
					
					// String
				
						writeString(this.ISDEFAULT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",SEASONCODE="+SEASONCODE);
		sb.append(",DROPID="+DROPID);
		sb.append(",DISPLAYORDER="+DISPLAYORDER);
		sb.append(",ISDEFAULT="+ISDEFAULT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				
			    public String DROPID;

				public String getDROPID () {
					return this.DROPID;
				}
				
			    public String DISPLAYORDER;

				public String getDISPLAYORDER () {
					return this.DISPLAYORDER;
				}
				
			    public String ISDEFAULT;

				public String getISDEFAULT () {
					return this.ISDEFAULT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
					this.DROPID = readString(dis);
					
					this.DISPLAYORDER = readString(dis);
					
					this.ISDEFAULT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
					// String
				
						writeString(this.DROPID,dos);
					
					// String
				
						writeString(this.DISPLAYORDER,dos);
					
					// String
				
						writeString(this.ISDEFAULT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",SEASONCODE="+SEASONCODE);
		sb.append(",DROPID="+DROPID);
		sb.append(",DISPLAYORDER="+DISPLAYORDER);
		sb.append(",ISDEFAULT="+ISDEFAULT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfsortie_size_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_size_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				
			    public String DROPID;

				public String getDROPID () {
					return this.DROPID;
				}
				
			    public String DISPLAYORDER;

				public String getDISPLAYORDER () {
					return this.DISPLAYORDER;
				}
				
			    public String ISDEFAULT;

				public String getISDEFAULT () {
					return this.ISDEFAULT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
					this.DROPID = readString(dis);
					
					this.DISPLAYORDER = readString(dis);
					
					this.ISDEFAULT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
					// String
				
						writeString(this.DROPID,dos);
					
					// String
				
						writeString(this.DISPLAYORDER,dos);
					
					// String
				
						writeString(this.ISDEFAULT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",SEASONCODE="+SEASONCODE);
		sb.append(",DROPID="+DROPID);
		sb.append(",DISPLAYORDER="+DISPLAYORDER);
		sb.append(",ISDEFAULT="+ISDEFAULT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_size_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_full_Struct implements routines.system.IPersistableRow<copyOfsortie_full_Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_full_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfsortie_size_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfsortie_size_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTMASTERSTYLEID;

				public String getPRODUCTMASTERSTYLEID () {
					return this.PRODUCTMASTERSTYLEID;
				}
				
			    public String LANGUAGEID;

				public String getLANGUAGEID () {
					return this.LANGUAGEID;
				}
				
			    public String TRANSLATEDSTYLEDESCRIPTION;

				public String getTRANSLATEDSTYLEDESCRIPTION () {
					return this.TRANSLATEDSTYLEDESCRIPTION;
				}
				
			    public String TRANSLATEDSTYLENAME;

				public String getTRANSLATEDSTYLENAME () {
					return this.TRANSLATEDSTYLENAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTMASTERSTYLEID = readString(dis);
					
					this.LANGUAGEID = readString(dis);
					
					this.TRANSLATEDSTYLEDESCRIPTION = readString(dis);
					
					this.TRANSLATEDSTYLENAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTMASTERSTYLEID,dos);
					
					// String
				
						writeString(this.LANGUAGEID,dos);
					
					// String
				
						writeString(this.TRANSLATEDSTYLEDESCRIPTION,dos);
					
					// String
				
						writeString(this.TRANSLATEDSTYLENAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTMASTERSTYLEID="+PRODUCTMASTERSTYLEID);
		sb.append(",LANGUAGEID="+LANGUAGEID);
		sb.append(",TRANSLATEDSTYLEDESCRIPTION="+TRANSLATEDSTYLEDESCRIPTION);
		sb.append(",TRANSLATEDSTYLENAME="+TRANSLATEDSTYLENAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfsortie_size_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_fashionStruct implements routines.system.IPersistableRow<sortie_full_fashionStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String LABELNAMED365;

				public String getLABELNAMED365 () {
					return this.LABELNAMED365;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.LABELNAMED365 = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.LABELNAMED365,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",LABELNAMED365="+LABELNAMED365);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_fashionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_Struct implements routines.system.IPersistableRow<sortie_full_Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String LABELNAMED365;

				public String getLABELNAMED365 () {
					return this.LABELNAMED365;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.LABELNAMED365 = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.LABELNAMED365,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",LABELNAMED365="+LABELNAMED365);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfsortie_sizeStruct implements routines.system.IPersistableRow<copyOfcopyOfsortie_sizeStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTMASTERSIZEID;

				public String getPRODUCTMASTERSIZEID () {
					return this.PRODUCTMASTERSIZEID;
				}
				
			    public String LANGUAGEID;

				public String getLANGUAGEID () {
					return this.LANGUAGEID;
				}
				
			    public String TRANSLATEDSIZEDESCRIPTION;

				public String getTRANSLATEDSIZEDESCRIPTION () {
					return this.TRANSLATEDSIZEDESCRIPTION;
				}
				
			    public String TRANSLATEDSIZENAME;

				public String getTRANSLATEDSIZENAME () {
					return this.TRANSLATEDSIZENAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTMASTERSIZEID = readString(dis);
					
					this.LANGUAGEID = readString(dis);
					
					this.TRANSLATEDSIZEDESCRIPTION = readString(dis);
					
					this.TRANSLATEDSIZENAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTMASTERSIZEID,dos);
					
					// String
				
						writeString(this.LANGUAGEID,dos);
					
					// String
				
						writeString(this.TRANSLATEDSIZEDESCRIPTION,dos);
					
					// String
				
						writeString(this.TRANSLATEDSIZENAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTMASTERSIZEID="+PRODUCTMASTERSIZEID);
		sb.append(",LANGUAGEID="+LANGUAGEID);
		sb.append(",TRANSLATEDSIZEDESCRIPTION="+TRANSLATEDSIZEDESCRIPTION);
		sb.append(",TRANSLATEDSIZENAME="+TRANSLATEDSIZENAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_sizeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_COOStruct implements routines.system.IPersistableRow<sortie_full_COOStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String LABELNAMED365;

				public String getLABELNAMED365 () {
					return this.LABELNAMED365;
				}
				
			    public String FASHIOND365;

				public String getFASHIOND365 () {
					return this.FASHIOND365;
				}
				
			    public String PRODUCTD365;

				public String getPRODUCTD365 () {
					return this.PRODUCTD365;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.LABELNAMED365 = readString(dis);
					
					this.FASHIOND365 = readString(dis);
					
					this.PRODUCTD365 = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.LABELNAMED365,dos);
					
					// String
				
						writeString(this.FASHIOND365,dos);
					
					// String
				
						writeString(this.PRODUCTD365,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",LABELNAMED365="+LABELNAMED365);
		sb.append(",FASHIOND365="+FASHIOND365);
		sb.append(",PRODUCTD365="+PRODUCTD365);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_COOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String INVENTSIZEID;

				public String getINVENTSIZEID () {
					return this.INVENTSIZEID;
				}
				
			    public String INVENTSTYLEID;

				public String getINVENTSTYLEID () {
					return this.INVENTSTYLEID;
				}
				
			    public String INVENTCOLORID;

				public String getINVENTCOLORID () {
					return this.INVENTCOLORID;
				}
				
			    public String ORIGCOUNTRYREGIONID;

				public String getORIGCOUNTRYREGIONID () {
					return this.ORIGCOUNTRYREGIONID;
				}
				
			    public String ORIGSTATEID;

				public String getORIGSTATEID () {
					return this.ORIGSTATEID;
				}
				
			    public String TODATE;

				public String getTODATE () {
					return this.TODATE;
				}
				
			    public String FROMDATE;

				public String getFROMDATE () {
					return this.FROMDATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.INVENTSIZEID = readString(dis);
					
					this.INVENTSTYLEID = readString(dis);
					
					this.INVENTCOLORID = readString(dis);
					
					this.ORIGCOUNTRYREGIONID = readString(dis);
					
					this.ORIGSTATEID = readString(dis);
					
					this.TODATE = readString(dis);
					
					this.FROMDATE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.INVENTSIZEID,dos);
					
					// String
				
						writeString(this.INVENTSTYLEID,dos);
					
					// String
				
						writeString(this.INVENTCOLORID,dos);
					
					// String
				
						writeString(this.ORIGCOUNTRYREGIONID,dos);
					
					// String
				
						writeString(this.ORIGSTATEID,dos);
					
					// String
				
						writeString(this.TODATE,dos);
					
					// String
				
						writeString(this.FROMDATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",INVENTSIZEID="+INVENTSIZEID);
		sb.append(",INVENTSTYLEID="+INVENTSTYLEID);
		sb.append(",INVENTCOLORID="+INVENTCOLORID);
		sb.append(",ORIGCOUNTRYREGIONID="+ORIGCOUNTRYREGIONID);
		sb.append(",ORIGSTATEID="+ORIGSTATEID);
		sb.append(",TODATE="+TODATE);
		sb.append(",FROMDATE="+FROMDATE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String LABELNAMED365;

				public String getLABELNAMED365 () {
					return this.LABELNAMED365;
				}
				
			    public String FASHIOND365;

				public String getFASHIOND365 () {
					return this.FASHIOND365;
				}
				
			    public String PRODUCTD365;

				public String getPRODUCTD365 () {
					return this.PRODUCTD365;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.LABELNAMED365 = readString(dis);
					
					this.FASHIOND365 = readString(dis);
					
					this.PRODUCTD365 = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.LABELNAMED365,dos);
					
					// String
				
						writeString(this.FASHIOND365,dos);
					
					// String
				
						writeString(this.PRODUCTD365,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",LABELNAMED365="+LABELNAMED365);
		sb.append(",FASHIOND365="+FASHIOND365);
		sb.append(",PRODUCTD365="+PRODUCTD365);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				
			    public String ISDEFAULT;

				public String getISDEFAULT () {
					return this.ISDEFAULT;
				}
				
			    public String NOOS;

				public String getNOOS () {
					return this.NOOS;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
					this.ISDEFAULT = readString(dis);
					
					this.NOOS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
					// String
				
						writeString(this.ISDEFAULT,dos);
					
					// String
				
						writeString(this.NOOS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",SEASONCODE="+SEASONCODE);
		sb.append(",ISDEFAULT="+ISDEFAULT);
		sb.append(",NOOS="+NOOS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_full_2Struct implements routines.system.IPersistableRow<copyOfsortie_full_2Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String LABELNAMED365;

				public String getLABELNAMED365 () {
					return this.LABELNAMED365;
				}
				
			    public String FASHIOND365;

				public String getFASHIOND365 () {
					return this.FASHIOND365;
				}
				
			    public String PRODUCTD365;

				public String getPRODUCTD365 () {
					return this.PRODUCTD365;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.LABELNAMED365 = readString(dis);
					
					this.FASHIOND365 = readString(dis);
					
					this.PRODUCTD365 = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.LABELNAMED365,dos);
					
					// String
				
						writeString(this.FASHIOND365,dos);
					
					// String
				
						writeString(this.PRODUCTD365,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",LABELNAMED365="+LABELNAMED365);
		sb.append(",FASHIOND365="+FASHIOND365);
		sb.append(",PRODUCTD365="+PRODUCTD365);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_full_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String PRODUCTCATEGORYNAME;

				public String getPRODUCTCATEGORYNAME () {
					return this.PRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTCATEGORYHIERARCHYNAME;

				public String getPRODUCTCATEGORYHIERARCHYNAME () {
					return this.PRODUCTCATEGORYHIERARCHYNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.PRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYHIERARCHYNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",PRODUCTCATEGORYNAME="+PRODUCTCATEGORYNAME);
		sb.append(",PRODUCTCATEGORYHIERARCHYNAME="+PRODUCTCATEGORYHIERARCHYNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String LABELNAMED365;

				public String getLABELNAMED365 () {
					return this.LABELNAMED365;
				}
				
			    public String FASHIOND365;

				public String getFASHIOND365 () {
					return this.FASHIOND365;
				}
				
			    public String PRODUCTD365;

				public String getPRODUCTD365 () {
					return this.PRODUCTD365;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.LABELNAMED365 = readString(dis);
					
					this.FASHIOND365 = readString(dis);
					
					this.PRODUCTD365 = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.LABELNAMED365,dos);
					
					// String
				
						writeString(this.FASHIOND365,dos);
					
					// String
				
						writeString(this.PRODUCTD365,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",LABELNAMED365="+LABELNAMED365);
		sb.append(",FASHIOND365="+FASHIOND365);
		sb.append(",PRODUCTD365="+PRODUCTD365);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_catStruct implements routines.system.IPersistableRow<sortie_full_catStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String LABELNAMED365;

				public String getLABELNAMED365 () {
					return this.LABELNAMED365;
				}
				
			    public String FASHIOND365;

				public String getFASHIOND365 () {
					return this.FASHIOND365;
				}
				
			    public String PRODUCTD365;

				public String getPRODUCTD365 () {
					return this.PRODUCTD365;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.LABELNAMED365 = readString(dis);
					
					this.FASHIOND365 = readString(dis);
					
					this.PRODUCTD365 = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.LABELNAMED365,dos);
					
					// String
				
						writeString(this.FASHIOND365,dos);
					
					// String
				
						writeString(this.PRODUCTD365,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",LABELNAMED365="+LABELNAMED365);
		sb.append(",FASHIOND365="+FASHIOND365);
		sb.append(",PRODUCTD365="+PRODUCTD365);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_catStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_ExcelStruct implements routines.system.IPersistableRow<sortie_ExcelStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String LABELNAMED365;

				public String getLABELNAMED365 () {
					return this.LABELNAMED365;
				}
				
			    public String FASHIOND365;

				public String getFASHIOND365 () {
					return this.FASHIOND365;
				}
				
			    public String PRODUCTD365;

				public String getPRODUCTD365 () {
					return this.PRODUCTD365;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.LABELNAMED365 = readString(dis);
					
					this.FASHIOND365 = readString(dis);
					
					this.PRODUCTD365 = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.LABELNAMED365,dos);
					
					// String
				
						writeString(this.FASHIOND365,dos);
					
					// String
				
						writeString(this.PRODUCTD365,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",LABELNAMED365="+LABELNAMED365);
		sb.append(",FASHIOND365="+FASHIOND365);
		sb.append(",PRODUCTD365="+PRODUCTD365);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_ExcelStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortieStruct implements routines.system.IPersistableRow<sortieStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				
			    public String FASHIONCODED365;

				public String getFASHIONCODED365 () {
					return this.FASHIONCODED365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
					this.FASHIONCODED365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
					// String
				
						writeString(this.FASHIONCODED365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
		sb.append(",FASHIONCODED365="+FASHIONCODED365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_Excel1Struct implements routines.system.IPersistableRow<sortie_Excel1Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_Excel1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				
			    public String newColumn46;

				public String getNewColumn46 () {
					return this.newColumn46;
				}
				
			    public String newColumn47;

				public String getNewColumn47 () {
					return this.newColumn47;
				}
				
			    public String newColumn48;

				public String getNewColumn48 () {
					return this.newColumn48;
				}
				
			    public String newColumn49;

				public String getNewColumn49 () {
					return this.newColumn49;
				}
				
			    public String newColumn50;

				public String getNewColumn50 () {
					return this.newColumn50;
				}
				
			    public String newColumn51;

				public String getNewColumn51 () {
					return this.newColumn51;
				}
				
			    public String newColumn52;

				public String getNewColumn52 () {
					return this.newColumn52;
				}
				
			    public String newColumn53;

				public String getNewColumn53 () {
					return this.newColumn53;
				}
				
			    public String newColumn54;

				public String getNewColumn54 () {
					return this.newColumn54;
				}
				
			    public String newColumn55;

				public String getNewColumn55 () {
					return this.newColumn55;
				}
				
			    public String newColumn56;

				public String getNewColumn56 () {
					return this.newColumn56;
				}
				
			    public String newColumn57;

				public String getNewColumn57 () {
					return this.newColumn57;
				}
				
			    public String newColumn58;

				public String getNewColumn58 () {
					return this.newColumn58;
				}
				
			    public String newColumn59;

				public String getNewColumn59 () {
					return this.newColumn59;
				}
				
			    public String newColumn60;

				public String getNewColumn60 () {
					return this.newColumn60;
				}
				
			    public String newColumn61;

				public String getNewColumn61 () {
					return this.newColumn61;
				}
				
			    public String newColumn62;

				public String getNewColumn62 () {
					return this.newColumn62;
				}
				
			    public String newColumn63;

				public String getNewColumn63 () {
					return this.newColumn63;
				}
				
			    public String newColumn64;

				public String getNewColumn64 () {
					return this.newColumn64;
				}
				
			    public String newColumn65;

				public String getNewColumn65 () {
					return this.newColumn65;
				}
				
			    public String newColumn66;

				public String getNewColumn66 () {
					return this.newColumn66;
				}
				
			    public String newColumn67;

				public String getNewColumn67 () {
					return this.newColumn67;
				}
				
			    public String newColumn68;

				public String getNewColumn68 () {
					return this.newColumn68;
				}
				
			    public String newColumn69;

				public String getNewColumn69 () {
					return this.newColumn69;
				}
				
			    public String newColumn70;

				public String getNewColumn70 () {
					return this.newColumn70;
				}
				
			    public String newColumn71;

				public String getNewColumn71 () {
					return this.newColumn71;
				}
				
			    public String newColumn72;

				public String getNewColumn72 () {
					return this.newColumn72;
				}
				
			    public String newColumn73;

				public String getNewColumn73 () {
					return this.newColumn73;
				}
				
			    public String newColumn74;

				public String getNewColumn74 () {
					return this.newColumn74;
				}
				
			    public String newColumn75;

				public String getNewColumn75 () {
					return this.newColumn75;
				}
				
			    public String newColumn76;

				public String getNewColumn76 () {
					return this.newColumn76;
				}
				
			    public String newColumn77;

				public String getNewColumn77 () {
					return this.newColumn77;
				}
				
			    public String newColumn78;

				public String getNewColumn78 () {
					return this.newColumn78;
				}
				
			    public String newColumn79;

				public String getNewColumn79 () {
					return this.newColumn79;
				}
				
			    public String newColumn80;

				public String getNewColumn80 () {
					return this.newColumn80;
				}
				
			    public String newColumn81;

				public String getNewColumn81 () {
					return this.newColumn81;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
					this.newColumn46 = readString(dis);
					
					this.newColumn47 = readString(dis);
					
					this.newColumn48 = readString(dis);
					
					this.newColumn49 = readString(dis);
					
					this.newColumn50 = readString(dis);
					
					this.newColumn51 = readString(dis);
					
					this.newColumn52 = readString(dis);
					
					this.newColumn53 = readString(dis);
					
					this.newColumn54 = readString(dis);
					
					this.newColumn55 = readString(dis);
					
					this.newColumn56 = readString(dis);
					
					this.newColumn57 = readString(dis);
					
					this.newColumn58 = readString(dis);
					
					this.newColumn59 = readString(dis);
					
					this.newColumn60 = readString(dis);
					
					this.newColumn61 = readString(dis);
					
					this.newColumn62 = readString(dis);
					
					this.newColumn63 = readString(dis);
					
					this.newColumn64 = readString(dis);
					
					this.newColumn65 = readString(dis);
					
					this.newColumn66 = readString(dis);
					
					this.newColumn67 = readString(dis);
					
					this.newColumn68 = readString(dis);
					
					this.newColumn69 = readString(dis);
					
					this.newColumn70 = readString(dis);
					
					this.newColumn71 = readString(dis);
					
					this.newColumn72 = readString(dis);
					
					this.newColumn73 = readString(dis);
					
					this.newColumn74 = readString(dis);
					
					this.newColumn75 = readString(dis);
					
					this.newColumn76 = readString(dis);
					
					this.newColumn77 = readString(dis);
					
					this.newColumn78 = readString(dis);
					
					this.newColumn79 = readString(dis);
					
					this.newColumn80 = readString(dis);
					
					this.newColumn81 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
					// String
				
						writeString(this.newColumn46,dos);
					
					// String
				
						writeString(this.newColumn47,dos);
					
					// String
				
						writeString(this.newColumn48,dos);
					
					// String
				
						writeString(this.newColumn49,dos);
					
					// String
				
						writeString(this.newColumn50,dos);
					
					// String
				
						writeString(this.newColumn51,dos);
					
					// String
				
						writeString(this.newColumn52,dos);
					
					// String
				
						writeString(this.newColumn53,dos);
					
					// String
				
						writeString(this.newColumn54,dos);
					
					// String
				
						writeString(this.newColumn55,dos);
					
					// String
				
						writeString(this.newColumn56,dos);
					
					// String
				
						writeString(this.newColumn57,dos);
					
					// String
				
						writeString(this.newColumn58,dos);
					
					// String
				
						writeString(this.newColumn59,dos);
					
					// String
				
						writeString(this.newColumn60,dos);
					
					// String
				
						writeString(this.newColumn61,dos);
					
					// String
				
						writeString(this.newColumn62,dos);
					
					// String
				
						writeString(this.newColumn63,dos);
					
					// String
				
						writeString(this.newColumn64,dos);
					
					// String
				
						writeString(this.newColumn65,dos);
					
					// String
				
						writeString(this.newColumn66,dos);
					
					// String
				
						writeString(this.newColumn67,dos);
					
					// String
				
						writeString(this.newColumn68,dos);
					
					// String
				
						writeString(this.newColumn69,dos);
					
					// String
				
						writeString(this.newColumn70,dos);
					
					// String
				
						writeString(this.newColumn71,dos);
					
					// String
				
						writeString(this.newColumn72,dos);
					
					// String
				
						writeString(this.newColumn73,dos);
					
					// String
				
						writeString(this.newColumn74,dos);
					
					// String
				
						writeString(this.newColumn75,dos);
					
					// String
				
						writeString(this.newColumn76,dos);
					
					// String
				
						writeString(this.newColumn77,dos);
					
					// String
				
						writeString(this.newColumn78,dos);
					
					// String
				
						writeString(this.newColumn79,dos);
					
					// String
				
						writeString(this.newColumn80,dos);
					
					// String
				
						writeString(this.newColumn81,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
		sb.append(",newColumn46="+newColumn46);
		sb.append(",newColumn47="+newColumn47);
		sb.append(",newColumn48="+newColumn48);
		sb.append(",newColumn49="+newColumn49);
		sb.append(",newColumn50="+newColumn50);
		sb.append(",newColumn51="+newColumn51);
		sb.append(",newColumn52="+newColumn52);
		sb.append(",newColumn53="+newColumn53);
		sb.append(",newColumn54="+newColumn54);
		sb.append(",newColumn55="+newColumn55);
		sb.append(",newColumn56="+newColumn56);
		sb.append(",newColumn57="+newColumn57);
		sb.append(",newColumn58="+newColumn58);
		sb.append(",newColumn59="+newColumn59);
		sb.append(",newColumn60="+newColumn60);
		sb.append(",newColumn61="+newColumn61);
		sb.append(",newColumn62="+newColumn62);
		sb.append(",newColumn63="+newColumn63);
		sb.append(",newColumn64="+newColumn64);
		sb.append(",newColumn65="+newColumn65);
		sb.append(",newColumn66="+newColumn66);
		sb.append(",newColumn67="+newColumn67);
		sb.append(",newColumn68="+newColumn68);
		sb.append(",newColumn69="+newColumn69);
		sb.append(",newColumn70="+newColumn70);
		sb.append(",newColumn71="+newColumn71);
		sb.append(",newColumn72="+newColumn72);
		sb.append(",newColumn73="+newColumn73);
		sb.append(",newColumn74="+newColumn74);
		sb.append(",newColumn75="+newColumn75);
		sb.append(",newColumn76="+newColumn76);
		sb.append(",newColumn77="+newColumn77);
		sb.append(",newColumn78="+newColumn78);
		sb.append(",newColumn79="+newColumn79);
		sb.append(",newColumn80="+newColumn80);
		sb.append(",newColumn81="+newColumn81);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_2Struct implements routines.system.IPersistableRow<after_tFileInputExcel_2Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				
			    public String newColumn46;

				public String getNewColumn46 () {
					return this.newColumn46;
				}
				
			    public String newColumn47;

				public String getNewColumn47 () {
					return this.newColumn47;
				}
				
			    public String newColumn48;

				public String getNewColumn48 () {
					return this.newColumn48;
				}
				
			    public String newColumn49;

				public String getNewColumn49 () {
					return this.newColumn49;
				}
				
			    public String newColumn50;

				public String getNewColumn50 () {
					return this.newColumn50;
				}
				
			    public String newColumn51;

				public String getNewColumn51 () {
					return this.newColumn51;
				}
				
			    public String newColumn52;

				public String getNewColumn52 () {
					return this.newColumn52;
				}
				
			    public String newColumn53;

				public String getNewColumn53 () {
					return this.newColumn53;
				}
				
			    public String newColumn54;

				public String getNewColumn54 () {
					return this.newColumn54;
				}
				
			    public String newColumn55;

				public String getNewColumn55 () {
					return this.newColumn55;
				}
				
			    public String newColumn56;

				public String getNewColumn56 () {
					return this.newColumn56;
				}
				
			    public String newColumn57;

				public String getNewColumn57 () {
					return this.newColumn57;
				}
				
			    public String newColumn58;

				public String getNewColumn58 () {
					return this.newColumn58;
				}
				
			    public String newColumn59;

				public String getNewColumn59 () {
					return this.newColumn59;
				}
				
			    public String newColumn60;

				public String getNewColumn60 () {
					return this.newColumn60;
				}
				
			    public String newColumn61;

				public String getNewColumn61 () {
					return this.newColumn61;
				}
				
			    public String newColumn62;

				public String getNewColumn62 () {
					return this.newColumn62;
				}
				
			    public String newColumn63;

				public String getNewColumn63 () {
					return this.newColumn63;
				}
				
			    public String newColumn64;

				public String getNewColumn64 () {
					return this.newColumn64;
				}
				
			    public String newColumn65;

				public String getNewColumn65 () {
					return this.newColumn65;
				}
				
			    public String newColumn66;

				public String getNewColumn66 () {
					return this.newColumn66;
				}
				
			    public String newColumn67;

				public String getNewColumn67 () {
					return this.newColumn67;
				}
				
			    public String newColumn68;

				public String getNewColumn68 () {
					return this.newColumn68;
				}
				
			    public String newColumn69;

				public String getNewColumn69 () {
					return this.newColumn69;
				}
				
			    public String newColumn70;

				public String getNewColumn70 () {
					return this.newColumn70;
				}
				
			    public String newColumn71;

				public String getNewColumn71 () {
					return this.newColumn71;
				}
				
			    public String newColumn72;

				public String getNewColumn72 () {
					return this.newColumn72;
				}
				
			    public String newColumn73;

				public String getNewColumn73 () {
					return this.newColumn73;
				}
				
			    public String newColumn74;

				public String getNewColumn74 () {
					return this.newColumn74;
				}
				
			    public String newColumn75;

				public String getNewColumn75 () {
					return this.newColumn75;
				}
				
			    public String newColumn76;

				public String getNewColumn76 () {
					return this.newColumn76;
				}
				
			    public String newColumn77;

				public String getNewColumn77 () {
					return this.newColumn77;
				}
				
			    public String newColumn78;

				public String getNewColumn78 () {
					return this.newColumn78;
				}
				
			    public String newColumn79;

				public String getNewColumn79 () {
					return this.newColumn79;
				}
				
			    public String newColumn80;

				public String getNewColumn80 () {
					return this.newColumn80;
				}
				
			    public String newColumn81;

				public String getNewColumn81 () {
					return this.newColumn81;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
					this.newColumn46 = readString(dis);
					
					this.newColumn47 = readString(dis);
					
					this.newColumn48 = readString(dis);
					
					this.newColumn49 = readString(dis);
					
					this.newColumn50 = readString(dis);
					
					this.newColumn51 = readString(dis);
					
					this.newColumn52 = readString(dis);
					
					this.newColumn53 = readString(dis);
					
					this.newColumn54 = readString(dis);
					
					this.newColumn55 = readString(dis);
					
					this.newColumn56 = readString(dis);
					
					this.newColumn57 = readString(dis);
					
					this.newColumn58 = readString(dis);
					
					this.newColumn59 = readString(dis);
					
					this.newColumn60 = readString(dis);
					
					this.newColumn61 = readString(dis);
					
					this.newColumn62 = readString(dis);
					
					this.newColumn63 = readString(dis);
					
					this.newColumn64 = readString(dis);
					
					this.newColumn65 = readString(dis);
					
					this.newColumn66 = readString(dis);
					
					this.newColumn67 = readString(dis);
					
					this.newColumn68 = readString(dis);
					
					this.newColumn69 = readString(dis);
					
					this.newColumn70 = readString(dis);
					
					this.newColumn71 = readString(dis);
					
					this.newColumn72 = readString(dis);
					
					this.newColumn73 = readString(dis);
					
					this.newColumn74 = readString(dis);
					
					this.newColumn75 = readString(dis);
					
					this.newColumn76 = readString(dis);
					
					this.newColumn77 = readString(dis);
					
					this.newColumn78 = readString(dis);
					
					this.newColumn79 = readString(dis);
					
					this.newColumn80 = readString(dis);
					
					this.newColumn81 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
					// String
				
						writeString(this.newColumn46,dos);
					
					// String
				
						writeString(this.newColumn47,dos);
					
					// String
				
						writeString(this.newColumn48,dos);
					
					// String
				
						writeString(this.newColumn49,dos);
					
					// String
				
						writeString(this.newColumn50,dos);
					
					// String
				
						writeString(this.newColumn51,dos);
					
					// String
				
						writeString(this.newColumn52,dos);
					
					// String
				
						writeString(this.newColumn53,dos);
					
					// String
				
						writeString(this.newColumn54,dos);
					
					// String
				
						writeString(this.newColumn55,dos);
					
					// String
				
						writeString(this.newColumn56,dos);
					
					// String
				
						writeString(this.newColumn57,dos);
					
					// String
				
						writeString(this.newColumn58,dos);
					
					// String
				
						writeString(this.newColumn59,dos);
					
					// String
				
						writeString(this.newColumn60,dos);
					
					// String
				
						writeString(this.newColumn61,dos);
					
					// String
				
						writeString(this.newColumn62,dos);
					
					// String
				
						writeString(this.newColumn63,dos);
					
					// String
				
						writeString(this.newColumn64,dos);
					
					// String
				
						writeString(this.newColumn65,dos);
					
					// String
				
						writeString(this.newColumn66,dos);
					
					// String
				
						writeString(this.newColumn67,dos);
					
					// String
				
						writeString(this.newColumn68,dos);
					
					// String
				
						writeString(this.newColumn69,dos);
					
					// String
				
						writeString(this.newColumn70,dos);
					
					// String
				
						writeString(this.newColumn71,dos);
					
					// String
				
						writeString(this.newColumn72,dos);
					
					// String
				
						writeString(this.newColumn73,dos);
					
					// String
				
						writeString(this.newColumn74,dos);
					
					// String
				
						writeString(this.newColumn75,dos);
					
					// String
				
						writeString(this.newColumn76,dos);
					
					// String
				
						writeString(this.newColumn77,dos);
					
					// String
				
						writeString(this.newColumn78,dos);
					
					// String
				
						writeString(this.newColumn79,dos);
					
					// String
				
						writeString(this.newColumn80,dos);
					
					// String
				
						writeString(this.newColumn81,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
		sb.append(",newColumn46="+newColumn46);
		sb.append(",newColumn47="+newColumn47);
		sb.append(",newColumn48="+newColumn48);
		sb.append(",newColumn49="+newColumn49);
		sb.append(",newColumn50="+newColumn50);
		sb.append(",newColumn51="+newColumn51);
		sb.append(",newColumn52="+newColumn52);
		sb.append(",newColumn53="+newColumn53);
		sb.append(",newColumn54="+newColumn54);
		sb.append(",newColumn55="+newColumn55);
		sb.append(",newColumn56="+newColumn56);
		sb.append(",newColumn57="+newColumn57);
		sb.append(",newColumn58="+newColumn58);
		sb.append(",newColumn59="+newColumn59);
		sb.append(",newColumn60="+newColumn60);
		sb.append(",newColumn61="+newColumn61);
		sb.append(",newColumn62="+newColumn62);
		sb.append(",newColumn63="+newColumn63);
		sb.append(",newColumn64="+newColumn64);
		sb.append(",newColumn65="+newColumn65);
		sb.append(",newColumn66="+newColumn66);
		sb.append(",newColumn67="+newColumn67);
		sb.append(",newColumn68="+newColumn68);
		sb.append(",newColumn69="+newColumn69);
		sb.append(",newColumn70="+newColumn70);
		sb.append(",newColumn71="+newColumn71);
		sb.append(",newColumn72="+newColumn72);
		sb.append(",newColumn73="+newColumn73);
		sb.append(",newColumn74="+newColumn74);
		sb.append(",newColumn75="+newColumn75);
		sb.append(",newColumn76="+newColumn76);
		sb.append(",newColumn77="+newColumn77);
		sb.append(",newColumn78="+newColumn78);
		sb.append(",newColumn79="+newColumn79);
		sb.append(",newColumn80="+newColumn80);
		sb.append(",newColumn81="+newColumn81);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);

		row3Struct row3 = new row3Struct();
sortie_Excel1Struct sortie_Excel1 = new sortie_Excel1Struct();
row7Struct row7 = new row7Struct();
sortieStruct sortie = new sortieStruct();
sortie_ExcelStruct sortie_Excel = new sortie_ExcelStruct();
sortie_full_catStruct sortie_full_cat = new sortie_full_catStruct();
sortie_full_catStruct row6 = sortie_full_cat;
copyOfsortie_full_2Struct copyOfsortie_full_2 = new copyOfsortie_full_2Struct();
copyOfcopyOfsortie_fullStruct copyOfcopyOfsortie_full = new copyOfcopyOfsortie_fullStruct();
sortie_full_COOStruct sortie_full_COO = new sortie_full_COOStruct();
sortie_full_Struct sortie_full_ = new sortie_full_Struct();
sortie_full_fashionStruct sortie_full_fashion = new sortie_full_fashionStruct();
copyOfsortie_full_Struct copyOfsortie_full_ = new copyOfsortie_full_Struct();
copyOfcopyOfcopyOfcopyOfsortie_size_0Struct copyOfcopyOfcopyOfcopyOfsortie_size_0 = new copyOfcopyOfcopyOfcopyOfsortie_size_0Struct();
row20Struct row20 = new row20Struct();
row22Struct row22 = new row22Struct();
copyOfcopyOfcopyOfsortie_size_0Struct copyOfcopyOfcopyOfsortie_size_0 = new copyOfcopyOfcopyOfsortie_size_0Struct();
row17Struct row17 = new row17Struct();
copyOfcopyOfsortie_sizeStruct copyOfcopyOfsortie_size = new copyOfcopyOfsortie_sizeStruct();
row37Struct row37 = new row37Struct();
copyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfsortie_productStruct();
row23Struct row23 = new row23Struct();
row36Struct row36 = new row36Struct();
copyOfcopyOfsortie_productStruct copyOfcopyOfsortie_product = new copyOfcopyOfsortie_productStruct();
row10Struct row10 = new row10Struct();
copyOfsortie_productStruct copyOfsortie_product = new copyOfsortie_productStruct();
row5Struct row5 = new row5Struct();



















	
	/**
	 * [tFileOutputExcel_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_6", false);
		start_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tFileOutputExcel_6 = 0;
		


		int columnIndex_tFileOutputExcel_6 = 0;
		
		String fileName_tFileOutputExcel_6=context.ExtractPathOTHER + "K3 Fashion - Item season drop relations.xlsx";
		int nb_line_tFileOutputExcel_6 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_6 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_6.setSheet("K3 Fashion - Item season drop relations");
		xlsxTool_tFileOutputExcel_6.setAppend(false,true);
		xlsxTool_tFileOutputExcel_6.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_6.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_6 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_6 = chm_tFileOutputExcel_6.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_6", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_6) {
			
				xlsxTool_tFileOutputExcel_6.prepareXlsxFile(fileName_tFileOutputExcel_6);
			
		}
		
		xlsxTool_tFileOutputExcel_6.setFont("");
		
		if (xlsxTool_tFileOutputExcel_6.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_6.addRow();
		
		xlsxTool_tFileOutputExcel_6.addCellValue("ITEMID");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("SEASONCODE");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("DROPID");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("DISPLAYORDER");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("ISDEFAULT");
		
		nb_line_tFileOutputExcel_6++; 
		
	}
		

 



/**
 * [tFileOutputExcel_6 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_7", false);
		start_Hash.put("tUniqRow_7", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfsortie_size_0");
					}
				
		int tos_count_tUniqRow_7 = 0;
		

	
		class KeyStruct_tUniqRow_7 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMID;
					String SEASONCODE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMID == null) ? 0 : this.ITEMID.hashCode());
								
								result = prime * result + ((this.SEASONCODE == null) ? 0 : this.SEASONCODE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;
				
									if (this.ITEMID == null) {
										if (other.ITEMID != null) 
											return false;
								
									} else if (!this.ITEMID.equals(other.ITEMID))
								 
										return false;
								
									if (this.SEASONCODE == null) {
										if (other.SEASONCODE != null) 
											return false;
								
									} else if (!this.SEASONCODE.equals(other.SEASONCODE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_7 = 0;
int nb_duplicates_tUniqRow_7 = 0;
KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>(); 

 



/**
 * [tUniqRow_7 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_full_");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfsortie_size_0Struct copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp = new copyOfcopyOfcopyOfcopyOfsortie_size_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_5", false);
		start_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tFileOutputExcel_5 = 0;
		


		int columnIndex_tFileOutputExcel_5 = 0;
		
		String fileName_tFileOutputExcel_5=context.ExtractPathHBE + "Product master fit translations.xlsx";
		int nb_line_tFileOutputExcel_5 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_5.setSheet("Product master fit translations");
		xlsxTool_tFileOutputExcel_5.setAppend(false,true);
		xlsxTool_tFileOutputExcel_5.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_5.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_5 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_5 = chm_tFileOutputExcel_5.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_5", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_5) {
			
				xlsxTool_tFileOutputExcel_5.prepareXlsxFile(fileName_tFileOutputExcel_5);
			
		}
		
		xlsxTool_tFileOutputExcel_5.setFont("");
		
		if (xlsxTool_tFileOutputExcel_5.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_5.addRow();
		
		xlsxTool_tFileOutputExcel_5.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("PRODUCTMASTERSTYLEID");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("LANGUAGEID");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("TRANSLATEDSTYLEDESCRIPTION");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("TRANSLATEDSTYLENAME");
		
		nb_line_tFileOutputExcel_5++; 
		
	}
		

 



/**
 * [tFileOutputExcel_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_6", false);
		start_Hash.put("tUniqRow_6", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfsortie_size_0");
					}
				
		int tos_count_tUniqRow_6 = 0;
		

	
		class KeyStruct_tUniqRow_6 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTMASTERSTYLEID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTMASTERSTYLEID == null) ? 0 : this.PRODUCTMASTERSTYLEID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTMASTERSTYLEID == null) {
										if (other.PRODUCTMASTERSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERSTYLEID.equals(other.PRODUCTMASTERSTYLEID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_6 = 0;
int nb_duplicates_tUniqRow_6 = 0;
KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>(); 

 



/**
 * [tUniqRow_6 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_fashion");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_full_Struct copyOfsortie_full__tmp = new copyOfsortie_full_Struct();
copyOfcopyOfcopyOfsortie_size_0Struct copyOfcopyOfcopyOfsortie_size_0_tmp = new copyOfcopyOfcopyOfsortie_size_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_fashionStruct sortie_full_fashion_tmp = new sortie_full_fashionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_13", false);
		start_Hash.put("tFileOutputExcel_13", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tFileOutputExcel_13 = 0;
		


		int columnIndex_tFileOutputExcel_13 = 0;
		
		String fileName_tFileOutputExcel_13=context.ExtractPathHBE + "Product master size translations.xlsx";
		int nb_line_tFileOutputExcel_13 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_13 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_13.setSheet("Product master size translations");
		xlsxTool_tFileOutputExcel_13.setAppend(false,true);
		xlsxTool_tFileOutputExcel_13.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_13.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_13 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_13 = chm_tFileOutputExcel_13.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_13", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_13) {
			
				xlsxTool_tFileOutputExcel_13.prepareXlsxFile(fileName_tFileOutputExcel_13);
			
		}
		
		xlsxTool_tFileOutputExcel_13.setFont("");
		
		if (xlsxTool_tFileOutputExcel_13.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_13.addRow();
		
		xlsxTool_tFileOutputExcel_13.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_13.addCellValue("PRODUCTMASTERSIZEID");
		
		xlsxTool_tFileOutputExcel_13.addCellValue("LANGUAGEID");
		
		xlsxTool_tFileOutputExcel_13.addCellValue("TRANSLATEDSIZEDESCRIPTION");
		
		xlsxTool_tFileOutputExcel_13.addCellValue("TRANSLATEDSIZENAME");
		
		nb_line_tFileOutputExcel_13++; 
		
	}
		

 



/**
 * [tFileOutputExcel_13 begin ] stop
 */



	
	/**
	 * [tUniqRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_22", false);
		start_Hash.put("tUniqRow_22", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_size");
					}
				
		int tos_count_tUniqRow_22 = 0;
		

	
		class KeyStruct_tUniqRow_22 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTMASTERSIZEID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTMASTERSIZEID == null) ? 0 : this.PRODUCTMASTERSIZEID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_22 other = (KeyStruct_tUniqRow_22) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTMASTERSIZEID == null) {
										if (other.PRODUCTMASTERSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERSIZEID.equals(other.PRODUCTMASTERSIZEID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_22 = 0;
int nb_duplicates_tUniqRow_22 = 0;
KeyStruct_tUniqRow_22 finder_tUniqRow_22 = new KeyStruct_tUniqRow_22();
java.util.Set<KeyStruct_tUniqRow_22> keystUniqRow_22 = new java.util.HashSet<KeyStruct_tUniqRow_22>(); 

 



/**
 * [tUniqRow_22 begin ] stop
 */



	
	/**
	 * [tMap_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_23", false);
		start_Hash.put("tMap_23", System.currentTimeMillis());
		
	
	currentComponent="tMap_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_COO");
					}
				
		int tos_count_tMap_23 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_23__Struct  {
}
Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_Struct sortie_full__tmp = new sortie_full_Struct();
copyOfcopyOfsortie_sizeStruct copyOfcopyOfsortie_size_tmp = new copyOfcopyOfsortie_sizeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_23 begin ] stop
 */






	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2=context.ExtractPathOTHER + "K3 Fashion Country and state of origin setup.xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_2.setSheet("K3 Fashion Country and state of origin setup");
		xlsxTool_tFileOutputExcel_2.setAppend(false,true);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		
		if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_2.addRow();
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ITEMID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("INVENTSIZEID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("INVENTSTYLEID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("INVENTCOLORID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ORIGCOUNTRYREGIONID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ORIGSTATEID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("TODATE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("FROMDATE");
		
		nb_line_tFileOutputExcel_2++; 
		
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_4", false);
		start_Hash.put("tUniqRow_4", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_4 = 0;
		

	
		class KeyStruct_tUniqRow_4 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMID;
					String INVENTSIZEID;
					String INVENTSTYLEID;
					String INVENTCOLORID;
					String ORIGCOUNTRYREGIONID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMID == null) ? 0 : this.ITEMID.hashCode());
								
								result = prime * result + ((this.INVENTSIZEID == null) ? 0 : this.INVENTSIZEID.hashCode());
								
								result = prime * result + ((this.INVENTSTYLEID == null) ? 0 : this.INVENTSTYLEID.hashCode());
								
								result = prime * result + ((this.INVENTCOLORID == null) ? 0 : this.INVENTCOLORID.hashCode());
								
								result = prime * result + ((this.ORIGCOUNTRYREGIONID == null) ? 0 : this.ORIGCOUNTRYREGIONID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;
				
									if (this.ITEMID == null) {
										if (other.ITEMID != null) 
											return false;
								
									} else if (!this.ITEMID.equals(other.ITEMID))
								 
										return false;
								
									if (this.INVENTSIZEID == null) {
										if (other.INVENTSIZEID != null) 
											return false;
								
									} else if (!this.INVENTSIZEID.equals(other.INVENTSIZEID))
								 
										return false;
								
									if (this.INVENTSTYLEID == null) {
										if (other.INVENTSTYLEID != null) 
											return false;
								
									} else if (!this.INVENTSTYLEID.equals(other.INVENTSTYLEID))
								 
										return false;
								
									if (this.INVENTCOLORID == null) {
										if (other.INVENTCOLORID != null) 
											return false;
								
									} else if (!this.INVENTCOLORID.equals(other.INVENTCOLORID))
								 
										return false;
								
									if (this.ORIGCOUNTRYREGIONID == null) {
										if (other.ORIGCOUNTRYREGIONID != null) 
											return false;
								
									} else if (!this.ORIGCOUNTRYREGIONID.equals(other.ORIGCOUNTRYREGIONID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_4 = 0;
int nb_duplicates_tUniqRow_4 = 0;
KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>(); 

 



/**
 * [tUniqRow_4 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_COOStruct sortie_full_COO_tmp = new sortie_full_COOStruct();
copyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.ExtractPathOTHER + "K3 Fashion - Item season relations.xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("K3 Fashion - Item season relations");
		xlsxTool_tFileOutputExcel_1.setAppend(false,true);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ITEMID");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SEASONCODE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ISDEFAULT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NOOS");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMID;
					String SEASONCODE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMID == null) ? 0 : this.ITEMID.hashCode());
								
								result = prime * result + ((this.SEASONCODE == null) ? 0 : this.SEASONCODE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.ITEMID == null) {
										if (other.ITEMID != null) 
											return false;
								
									} else if (!this.ITEMID.equals(other.ITEMID))
								 
										return false;
								
									if (this.SEASONCODE == null) {
										if (other.SEASONCODE != null) 
											return false;
								
									} else if (!this.SEASONCODE.equals(other.SEASONCODE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_full_2");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfsortie_fullStruct copyOfcopyOfsortie_full_tmp = new copyOfcopyOfsortie_fullStruct();
copyOfcopyOfsortie_productStruct copyOfcopyOfsortie_product_tmp = new copyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */





	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_EXTRACT_FOR_DYNAMICS_1_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;
 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_product");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_full_2Struct copyOfsortie_full_2_tmp = new copyOfsortie_full_2Struct();
copyOfsortie_productStruct copyOfsortie_product_tmp = new copyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_cat");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_Excel");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_catStruct sortie_full_cat_tmp = new sortie_full_catStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct> tHash_Lookup_copyOfcopyOfsortie_fashion = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct>) 
					globalMap.get( "tHash_Lookup_copyOfcopyOfsortie_fashion" ))
					;					
					
	

copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionHashKey = new copyOfcopyOfsortie_fashionStruct();
copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionDefault = new copyOfcopyOfsortie_fashionStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_ExcelStruct sortie_Excel_tmp = new sortie_ExcelStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortieStruct sortie_tmp = new sortieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_Excel1");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String Fn_BRAND;
	String Fn_SEASON;
	String Fn_CATEGORY;
	String Fn_REF;
	String Fn_DESCRIPTION;
	String Fn_STYLE;
	String Fn_COLOR;
	String Fn_FASHION;
	String Fn_STYLE_COLOR_LABEL;
	String Fn_COLOR_NAME;
	String Fn_LBL;
	String Fn_STYLE_COLOR;
	String Fn_GENDER;
	String Fn_AGE_RANGE;
	String Fn_SIZE_RANGE;
	String Fn_SIZE;
	String Fn_US_SIZE;
	String Fn_CM_SIZE;
	String Fn_PRODUCT;
	String Fn_PRODUCT_STATUS;
	String Fn_PRODUCT_TIER;
	String Fn_ACCT_EXCLUS;
	String Fn_CARTON_QTY;
	String Fn_EUR_RRP;
	String Fn_EUR_WSP;
	String Fn_GBP_RRP;
	String Fn_GBP_WSP;
	String Fn_CHF_RRP;
	String Fn_CHF_WSP;
	String Fn_NOK_RRP;
	String Fn_NOK_WSP;
	String Fn_DKK_RRP;
	String Fn_DKK_WSP;
	String Fn_SEK_RRP;
	String Fn_SEK_WSP;
	String Fn_EUR_FINN_RRP;
	String Fn_EUR_FINN_WSP;
	String Fn_FABRICATION;
	String Fn_COO;
	String Fn_CUSTOM_TARIFF_CODE;
	String Fn_UPC;
	String Fn_DELIVERYFLOW;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_Excel1Struct sortie_Excel1_tmp = new sortie_Excel1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[QY0ns7kGGursLfaVlT4K1waE+XG00HFapI9XdQ==]");
        String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
        if (password_tFileInputExcel_2.isEmpty()){
            password_tFileInputExcel_2 = null;
        }
			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = context.IntegrationExcelPath + context.ExcelFileName;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_2), password_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_2, password_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, 0, false));
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;
        Integer lastColumn_tFileInputExcel_2 = 80;
        if(lastColumn_tFileInputExcel_2!=null){
        	end_column_tFileInputExcel_2 = lastColumn_tFileInputExcel_2.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row3 = null;
					int tempRowLength_tFileInputExcel_2 = 82;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row3 = new row3Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn";

				row3.newColumn = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn1";

				row3.newColumn1 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn1 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn2";

				row3.newColumn2 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn2 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn3";

				row3.newColumn3 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn3 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 4;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn4";

				row3.newColumn4 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn4 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 5;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn5";

				row3.newColumn5 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn5 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 6;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn6";

				row3.newColumn6 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn6 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 7;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn7";

				row3.newColumn7 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn7 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 8;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn8";

				row3.newColumn8 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn8 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 9;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn9";

				row3.newColumn9 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn9 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 10;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn10";

				row3.newColumn10 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 11;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn11";

				row3.newColumn11 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 12;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn12";

				row3.newColumn12 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 13;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn13";

				row3.newColumn13 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 14;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn14";

				row3.newColumn14 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 15;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn15";

				row3.newColumn15 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 16;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn16";

				row3.newColumn16 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 17;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn17";

				row3.newColumn17 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 18;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn18";

				row3.newColumn18 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 19;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn19";

				row3.newColumn19 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 20;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn20";

				row3.newColumn20 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 21;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn21";

				row3.newColumn21 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 22;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn22";

				row3.newColumn22 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 23;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn23";

				row3.newColumn23 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 24;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn24";

				row3.newColumn24 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 25;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn25";

				row3.newColumn25 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 26;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn26";

				row3.newColumn26 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn26 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 27;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn27";

				row3.newColumn27 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn27 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 28;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn28";

				row3.newColumn28 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn28 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 29;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn29";

				row3.newColumn29 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn29 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 30;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn30";

				row3.newColumn30 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn30 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 31;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn31";

				row3.newColumn31 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn31 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 32;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn32";

				row3.newColumn32 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn32 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 33;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn33";

				row3.newColumn33 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn33 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 34;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn34";

				row3.newColumn34 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn34 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 35;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn35";

				row3.newColumn35 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn35 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 36;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn36";

				row3.newColumn36 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn36 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 37;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn37";

				row3.newColumn37 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn37 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 38;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn38";

				row3.newColumn38 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn38 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 39;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn39";

				row3.newColumn39 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn39 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 40;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn40";

				row3.newColumn40 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn40 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 41;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn41";

				row3.newColumn41 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn41 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 42;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn42";

				row3.newColumn42 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn42 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 43;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn43";

				row3.newColumn43 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn43 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 44;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn44";

				row3.newColumn44 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn44 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 45;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn45";

				row3.newColumn45 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn45 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 46;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn46";

				row3.newColumn46 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn46 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 47;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn47";

				row3.newColumn47 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn47 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 48;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn48";

				row3.newColumn48 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn48 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 49;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn49";

				row3.newColumn49 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn49 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 50;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn50";

				row3.newColumn50 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn50 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 51;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn51";

				row3.newColumn51 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn51 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 52;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn52";

				row3.newColumn52 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn52 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 53;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn53";

				row3.newColumn53 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn53 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 54;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn54";

				row3.newColumn54 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn54 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 55;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn55";

				row3.newColumn55 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn55 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 56;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn56";

				row3.newColumn56 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn56 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 57;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn57";

				row3.newColumn57 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn57 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 58;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn58";

				row3.newColumn58 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn58 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 59;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn59";

				row3.newColumn59 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn59 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 60;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn60";

				row3.newColumn60 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn60 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 61;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn61";

				row3.newColumn61 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn61 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 62;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn62";

				row3.newColumn62 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn62 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 63;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn63";

				row3.newColumn63 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn63 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 64;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn64";

				row3.newColumn64 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn64 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 65;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn65";

				row3.newColumn65 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn65 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 66;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn66";

				row3.newColumn66 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn66 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 67;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn67";

				row3.newColumn67 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn67 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 68;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn68";

				row3.newColumn68 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn68 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 69;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn69";

				row3.newColumn69 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn69 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 70;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn70";

				row3.newColumn70 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn70 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 71;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn71";

				row3.newColumn71 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn71 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 72;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn72";

				row3.newColumn72 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn72 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 73;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn73";

				row3.newColumn73 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn73 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 74;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn74";

				row3.newColumn74 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn74 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 75;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn75";

				row3.newColumn75 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn75 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 76;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn76";

				row3.newColumn76 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn76 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 77;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn77";

				row3.newColumn77 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn77 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 78;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn78";

				row3.newColumn78 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn78 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 79;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn79";

				row3.newColumn79 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn79 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 80;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn80";

				row3.newColumn80 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn80 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 81;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn81";

				row3.newColumn81 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn81 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row3 = null;
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
	
	/**
	 * [tFileInputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Fn_BRAND = ((Map<String,String>)globalMap.get("fieldMap")).get("BRAND");
Var.Fn_SEASON = ((Map<String,String>)globalMap.get("fieldMap")).get("SEASON");
Var.Fn_CATEGORY = ((Map<String,String>)globalMap.get("fieldMap")).get("CATEGORY");
Var.Fn_REF = ((Map<String,String>)globalMap.get("fieldMap")).get("REF");
Var.Fn_DESCRIPTION = ((Map<String,String>)globalMap.get("fieldMap")).get("DESCRIPTION");
Var.Fn_STYLE = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE");
Var.Fn_COLOR = ((Map<String,String>)globalMap.get("fieldMap")).get("COLOR");
Var.Fn_FASHION = ((Map<String,String>)globalMap.get("fieldMap")).get("FASHION");
Var.Fn_STYLE_COLOR_LABEL = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE-COLOR-LABEL");
Var.Fn_COLOR_NAME = ((Map<String,String>)globalMap.get("fieldMap")).get("COLOR NAME");
Var.Fn_LBL = ((Map<String,String>)globalMap.get("fieldMap")).get("LBL");
Var.Fn_STYLE_COLOR = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE-COLOR");
Var.Fn_GENDER = ((Map<String,String>)globalMap.get("fieldMap")).get("GENDER");
Var.Fn_AGE_RANGE = ((Map<String,String>)globalMap.get("fieldMap")).get("AGE RANGE");
Var.Fn_SIZE_RANGE = ((Map<String,String>)globalMap.get("fieldMap")).get("SIZE RANGE");
Var.Fn_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("SIZE");
Var.Fn_US_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("US SIZE");
Var.Fn_CM_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("CM SIZE");
Var.Fn_PRODUCT = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT");
Var.Fn_PRODUCT_STATUS = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT STATUS");
Var.Fn_PRODUCT_TIER = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT TIER");
Var.Fn_ACCT_EXCLUS = ((Map<String,String>)globalMap.get("fieldMap")).get("ACCT EXCLUS");
Var.Fn_CARTON_QTY = ((Map<String,String>)globalMap.get("fieldMap")).get("CARTON QTY");
Var.Fn_EUR_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("EUR RRP");
Var.Fn_EUR_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("EUR WSP");
Var.Fn_GBP_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("GBP RRP");
Var.Fn_GBP_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("GBP WSP");
Var.Fn_CHF_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("CHF RRP");
Var.Fn_CHF_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("CHF WSP");
Var.Fn_NOK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("NOK RRP");
Var.Fn_NOK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("NOK WSP");
Var.Fn_DKK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("DKK RRP");
Var.Fn_DKK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("DKK WSP");
Var.Fn_SEK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("SEK RRP");
Var.Fn_SEK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("SEK WSP");
Var.Fn_EUR_FINN_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("EURO (FINN) RRP");
Var.Fn_EUR_FINN_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("EURO (FINN) WSP");
Var.Fn_FABRICATION = ((Map<String,String>)globalMap.get("fieldMap")).get("FABRICATION");
Var.Fn_COO = ((Map<String,String>)globalMap.get("fieldMap")).get("COO");
Var.Fn_CUSTOM_TARIFF_CODE = ((Map<String,String>)globalMap.get("fieldMap")).get("CUSTOM TARIFF CODE");
Var.Fn_UPC = ((Map<String,String>)globalMap.get("fieldMap")).get("UPC");
Var.Fn_DELIVERYFLOW = ((Map<String,String>)globalMap.get("fieldMap")).get("DELIVERYFLOW") ;// ###############################
        // ###############################
        // # Output tables

sortie_Excel1 = null;


// # Output table : 'sortie_Excel1'
sortie_Excel1_tmp.BRAND = (String) row3.getClass().getField(Var.Fn_BRAND).get(row3) ;
sortie_Excel1_tmp.SEASON = (String) row3.getClass().getField(Var.Fn_SEASON).get(row3) ;
sortie_Excel1_tmp.CATEGORY = (String) row3.getClass().getField(Var.Fn_CATEGORY).get(row3) ;
sortie_Excel1_tmp.REF = (String) row3.getClass().getField(Var.Fn_REF).get(row3) ;
sortie_Excel1_tmp.DESCRIPTION = (String) row3.getClass().getField(Var.Fn_DESCRIPTION).get(row3) ;
sortie_Excel1_tmp.STYLE = (String) row3.getClass().getField(Var.Fn_STYLE).get(row3) ;
sortie_Excel1_tmp.COLOR = (String) row3.getClass().getField(Var.Fn_COLOR).get(row3) ;
sortie_Excel1_tmp.FASHION = (String) row3.getClass().getField(Var.Fn_FASHION).get(row3) ;
sortie_Excel1_tmp.STYLECOLORLABEL = (String) row3.getClass().getField(Var.Fn_STYLE_COLOR_LABEL).get(row3) ;
sortie_Excel1_tmp.COLORNAME = (String) row3.getClass().getField(Var.Fn_COLOR_NAME).get(row3) ;
sortie_Excel1_tmp.LBL = (String) row3.getClass().getField(Var.Fn_LBL).get(row3) ;
sortie_Excel1_tmp.STYLE_COLOR = (String) row3.getClass().getField(Var.Fn_STYLE_COLOR).get(row3) ;
sortie_Excel1_tmp.GENDER = (String) row3.getClass().getField(Var.Fn_GENDER).get(row3) ;
sortie_Excel1_tmp.AGE_RANGE = (String) row3.getClass().getField(Var.Fn_AGE_RANGE).get(row3) ;
sortie_Excel1_tmp.SIZE_RANGE = (String) row3.getClass().getField(Var.Fn_SIZE_RANGE).get(row3) ;
sortie_Excel1_tmp.SIZE = (String) row3.getClass().getField(Var.Fn_SIZE).get(row3) ;
sortie_Excel1_tmp.US_SIZE = (String) row3.getClass().getField(Var.Fn_US_SIZE).get(row3) ;
sortie_Excel1_tmp.CM_SIZE = (String) row3.getClass().getField(Var.Fn_CM_SIZE).get(row3) ;
sortie_Excel1_tmp.PRODUCT = (String) row3.getClass().getField(Var.Fn_PRODUCT).get(row3) ;
sortie_Excel1_tmp.PRODUCT_STATUS = (String) row3.getClass().getField(Var.Fn_PRODUCT_STATUS).get(row3) ;
sortie_Excel1_tmp.PRODUCT_TIER = (String) row3.getClass().getField(Var.Fn_PRODUCT_TIER).get(row3) ;
sortie_Excel1_tmp.ACCT_EXCLUS = (String) row3.getClass().getField(Var.Fn_ACCT_EXCLUS).get(row3) ;
sortie_Excel1_tmp.SIZE_RATIO_SPLIT = "";
sortie_Excel1_tmp.REC_SIZE_SPLIT = "";
sortie_Excel1_tmp.CARTON_QTY = (String) row3.getClass().getField(Var.Fn_CARTON_QTY).get(row3) ;
sortie_Excel1_tmp.ATTRIBUTE = "";
sortie_Excel1_tmp.UNITS = "";
sortie_Excel1_tmp.EUR_RRP = (String) row3.getClass().getField(Var.Fn_EUR_RRP).get(row3) ;
sortie_Excel1_tmp.EUR_WSP = (String) row3.getClass().getField(Var.Fn_EUR_WSP).get(row3) ;
sortie_Excel1_tmp.GBP_RRP = (String) row3.getClass().getField(Var.Fn_GBP_RRP).get(row3) ;
sortie_Excel1_tmp.GBP_WSP = (String) row3.getClass().getField(Var.Fn_GBP_WSP).get(row3) ;
sortie_Excel1_tmp.CHF_RRP = (String) row3.getClass().getField(Var.Fn_CHF_RRP).get(row3) ;
sortie_Excel1_tmp.CHF_WSP = (String) row3.getClass().getField(Var.Fn_CHF_WSP).get(row3) ;
sortie_Excel1_tmp.NOK_RRP = (String) row3.getClass().getField(Var.Fn_NOK_RRP).get(row3) ;
sortie_Excel1_tmp.NOK_WSP = (String) row3.getClass().getField(Var.Fn_NOK_WSP).get(row3) ;
sortie_Excel1_tmp.DKK_RRP = (String) row3.getClass().getField(Var.Fn_DKK_RRP).get(row3) ;
sortie_Excel1_tmp.DKK_WSP = (String) row3.getClass().getField(Var.Fn_DKK_WSP).get(row3) ;
sortie_Excel1_tmp.SEK_RRP = (String) row3.getClass().getField(Var.Fn_SEK_RRP).get(row3) ;
sortie_Excel1_tmp.SEK_WSP = (String) row3.getClass().getField(Var.Fn_SEK_WSP).get(row3) ;
sortie_Excel1_tmp.EUR_FINN_RRP = (String) row3.getClass().getField(Var.Fn_EUR_FINN_RRP).get(row3) ;
sortie_Excel1_tmp.EUR_FINN_WSP = (String) row3.getClass().getField(Var.Fn_EUR_FINN_WSP).get(row3) ;
sortie_Excel1_tmp.FABRICATION = (String) row3.getClass().getField(Var.Fn_FABRICATION).get(row3) ;
sortie_Excel1_tmp.COO = (String) row3.getClass().getField(Var.Fn_COO).get(row3) ;
sortie_Excel1_tmp.CUSTOM_TARIFF_CODE = (String) row3.getClass().getField(Var.Fn_CUSTOM_TARIFF_CODE).get(row3) ;
sortie_Excel1_tmp.UPC = (String) row3.getClass().getField(Var.Fn_UPC).get(row3) ;
sortie_Excel1_tmp.SMU_TYPE = "";
sortie_Excel1_tmp.DELIVERYFLOW = (String) row3.getClass().getField(Var.Fn_DELIVERYFLOW).get(row3) ;
sortie_Excel1 = sortie_Excel1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "sortie_Excel1"
if(sortie_Excel1 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_Excel1");
					}
					

          row7 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((sortie_Excel1.STYLE == null? false : sortie_Excel1.STYLE.compareTo("") != 0)
                           , "STYLE.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.BRAND = sortie_Excel1.BRAND;
               row7.SEASON = sortie_Excel1.SEASON;
               row7.CATEGORY = sortie_Excel1.CATEGORY;
               row7.REF = sortie_Excel1.REF;
               row7.DESCRIPTION = sortie_Excel1.DESCRIPTION;
               row7.STYLE = sortie_Excel1.STYLE;
               row7.COLOR = sortie_Excel1.COLOR;
               row7.FASHION = sortie_Excel1.FASHION;
               row7.STYLECOLORLABEL = sortie_Excel1.STYLECOLORLABEL;
               row7.COLORNAME = sortie_Excel1.COLORNAME;
               row7.LBL = sortie_Excel1.LBL;
               row7.STYLE_COLOR = sortie_Excel1.STYLE_COLOR;
               row7.GENDER = sortie_Excel1.GENDER;
               row7.AGE_RANGE = sortie_Excel1.AGE_RANGE;
               row7.SIZE_RANGE = sortie_Excel1.SIZE_RANGE;
               row7.SIZE = sortie_Excel1.SIZE;
               row7.US_SIZE = sortie_Excel1.US_SIZE;
               row7.CM_SIZE = sortie_Excel1.CM_SIZE;
               row7.PRODUCT = sortie_Excel1.PRODUCT;
               row7.PRODUCT_STATUS = sortie_Excel1.PRODUCT_STATUS;
               row7.PRODUCT_TIER = sortie_Excel1.PRODUCT_TIER;
               row7.ACCT_EXCLUS = sortie_Excel1.ACCT_EXCLUS;
               row7.SIZE_RATIO_SPLIT = sortie_Excel1.SIZE_RATIO_SPLIT;
               row7.REC_SIZE_SPLIT = sortie_Excel1.REC_SIZE_SPLIT;
               row7.CARTON_QTY = sortie_Excel1.CARTON_QTY;
               row7.ATTRIBUTE = sortie_Excel1.ATTRIBUTE;
               row7.UNITS = sortie_Excel1.UNITS;
               row7.EUR_RRP = sortie_Excel1.EUR_RRP;
               row7.EUR_WSP = sortie_Excel1.EUR_WSP;
               row7.GBP_RRP = sortie_Excel1.GBP_RRP;
               row7.GBP_WSP = sortie_Excel1.GBP_WSP;
               row7.CHF_RRP = sortie_Excel1.CHF_RRP;
               row7.CHF_WSP = sortie_Excel1.CHF_WSP;
               row7.NOK_RRP = sortie_Excel1.NOK_RRP;
               row7.NOK_WSP = sortie_Excel1.NOK_WSP;
               row7.DKK_RRP = sortie_Excel1.DKK_RRP;
               row7.DKK_WSP = sortie_Excel1.DKK_WSP;
               row7.SEK_RRP = sortie_Excel1.SEK_RRP;
               row7.SEK_WSP = sortie_Excel1.SEK_WSP;
               row7.EUR_FINN_RRP = sortie_Excel1.EUR_FINN_RRP;
               row7.EUR_FINN_WSP = sortie_Excel1.EUR_FINN_WSP;
               row7.FABRICATION = sortie_Excel1.FABRICATION;
               row7.COO = sortie_Excel1.COO;
               row7.CUSTOM_TARIFF_CODE = sortie_Excel1.CUSTOM_TARIFF_CODE;
               row7.UPC = sortie_Excel1.UPC;
               row7.SMU_TYPE = sortie_Excel1.SMU_TYPE;
               row7.DELIVERYFLOW = sortie_Excel1.DELIVERYFLOW;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_12 = false;
								
                        		    		row25HashKey.NAME3 = StringHandling.TRIM(StringHandling.CHANGE(row7.FASHION ," - ","-")) ;
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row25 != null && tHash_Lookup_row25.getCount(row25HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.NAME3 = '" + row25HashKey.NAME3 + "'");
								} // G 071
							

							row25Struct row25 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								 
							
							
								if (tHash_Lookup_row25 !=null && tHash_Lookup_row25.hasNext()) { // G 099
								
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							
							
								} // G 099
							
							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

sortie = null;


// # Output table : 'sortie'
sortie_tmp.BRAND = row7.BRAND;
sortie_tmp.SEASON = row7.SEASON;
sortie_tmp.CATEGORY = row7.CATEGORY;
sortie_tmp.REF = row7.REF;
sortie_tmp.DESCRIPTION = row7.DESCRIPTION;
sortie_tmp.STYLE = row7.STYLE;
sortie_tmp.COLOR = row7.COLOR;
sortie_tmp.FASHION = StringHandling.TRIM(StringHandling.CHANGE(row7.FASHION ," - ","-")) ;
sortie_tmp.STYLECOLORLABEL = row7.STYLECOLORLABEL;
sortie_tmp.COLORNAME = row7.COLORNAME;
sortie_tmp.LBL = row7.LBL;
sortie_tmp.STYLE_COLOR = row7.STYLE_COLOR;
sortie_tmp.GENDER = row7.GENDER;
sortie_tmp.AGE_RANGE = row7.AGE_RANGE;
sortie_tmp.SIZE_RANGE = row7.SIZE_RANGE;
sortie_tmp.SIZE = row7.SIZE;
sortie_tmp.US_SIZE = row7.US_SIZE;
sortie_tmp.CM_SIZE = row7.CM_SIZE;
sortie_tmp.PRODUCT = StringHandling.TRIM(StringHandling.CHANGE(row7.PRODUCT ," - ","-")) ;
sortie_tmp.PRODUCT_STATUS = row7.PRODUCT_STATUS;
sortie_tmp.PRODUCT_TIER = row7.PRODUCT_TIER;
sortie_tmp.ACCT_EXCLUS = row7.ACCT_EXCLUS;
sortie_tmp.SIZE_RATIO_SPLIT = row7.SIZE_RATIO_SPLIT;
sortie_tmp.REC_SIZE_SPLIT = row7.REC_SIZE_SPLIT;
sortie_tmp.CARTON_QTY = row7.CARTON_QTY;
sortie_tmp.ATTRIBUTE = row7.ATTRIBUTE;
sortie_tmp.UNITS = row7.UNITS;
sortie_tmp.EUR_RRP = row7.EUR_RRP;
sortie_tmp.EUR_WSP = row7.EUR_WSP;
sortie_tmp.GBP_RRP = row7.GBP_RRP;
sortie_tmp.GBP_WSP = row7.GBP_WSP;
sortie_tmp.CHF_RRP = row7.CHF_RRP;
sortie_tmp.CHF_WSP = row7.CHF_WSP;
sortie_tmp.NOK_RRP = row7.NOK_RRP;
sortie_tmp.NOK_WSP = row7.NOK_WSP;
sortie_tmp.DKK_RRP = row7.DKK_RRP;
sortie_tmp.DKK_WSP = row7.DKK_WSP;
sortie_tmp.SEK_RRP = row7.SEK_RRP;
sortie_tmp.SEK_WSP = row7.SEK_WSP;
sortie_tmp.EUR_FINN_RRP = row7.EUR_FINN_RRP;
sortie_tmp.EUR_FINN_WSP = row7.EUR_FINN_WSP;
sortie_tmp.FABRICATION = row7.FABRICATION;
sortie_tmp.COO = row7.COO;
sortie_tmp.CUSTOM_TARIFF_CODE = row7.CUSTOM_TARIFF_CODE;
sortie_tmp.UPC = row7.UPC;
sortie_tmp.SMU_TYPE = row7.SMU_TYPE;
sortie_tmp.DELIVERYFLOW = row7.DELIVERYFLOW;
sortie_tmp.FASHIONCODED365 = row25.CATEGORYCODE ;
sortie = sortie_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "sortie"
if(sortie != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "copyOfcopyOfsortie_fashion" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcopyOfcopyOfsortie_fashion = false;
       		  	    	
       		  	    	
 							copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		copyOfcopyOfsortie_fashionHashKey.CODE = StringHandling.DOWNCASE(sortie.LBL ) ;
                        		    		

								
		                        	copyOfcopyOfsortie_fashionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_copyOfcopyOfsortie_fashion.lookup( copyOfcopyOfsortie_fashionHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_copyOfcopyOfsortie_fashion != null && tHash_Lookup_copyOfcopyOfsortie_fashion.getCount(copyOfcopyOfsortie_fashionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'copyOfcopyOfsortie_fashion' and it contains more one result from keys :  copyOfcopyOfsortie_fashion.CODE = '" + copyOfcopyOfsortie_fashionHashKey.CODE + "'");
								} // G 071
							

							copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion = null;
                    		  	 
							   
                    		  	 
	       		  	    	copyOfcopyOfsortie_fashionStruct fromLookup_copyOfcopyOfsortie_fashion = null;
							copyOfcopyOfsortie_fashion = copyOfcopyOfsortie_fashionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_copyOfcopyOfsortie_fashion !=null && tHash_Lookup_copyOfcopyOfsortie_fashion.hasNext()) { // G 099
								
							
								
								fromLookup_copyOfcopyOfsortie_fashion = tHash_Lookup_copyOfcopyOfsortie_fashion.next();

							
							
								} // G 099
							
							

							if(fromLookup_copyOfcopyOfsortie_fashion != null) {
								copyOfcopyOfsortie_fashion = fromLookup_copyOfcopyOfsortie_fashion;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		row18HashKey.NAME3 = StringHandling.TRIM(sortie.FASHION ) ;
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.NAME3 = '" + row18HashKey.NAME3 + "'");
								} // G 071
							

							row18Struct row18 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								 
							
							
								if (tHash_Lookup_row18 !=null && tHash_Lookup_row18.hasNext()) { // G 099
								
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							
							
								} // G 099
							
							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		row19HashKey.NAME3 = StringHandling.TRIM(sortie.PRODUCT ) ;
                        		    		
                        		    		row19HashKey.PARENTCODE = sortie.FASHIONCODED365 ;
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.NAME3 = '" + row19HashKey.NAME3 + "', row19.PARENTCODE = '" + row19HashKey.PARENTCODE + "'");
								} // G 071
							

							row19Struct row19 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

sortie_Excel = null;


// # Output table : 'sortie_Excel'
sortie_Excel_tmp.BRAND = sortie.BRAND ;
sortie_Excel_tmp.SEASON = sortie.SEASON ;
sortie_Excel_tmp.CATEGORY = sortie.CATEGORY ;
sortie_Excel_tmp.REF = sortie.REF ;
sortie_Excel_tmp.DESCRIPTION = sortie.DESCRIPTION ;
sortie_Excel_tmp.STYLE = sortie.STYLE ;
sortie_Excel_tmp.COLOR = sortie.COLOR ;
sortie_Excel_tmp.FASHION = sortie.FASHION ;
sortie_Excel_tmp.STYLECOLORLABEL = sortie.STYLECOLORLABEL ;
sortie_Excel_tmp.COLORNAME = sortie.COLORNAME ;
sortie_Excel_tmp.LBL = sortie.LBL ;
sortie_Excel_tmp.STYLE_COLOR = sortie.STYLE_COLOR ;
sortie_Excel_tmp.GENDER = sortie.GENDER ;
sortie_Excel_tmp.AGE_RANGE = sortie.AGE_RANGE ;
sortie_Excel_tmp.SIZE_RANGE = sortie.SIZE_RANGE ;
sortie_Excel_tmp.SIZE = sortie.SIZE ;
sortie_Excel_tmp.US_SIZE = sortie.US_SIZE ;
sortie_Excel_tmp.CM_SIZE = sortie.CM_SIZE ;
sortie_Excel_tmp.PRODUCT = sortie.PRODUCT ;
sortie_Excel_tmp.PRODUCT_STATUS = sortie.PRODUCT_STATUS ;
sortie_Excel_tmp.PRODUCT_TIER = sortie.PRODUCT_TIER ;
sortie_Excel_tmp.ACCT_EXCLUS = sortie.ACCT_EXCLUS ;
sortie_Excel_tmp.SIZE_RATIO_SPLIT = sortie.SIZE_RATIO_SPLIT ;
sortie_Excel_tmp.REC_SIZE_SPLIT = sortie.REC_SIZE_SPLIT ;
sortie_Excel_tmp.CARTON_QTY = sortie.CARTON_QTY ;
sortie_Excel_tmp.ATTRIBUTE = sortie.ATTRIBUTE ;
sortie_Excel_tmp.UNITS = sortie.UNITS ;
sortie_Excel_tmp.EUR_RRP = sortie.EUR_RRP ;
sortie_Excel_tmp.EUR_WSP = sortie.EUR_WSP ;
sortie_Excel_tmp.GBP_RRP = sortie.GBP_RRP ;
sortie_Excel_tmp.GBP_WSP = sortie.GBP_WSP ;
sortie_Excel_tmp.CHF_RRP = sortie.CHF_RRP ;
sortie_Excel_tmp.CHF_WSP = sortie.CHF_WSP ;
sortie_Excel_tmp.NOK_RRP = sortie.NOK_RRP ;
sortie_Excel_tmp.NOK_WSP = sortie.NOK_WSP ;
sortie_Excel_tmp.DKK_RRP = sortie.DKK_RRP ;
sortie_Excel_tmp.DKK_WSP = sortie.DKK_WSP ;
sortie_Excel_tmp.SEK_RRP = sortie.SEK_RRP ;
sortie_Excel_tmp.SEK_WSP = sortie.SEK_WSP ;
sortie_Excel_tmp.EUR_FINN_RRP = sortie.EUR_FINN_RRP ;
sortie_Excel_tmp.EUR_FINN_WSP = sortie.EUR_FINN_WSP ;
sortie_Excel_tmp.FABRICATION = sortie.FABRICATION ;
sortie_Excel_tmp.COO = sortie.COO ;
sortie_Excel_tmp.CUSTOM_TARIFF_CODE = sortie.CUSTOM_TARIFF_CODE ;
sortie_Excel_tmp.UPC = sortie.UPC ;
sortie_Excel_tmp.SMU_TYPE = sortie.SMU_TYPE ;
sortie_Excel_tmp.LABELD365 = copyOfcopyOfsortie_fashion.LABEL ;
sortie_Excel_tmp.LABELNAMED365 = copyOfcopyOfsortie_fashion.NAME ;
sortie_Excel_tmp.FASHIOND365 = row18.NAME ;
sortie_Excel_tmp.PRODUCTD365 = row19.NAME ;
sortie_Excel_tmp.DELIVERYFLOW = sortie.DELIVERYFLOW ;
sortie_Excel = sortie_Excel_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "sortie_Excel"
if(sortie_Excel != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_Excel");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_full_cat = null;


// # Output table : 'sortie_full_cat'
sortie_full_cat_tmp.BRAND = sortie_Excel.BRAND ;
sortie_full_cat_tmp.SEASON = sortie_Excel.SEASON ;
sortie_full_cat_tmp.CATEGORY = sortie_Excel.CATEGORY ;
sortie_full_cat_tmp.REF = sortie_Excel.REF ;
sortie_full_cat_tmp.DESCRIPTION = sortie_Excel.DESCRIPTION ;
sortie_full_cat_tmp.STYLE = sortie_Excel.STYLE ;
sortie_full_cat_tmp.COLOR = sortie_Excel.COLOR ;
sortie_full_cat_tmp.FASHION = sortie_Excel.FASHION ;
sortie_full_cat_tmp.STYLECOLORLABEL = sortie_Excel.STYLECOLORLABEL ;
sortie_full_cat_tmp.COLORNAME = sortie_Excel.COLORNAME ;
sortie_full_cat_tmp.LBL = sortie_Excel.LBL ;
sortie_full_cat_tmp.STYLE_COLOR = sortie_Excel.STYLE_COLOR ;
sortie_full_cat_tmp.GENDER = sortie_Excel.GENDER ;
sortie_full_cat_tmp.AGE_RANGE = sortie_Excel.AGE_RANGE ;
sortie_full_cat_tmp.SIZE_RANGE = sortie_Excel.SIZE_RANGE ;
sortie_full_cat_tmp.SIZE = sortie_Excel.SIZE ;
sortie_full_cat_tmp.US_SIZE = sortie_Excel.US_SIZE ;
sortie_full_cat_tmp.CM_SIZE = sortie_Excel.CM_SIZE ;
sortie_full_cat_tmp.PRODUCT = sortie_Excel.PRODUCT ;
sortie_full_cat_tmp.PRODUCT_STATUS = sortie_Excel.PRODUCT_STATUS ;
sortie_full_cat_tmp.PRODUCT_TIER = sortie_Excel.PRODUCT_TIER ;
sortie_full_cat_tmp.ACCT_EXCLUS = sortie_Excel.ACCT_EXCLUS ;
sortie_full_cat_tmp.SIZE_RATIO_SPLIT = sortie_Excel.SIZE_RATIO_SPLIT ;
sortie_full_cat_tmp.REC_SIZE_SPLIT = sortie_Excel.REC_SIZE_SPLIT ;
sortie_full_cat_tmp.CARTON_QTY = sortie_Excel.CARTON_QTY ;
sortie_full_cat_tmp.ATTRIBUTE = sortie_Excel.ATTRIBUTE ;
sortie_full_cat_tmp.UNITS = sortie_Excel.UNITS ;
sortie_full_cat_tmp.EUR_RRP = sortie_Excel.EUR_RRP ;
sortie_full_cat_tmp.EUR_WSP = sortie_Excel.EUR_WSP ;
sortie_full_cat_tmp.GBP_RRP = sortie_Excel.GBP_RRP ;
sortie_full_cat_tmp.GBP_WSP = sortie_Excel.GBP_WSP ;
sortie_full_cat_tmp.CHF_RRP = sortie_Excel.CHF_RRP ;
sortie_full_cat_tmp.CHF_WSP = sortie_Excel.CHF_WSP ;
sortie_full_cat_tmp.NOK_RRP = sortie_Excel.NOK_RRP ;
sortie_full_cat_tmp.NOK_WSP = sortie_Excel.NOK_WSP ;
sortie_full_cat_tmp.DKK_RRP = sortie_Excel.DKK_RRP ;
sortie_full_cat_tmp.DKK_WSP = sortie_Excel.DKK_WSP ;
sortie_full_cat_tmp.SEK_RRP = sortie_Excel.SEK_RRP ;
sortie_full_cat_tmp.SEK_WSP = sortie_Excel.SEK_WSP ;
sortie_full_cat_tmp.EUR_FINN_RRP = sortie_Excel.EUR_FINN_RRP ;
sortie_full_cat_tmp.EUR_FINN_WSP = sortie_Excel.EUR_FINN_WSP ;
sortie_full_cat_tmp.FABRICATION = sortie_Excel.FABRICATION ;
sortie_full_cat_tmp.COO = sortie_Excel.COO ;
sortie_full_cat_tmp.CUSTOM_TARIFF_CODE = sortie_Excel.CUSTOM_TARIFF_CODE ;
sortie_full_cat_tmp.UPC = sortie_Excel.UPC ;
sortie_full_cat_tmp.SMU_TYPE = sortie_Excel.SMU_TYPE ;
sortie_full_cat_tmp.LABELD365 = sortie_Excel.LABELD365 ;
sortie_full_cat_tmp.LABELNAMED365 = sortie_Excel.LABELNAMED365 ;
sortie_full_cat_tmp.FASHIOND365 = sortie_Excel.FASHIOND365 ;
sortie_full_cat_tmp.PRODUCTD365 = sortie_Excel.PRODUCTD365 ;
sortie_full_cat_tmp.DELIVERYFLOW = sortie_Excel.DELIVERYFLOW ;
sortie_full_cat = sortie_full_cat_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_full_cat"
if(sortie_full_cat != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_cat");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(sortie_full_cat.BRAND != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.BRAND)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.SEASON != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.SEASON)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.CATEGORY != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.CATEGORY)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.REF != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.REF)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.DESCRIPTION != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.DESCRIPTION)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.STYLE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.STYLE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.COLOR != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.COLOR)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.FASHION != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.FASHION)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.STYLECOLORLABEL != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.STYLECOLORLABEL)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.COLORNAME != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.COLORNAME)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.LBL != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.LBL)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.STYLE_COLOR != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.STYLE_COLOR)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.GENDER != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.GENDER)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.AGE_RANGE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.AGE_RANGE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.SIZE_RANGE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.SIZE_RANGE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.SIZE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.SIZE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.US_SIZE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.US_SIZE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.CM_SIZE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.CM_SIZE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.PRODUCT != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.PRODUCT)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.PRODUCT_STATUS != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.PRODUCT_STATUS)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.PRODUCT_TIER != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.PRODUCT_TIER)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.ACCT_EXCLUS != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.ACCT_EXCLUS)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.SIZE_RATIO_SPLIT != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.SIZE_RATIO_SPLIT)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.REC_SIZE_SPLIT != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.REC_SIZE_SPLIT)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.CARTON_QTY != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.CARTON_QTY)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.ATTRIBUTE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.ATTRIBUTE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.UNITS != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.UNITS)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.EUR_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.EUR_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.EUR_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.EUR_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.GBP_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.GBP_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.GBP_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.GBP_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.CHF_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.CHF_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.CHF_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.CHF_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.NOK_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.NOK_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.NOK_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.NOK_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.DKK_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.DKK_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.DKK_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.DKK_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.SEK_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.SEK_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.SEK_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.SEK_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.EUR_FINN_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.EUR_FINN_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.EUR_FINN_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.EUR_FINN_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.FABRICATION != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.FABRICATION)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.COO != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.COO)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.CUSTOM_TARIFF_CODE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.CUSTOM_TARIFF_CODE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.UPC != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.UPC)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.SMU_TYPE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.SMU_TYPE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.LABELD365 != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.LABELD365)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.LABELNAMED365 != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.LABELNAMED365)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.FASHIOND365 != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.FASHIOND365)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.PRODUCTD365 != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.PRODUCTD365)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full_cat.DELIVERYFLOW != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full_cat.DELIVERYFLOW)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row6 = sortie_full_cat;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_full_2 = null;
copyOfsortie_product = null;


// # Output table : 'copyOfsortie_full_2'
copyOfsortie_full_2_tmp.BRAND = row6.BRAND ;
copyOfsortie_full_2_tmp.SEASON = row6.SEASON ;
copyOfsortie_full_2_tmp.CATEGORY = row6.CATEGORY ;
copyOfsortie_full_2_tmp.REF = row6.REF ;
copyOfsortie_full_2_tmp.DESCRIPTION = row6.DESCRIPTION ;
copyOfsortie_full_2_tmp.STYLE = row6.STYLE ;
copyOfsortie_full_2_tmp.COLOR = row6.COLOR ;
copyOfsortie_full_2_tmp.FASHION = row6.FASHION ;
copyOfsortie_full_2_tmp.STYLECOLORLABEL = row6.STYLECOLORLABEL ;
copyOfsortie_full_2_tmp.COLORNAME = row6.COLORNAME ;
copyOfsortie_full_2_tmp.LBL = row6.LBL ;
copyOfsortie_full_2_tmp.STYLE_COLOR = row6.STYLE_COLOR ;
copyOfsortie_full_2_tmp.GENDER = row6.GENDER ;
copyOfsortie_full_2_tmp.AGE_RANGE = row6.AGE_RANGE ;
copyOfsortie_full_2_tmp.SIZE_RANGE = row6.SIZE_RANGE ;
copyOfsortie_full_2_tmp.SIZE = row6.SIZE ;
copyOfsortie_full_2_tmp.US_SIZE = row6.US_SIZE ;
copyOfsortie_full_2_tmp.CM_SIZE = row6.CM_SIZE ;
copyOfsortie_full_2_tmp.PRODUCT = row6.PRODUCT ;
copyOfsortie_full_2_tmp.PRODUCT_STATUS = row6.PRODUCT_STATUS ;
copyOfsortie_full_2_tmp.PRODUCT_TIER = row6.PRODUCT_TIER ;
copyOfsortie_full_2_tmp.ACCT_EXCLUS = row6.ACCT_EXCLUS ;
copyOfsortie_full_2_tmp.SIZE_RATIO_SPLIT = row6.SIZE_RATIO_SPLIT ;
copyOfsortie_full_2_tmp.REC_SIZE_SPLIT = row6.REC_SIZE_SPLIT ;
copyOfsortie_full_2_tmp.CARTON_QTY = row6.CARTON_QTY ;
copyOfsortie_full_2_tmp.ATTRIBUTE = row6.ATTRIBUTE ;
copyOfsortie_full_2_tmp.UNITS = row6.UNITS ;
copyOfsortie_full_2_tmp.EUR_RRP = row6.EUR_RRP ;
copyOfsortie_full_2_tmp.EUR_WSP = row6.EUR_WSP ;
copyOfsortie_full_2_tmp.GBP_RRP = row6.GBP_RRP ;
copyOfsortie_full_2_tmp.GBP_WSP = row6.GBP_WSP ;
copyOfsortie_full_2_tmp.CHF_RRP = row6.CHF_RRP ;
copyOfsortie_full_2_tmp.CHF_WSP = row6.CHF_WSP ;
copyOfsortie_full_2_tmp.NOK_RRP = row6.NOK_RRP ;
copyOfsortie_full_2_tmp.NOK_WSP = row6.NOK_WSP ;
copyOfsortie_full_2_tmp.DKK_RRP = row6.DKK_RRP ;
copyOfsortie_full_2_tmp.DKK_WSP = row6.DKK_WSP ;
copyOfsortie_full_2_tmp.SEK_RRP = row6.SEK_RRP ;
copyOfsortie_full_2_tmp.SEK_WSP = row6.SEK_WSP ;
copyOfsortie_full_2_tmp.EUR_FINN_RRP = row6.EUR_FINN_RRP ;
copyOfsortie_full_2_tmp.EUR_FINN_WSP = row6.EUR_FINN_WSP ;
copyOfsortie_full_2_tmp.FABRICATION = row6.FABRICATION ;
copyOfsortie_full_2_tmp.COO = "";
copyOfsortie_full_2_tmp.CUSTOM_TARIFF_CODE = row6.CUSTOM_TARIFF_CODE ;
copyOfsortie_full_2_tmp.UPC = row6.UPC ;
copyOfsortie_full_2_tmp.SMU_TYPE = row6.SMU_TYPE ;
copyOfsortie_full_2_tmp.LABELD365 = row6.LABELD365 ;
copyOfsortie_full_2_tmp.LABELNAMED365 = row6.LABELNAMED365 ;
copyOfsortie_full_2_tmp.FASHIOND365 = row6.FASHIOND365 ;
copyOfsortie_full_2_tmp.PRODUCTD365 = row6.PRODUCTD365 ;
copyOfsortie_full_2_tmp.DELIVERYFLOW = row6.DELIVERYFLOW ;
copyOfsortie_full_2 = copyOfsortie_full_2_tmp;

// # Output table : 'copyOfsortie_product'
copyOfsortie_product_tmp.PRODUCTNUMBER = row6.STYLE ;
copyOfsortie_product_tmp.PRODUCTCATEGORYNAME = row6.PRODUCTD365 ;
copyOfsortie_product_tmp.PRODUCTCATEGORYHIERARCHYNAME = "Product Family Hierarchy";
copyOfsortie_product = copyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_full_2"
if(copyOfsortie_full_2 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_full_2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfsortie_full = null;
copyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfsortie_full'
copyOfcopyOfsortie_full_tmp.BRAND = copyOfsortie_full_2.BRAND ;
copyOfcopyOfsortie_full_tmp.SEASON = copyOfsortie_full_2.SEASON ;
copyOfcopyOfsortie_full_tmp.CATEGORY = copyOfsortie_full_2.CATEGORY ;
copyOfcopyOfsortie_full_tmp.REF = copyOfsortie_full_2.REF ;
copyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfsortie_full_2.DESCRIPTION ;
copyOfcopyOfsortie_full_tmp.STYLE = copyOfsortie_full_2.STYLE ;
copyOfcopyOfsortie_full_tmp.COLOR = copyOfsortie_full_2.COLOR ;
copyOfcopyOfsortie_full_tmp.FASHION = copyOfsortie_full_2.FASHION ;
copyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfsortie_full_2.STYLECOLORLABEL ;
copyOfcopyOfsortie_full_tmp.COLORNAME = copyOfsortie_full_2.COLORNAME ;
copyOfcopyOfsortie_full_tmp.LBL = copyOfsortie_full_2.LBL ;
copyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfsortie_full_2.STYLE_COLOR ;
copyOfcopyOfsortie_full_tmp.GENDER = copyOfsortie_full_2.GENDER ;
copyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfsortie_full_2.AGE_RANGE ;
copyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfsortie_full_2.SIZE_RANGE ;
copyOfcopyOfsortie_full_tmp.SIZE = copyOfsortie_full_2.SIZE ;
copyOfcopyOfsortie_full_tmp.US_SIZE = copyOfsortie_full_2.US_SIZE ;
copyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfsortie_full_2.CM_SIZE ;
copyOfcopyOfsortie_full_tmp.PRODUCT = copyOfsortie_full_2.PRODUCT ;
copyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfsortie_full_2.PRODUCT_STATUS ;
copyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfsortie_full_2.PRODUCT_TIER ;
copyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfsortie_full_2.ACCT_EXCLUS ;
copyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfsortie_full_2.SIZE_RATIO_SPLIT ;
copyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfsortie_full_2.REC_SIZE_SPLIT ;
copyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfsortie_full_2.CARTON_QTY ;
copyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfsortie_full_2.ATTRIBUTE ;
copyOfcopyOfsortie_full_tmp.UNITS = copyOfsortie_full_2.UNITS ;
copyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfsortie_full_2.EUR_RRP ;
copyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfsortie_full_2.EUR_WSP ;
copyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfsortie_full_2.GBP_RRP ;
copyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfsortie_full_2.GBP_WSP ;
copyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfsortie_full_2.CHF_RRP ;
copyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfsortie_full_2.CHF_WSP ;
copyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfsortie_full_2.NOK_RRP ;
copyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfsortie_full_2.NOK_WSP ;
copyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfsortie_full_2.DKK_RRP ;
copyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfsortie_full_2.DKK_WSP ;
copyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfsortie_full_2.SEK_RRP ;
copyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfsortie_full_2.SEK_WSP ;
copyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfsortie_full_2.EUR_FINN_RRP ;
copyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfsortie_full_2.EUR_FINN_WSP ;
copyOfcopyOfsortie_full_tmp.FABRICATION = copyOfsortie_full_2.FABRICATION ;
copyOfcopyOfsortie_full_tmp.COO = copyOfsortie_full_2.COO ;
copyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfsortie_full_2.CUSTOM_TARIFF_CODE ;
copyOfcopyOfsortie_full_tmp.UPC = copyOfsortie_full_2.UPC ;
copyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfsortie_full_2.SMU_TYPE ;
copyOfcopyOfsortie_full_tmp.LABELD365 = copyOfsortie_full_2.LABELD365 ;
copyOfcopyOfsortie_full_tmp.LABELNAMED365 = copyOfsortie_full_2.LABELNAMED365 ;
copyOfcopyOfsortie_full_tmp.FASHIOND365 = copyOfsortie_full_2.FASHIOND365 ;
copyOfcopyOfsortie_full_tmp.PRODUCTD365 = copyOfsortie_full_2.PRODUCTD365 ;
copyOfcopyOfsortie_full_tmp.DELIVERYFLOW = copyOfsortie_full_2.DELIVERYFLOW ;
copyOfcopyOfsortie_full = copyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfsortie_product'
copyOfcopyOfsortie_product_tmp.ITEMID = copyOfsortie_full_2.STYLE ;
copyOfcopyOfsortie_product_tmp.SEASONCODE = copyOfsortie_full_2.SEASON ;
copyOfcopyOfsortie_product_tmp.ISDEFAULT = "Yes";
copyOfcopyOfsortie_product_tmp.NOOS = "No";
copyOfcopyOfsortie_product = copyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfsortie_full"
if(copyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

sortie_full_COO = null;
copyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'sortie_full_COO'
sortie_full_COO_tmp.BRAND = copyOfcopyOfsortie_full.BRAND ;
sortie_full_COO_tmp.SEASON = copyOfcopyOfsortie_full.SEASON ;
sortie_full_COO_tmp.CATEGORY = copyOfcopyOfsortie_full.CATEGORY ;
sortie_full_COO_tmp.REF = copyOfcopyOfsortie_full.REF ;
sortie_full_COO_tmp.DESCRIPTION = copyOfcopyOfsortie_full.DESCRIPTION ;
sortie_full_COO_tmp.STYLE = copyOfcopyOfsortie_full.STYLE ;
sortie_full_COO_tmp.COLOR = copyOfcopyOfsortie_full.COLOR ;
sortie_full_COO_tmp.FASHION = copyOfcopyOfsortie_full.FASHION ;
sortie_full_COO_tmp.STYLECOLORLABEL = copyOfcopyOfsortie_full.STYLECOLORLABEL ;
sortie_full_COO_tmp.COLORNAME = copyOfcopyOfsortie_full.COLORNAME ;
sortie_full_COO_tmp.LBL = copyOfcopyOfsortie_full.LBL ;
sortie_full_COO_tmp.STYLE_COLOR = copyOfcopyOfsortie_full.STYLE_COLOR ;
sortie_full_COO_tmp.GENDER = copyOfcopyOfsortie_full.GENDER ;
sortie_full_COO_tmp.AGE_RANGE = copyOfcopyOfsortie_full.AGE_RANGE ;
sortie_full_COO_tmp.SIZE_RANGE = copyOfcopyOfsortie_full.SIZE_RANGE ;
sortie_full_COO_tmp.SIZE = copyOfcopyOfsortie_full.SIZE ;
sortie_full_COO_tmp.US_SIZE = copyOfcopyOfsortie_full.US_SIZE ;
sortie_full_COO_tmp.CM_SIZE = copyOfcopyOfsortie_full.CM_SIZE ;
sortie_full_COO_tmp.PRODUCT = copyOfcopyOfsortie_full.PRODUCT ;
sortie_full_COO_tmp.PRODUCT_STATUS = copyOfcopyOfsortie_full.PRODUCT_STATUS ;
sortie_full_COO_tmp.PRODUCT_TIER = copyOfcopyOfsortie_full.PRODUCT_TIER ;
sortie_full_COO_tmp.ACCT_EXCLUS = copyOfcopyOfsortie_full.ACCT_EXCLUS ;
sortie_full_COO_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
sortie_full_COO_tmp.REC_SIZE_SPLIT = copyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
sortie_full_COO_tmp.CARTON_QTY = copyOfcopyOfsortie_full.CARTON_QTY ;
sortie_full_COO_tmp.ATTRIBUTE = copyOfcopyOfsortie_full.ATTRIBUTE ;
sortie_full_COO_tmp.UNITS = copyOfcopyOfsortie_full.UNITS ;
sortie_full_COO_tmp.EUR_RRP = copyOfcopyOfsortie_full.EUR_RRP ;
sortie_full_COO_tmp.EUR_WSP = copyOfcopyOfsortie_full.EUR_WSP ;
sortie_full_COO_tmp.GBP_RRP = copyOfcopyOfsortie_full.GBP_RRP ;
sortie_full_COO_tmp.GBP_WSP = copyOfcopyOfsortie_full.GBP_WSP ;
sortie_full_COO_tmp.CHF_RRP = copyOfcopyOfsortie_full.CHF_RRP ;
sortie_full_COO_tmp.CHF_WSP = copyOfcopyOfsortie_full.CHF_WSP ;
sortie_full_COO_tmp.NOK_RRP = copyOfcopyOfsortie_full.NOK_RRP ;
sortie_full_COO_tmp.NOK_WSP = copyOfcopyOfsortie_full.NOK_WSP ;
sortie_full_COO_tmp.DKK_RRP = copyOfcopyOfsortie_full.DKK_RRP ;
sortie_full_COO_tmp.DKK_WSP = copyOfcopyOfsortie_full.DKK_WSP ;
sortie_full_COO_tmp.SEK_RRP = copyOfcopyOfsortie_full.SEK_RRP ;
sortie_full_COO_tmp.SEK_WSP = copyOfcopyOfsortie_full.SEK_WSP ;
sortie_full_COO_tmp.EUR_FINN_RRP = copyOfcopyOfsortie_full.EUR_FINN_RRP ;
sortie_full_COO_tmp.EUR_FINN_WSP = copyOfcopyOfsortie_full.EUR_FINN_WSP ;
sortie_full_COO_tmp.FABRICATION = copyOfcopyOfsortie_full.FABRICATION ;
sortie_full_COO_tmp.COO = copyOfcopyOfsortie_full.COO ;
sortie_full_COO_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
sortie_full_COO_tmp.UPC = copyOfcopyOfsortie_full.UPC ;
sortie_full_COO_tmp.SMU_TYPE = copyOfcopyOfsortie_full.SMU_TYPE ;
sortie_full_COO_tmp.LABELD365 = copyOfcopyOfsortie_full.LABELD365 ;
sortie_full_COO_tmp.LABELNAMED365 = copyOfcopyOfsortie_full.LABELNAMED365 ;
sortie_full_COO_tmp.FASHIOND365 = copyOfcopyOfsortie_full.FASHIOND365 ;
sortie_full_COO_tmp.PRODUCTD365 = copyOfcopyOfsortie_full.PRODUCTD365 ;
sortie_full_COO_tmp.DELIVERYFLOW = copyOfcopyOfsortie_full.DELIVERYFLOW ;
sortie_full_COO = sortie_full_COO_tmp;

// # Output table : 'copyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfsortie_product_tmp.ITEMID = copyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfsortie_product_tmp.INVENTSIZEID = copyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfsortie_product_tmp.INVENTSTYLEID = copyOfcopyOfsortie_full.LABELD365 ;
copyOfcopyOfcopyOfsortie_product_tmp.INVENTCOLORID = copyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfsortie_product_tmp.ORIGCOUNTRYREGIONID = copyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfsortie_product_tmp.ORIGSTATEID = null;
copyOfcopyOfcopyOfsortie_product_tmp.TODATE = null;
copyOfcopyOfcopyOfsortie_product_tmp.FROMDATE = null;
copyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "sortie_full_COO"
if(sortie_full_COO != null) { 



	
	/**
	 * [tMap_23 main ] start
	 */

	

	
	
	currentComponent="tMap_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_COO");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_23 = false;
		  boolean mainRowRejected_tMap_23 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
        // ###############################
        // # Output tables

sortie_full_ = null;
copyOfcopyOfsortie_size = null;


// # Output table : 'sortie_full_'
sortie_full__tmp.BRAND = sortie_full_COO.BRAND ;
sortie_full__tmp.SEASON = sortie_full_COO.SEASON ;
sortie_full__tmp.CATEGORY = sortie_full_COO.CATEGORY ;
sortie_full__tmp.REF = sortie_full_COO.REF ;
sortie_full__tmp.DESCRIPTION = sortie_full_COO.DESCRIPTION ;
sortie_full__tmp.STYLE = sortie_full_COO.STYLE ;
sortie_full__tmp.COLOR = sortie_full_COO.COLOR ;
sortie_full__tmp.FASHION = sortie_full_COO.FASHION ;
sortie_full__tmp.STYLECOLORLABEL = sortie_full_COO.STYLECOLORLABEL ;
sortie_full__tmp.COLORNAME = sortie_full_COO.COLORNAME ;
sortie_full__tmp.LBL = sortie_full_COO.LBL ;
sortie_full__tmp.STYLE_COLOR = sortie_full_COO.STYLE_COLOR ;
sortie_full__tmp.GENDER = sortie_full_COO.GENDER ;
sortie_full__tmp.AGE_RANGE = sortie_full_COO.AGE_RANGE ;
sortie_full__tmp.SIZE_RANGE = sortie_full_COO.SIZE_RANGE ;
sortie_full__tmp.SIZE = sortie_full_COO.SIZE ;
sortie_full__tmp.US_SIZE = sortie_full_COO.US_SIZE ;
sortie_full__tmp.CM_SIZE = sortie_full_COO.CM_SIZE ;
sortie_full__tmp.PRODUCT = sortie_full_COO.PRODUCT ;
sortie_full__tmp.PRODUCT_STATUS = sortie_full_COO.PRODUCT_STATUS ;
sortie_full__tmp.PRODUCT_TIER = sortie_full_COO.PRODUCT_TIER ;
sortie_full__tmp.ACCT_EXCLUS = sortie_full_COO.ACCT_EXCLUS ;
sortie_full__tmp.SIZE_RATIO_SPLIT = sortie_full_COO.SIZE_RATIO_SPLIT ;
sortie_full__tmp.REC_SIZE_SPLIT = sortie_full_COO.REC_SIZE_SPLIT ;
sortie_full__tmp.CARTON_QTY = sortie_full_COO.CARTON_QTY ;
sortie_full__tmp.ATTRIBUTE = sortie_full_COO.ATTRIBUTE ;
sortie_full__tmp.UNITS = sortie_full_COO.UNITS ;
sortie_full__tmp.EUR_RRP = sortie_full_COO.EUR_RRP ;
sortie_full__tmp.EUR_WSP = sortie_full_COO.EUR_WSP ;
sortie_full__tmp.GBP_RRP = sortie_full_COO.GBP_RRP ;
sortie_full__tmp.GBP_WSP = sortie_full_COO.GBP_WSP ;
sortie_full__tmp.CHF_RRP = sortie_full_COO.CHF_RRP ;
sortie_full__tmp.CHF_WSP = sortie_full_COO.CHF_WSP ;
sortie_full__tmp.NOK_RRP = sortie_full_COO.NOK_RRP ;
sortie_full__tmp.NOK_WSP = sortie_full_COO.NOK_WSP ;
sortie_full__tmp.DKK_RRP = sortie_full_COO.DKK_RRP ;
sortie_full__tmp.DKK_WSP = sortie_full_COO.DKK_WSP ;
sortie_full__tmp.SEK_RRP = sortie_full_COO.SEK_RRP ;
sortie_full__tmp.SEK_WSP = sortie_full_COO.SEK_WSP ;
sortie_full__tmp.EUR_FINN_RRP = sortie_full_COO.EUR_FINN_RRP ;
sortie_full__tmp.EUR_FINN_WSP = sortie_full_COO.EUR_FINN_WSP ;
sortie_full__tmp.FABRICATION = sortie_full_COO.FABRICATION ;
sortie_full__tmp.COO = sortie_full_COO.COO ;
sortie_full__tmp.CUSTOM_TARIFF_CODE = sortie_full_COO.CUSTOM_TARIFF_CODE ;
sortie_full__tmp.UPC = sortie_full_COO.UPC ;
sortie_full__tmp.SMU_TYPE = sortie_full_COO.SMU_TYPE ;
sortie_full__tmp.LABELD365 = sortie_full_COO.LABELD365 ;
sortie_full__tmp.LABELNAMED365 = sortie_full_COO.LABELNAMED365 ;
sortie_full__tmp.DELIVERYFLOW = sortie_full_COO.DELIVERYFLOW ;
sortie_full_ = sortie_full__tmp;

// # Output table : 'copyOfcopyOfsortie_size'
copyOfcopyOfsortie_size_tmp.PRODUCTMASTERNUMBER = sortie_full_COO.STYLE ;
copyOfcopyOfsortie_size_tmp.PRODUCTMASTERSIZEID = sortie_full_COO.SIZE ;
copyOfcopyOfsortie_size_tmp.LANGUAGEID = "en-US";
copyOfcopyOfsortie_size_tmp.TRANSLATEDSIZEDESCRIPTION = sortie_full_COO.CM_SIZE ;
copyOfcopyOfsortie_size_tmp.TRANSLATEDSIZENAME = sortie_full_COO.US_SIZE ;
copyOfcopyOfsortie_size = copyOfcopyOfsortie_size_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_23 = false;










 


	tos_count_tMap_23++;

/**
 * [tMap_23 main ] stop
 */
	
	/**
	 * [tMap_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_begin ] stop
 */
// Start of branch "sortie_full_"
if(sortie_full_ != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

sortie_full_fashion = null;


// # Output table : 'sortie_full_fashion'
sortie_full_fashion_tmp.BRAND = sortie_full_.BRAND ;
sortie_full_fashion_tmp.SEASON = sortie_full_.SEASON ;
sortie_full_fashion_tmp.CATEGORY = sortie_full_.CATEGORY ;
sortie_full_fashion_tmp.REF = sortie_full_.REF ;
sortie_full_fashion_tmp.DESCRIPTION = sortie_full_.DESCRIPTION ;
sortie_full_fashion_tmp.STYLE = sortie_full_.STYLE ;
sortie_full_fashion_tmp.COLOR = sortie_full_.COLOR ;
sortie_full_fashion_tmp.FASHION = sortie_full_.FASHION ;
sortie_full_fashion_tmp.STYLECOLORLABEL = sortie_full_.STYLECOLORLABEL ;
sortie_full_fashion_tmp.COLORNAME = sortie_full_.COLORNAME ;
sortie_full_fashion_tmp.LBL = sortie_full_.LBL ;
sortie_full_fashion_tmp.STYLE_COLOR = sortie_full_.STYLE_COLOR ;
sortie_full_fashion_tmp.GENDER = sortie_full_.GENDER ;
sortie_full_fashion_tmp.AGE_RANGE = sortie_full_.AGE_RANGE ;
sortie_full_fashion_tmp.SIZE_RANGE = sortie_full_.SIZE_RANGE ;
sortie_full_fashion_tmp.SIZE = sortie_full_.SIZE ;
sortie_full_fashion_tmp.US_SIZE = sortie_full_.US_SIZE ;
sortie_full_fashion_tmp.CM_SIZE = sortie_full_.CM_SIZE ;
sortie_full_fashion_tmp.PRODUCT = sortie_full_.PRODUCT ;
sortie_full_fashion_tmp.PRODUCT_STATUS = sortie_full_.PRODUCT_STATUS ;
sortie_full_fashion_tmp.PRODUCT_TIER = sortie_full_.PRODUCT_TIER ;
sortie_full_fashion_tmp.ACCT_EXCLUS = sortie_full_.ACCT_EXCLUS ;
sortie_full_fashion_tmp.SIZE_RATIO_SPLIT = sortie_full_.SIZE_RATIO_SPLIT ;
sortie_full_fashion_tmp.REC_SIZE_SPLIT = sortie_full_.REC_SIZE_SPLIT ;
sortie_full_fashion_tmp.CARTON_QTY = sortie_full_.CARTON_QTY ;
sortie_full_fashion_tmp.ATTRIBUTE = sortie_full_.ATTRIBUTE ;
sortie_full_fashion_tmp.UNITS = sortie_full_.UNITS ;
sortie_full_fashion_tmp.EUR_RRP = sortie_full_.EUR_RRP ;
sortie_full_fashion_tmp.EUR_WSP = sortie_full_.EUR_WSP ;
sortie_full_fashion_tmp.GBP_RRP = sortie_full_.GBP_RRP ;
sortie_full_fashion_tmp.GBP_WSP = sortie_full_.GBP_WSP ;
sortie_full_fashion_tmp.CHF_RRP = sortie_full_.CHF_RRP ;
sortie_full_fashion_tmp.CHF_WSP = sortie_full_.CHF_WSP ;
sortie_full_fashion_tmp.NOK_RRP = sortie_full_.NOK_RRP ;
sortie_full_fashion_tmp.NOK_WSP = sortie_full_.NOK_WSP ;
sortie_full_fashion_tmp.DKK_RRP = sortie_full_.DKK_RRP ;
sortie_full_fashion_tmp.DKK_WSP = sortie_full_.DKK_WSP ;
sortie_full_fashion_tmp.SEK_RRP = sortie_full_.SEK_RRP ;
sortie_full_fashion_tmp.SEK_WSP = sortie_full_.SEK_WSP ;
sortie_full_fashion_tmp.EUR_FINN_RRP = sortie_full_.EUR_FINN_RRP ;
sortie_full_fashion_tmp.EUR_FINN_WSP = sortie_full_.EUR_FINN_WSP ;
sortie_full_fashion_tmp.FABRICATION = sortie_full_.FABRICATION ;
sortie_full_fashion_tmp.COO = sortie_full_.COO ;
sortie_full_fashion_tmp.CUSTOM_TARIFF_CODE = sortie_full_.CUSTOM_TARIFF_CODE ;
sortie_full_fashion_tmp.UPC = sortie_full_.UPC ;
sortie_full_fashion_tmp.SMU_TYPE = sortie_full_.SMU_TYPE ;
sortie_full_fashion_tmp.LABELD365 = sortie_full_.LABELD365 ;
sortie_full_fashion_tmp.LABELNAMED365 = sortie_full_.LABELNAMED365 ;
sortie_full_fashion_tmp.DELIVERYFLOW = sortie_full_.DELIVERYFLOW ;
sortie_full_fashion = sortie_full_fashion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "sortie_full_fashion"
if(sortie_full_fashion != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_fashion");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_full_ = null;
copyOfcopyOfcopyOfsortie_size_0 = null;


// # Output table : 'copyOfsortie_full_'
copyOfsortie_full__tmp.BRAND = sortie_full_fashion.BRAND ;
copyOfsortie_full__tmp.SEASON = sortie_full_fashion.SEASON ;
copyOfsortie_full__tmp.CATEGORY = sortie_full_fashion.CATEGORY ;
copyOfsortie_full__tmp.REF = sortie_full_fashion.REF ;
copyOfsortie_full__tmp.DESCRIPTION = sortie_full_fashion.DESCRIPTION ;
copyOfsortie_full__tmp.STYLE = sortie_full_fashion.STYLE ;
copyOfsortie_full__tmp.COLOR = sortie_full_fashion.COLOR ;
copyOfsortie_full__tmp.FASHION = sortie_full_fashion.FASHION ;
copyOfsortie_full__tmp.STYLECOLORLABEL = sortie_full_fashion.STYLECOLORLABEL ;
copyOfsortie_full__tmp.COLORNAME = sortie_full_fashion.COLORNAME ;
copyOfsortie_full__tmp.LBL = sortie_full_fashion.LBL ;
copyOfsortie_full__tmp.STYLE_COLOR = sortie_full_fashion.STYLE_COLOR ;
copyOfsortie_full__tmp.GENDER = sortie_full_fashion.GENDER ;
copyOfsortie_full__tmp.AGE_RANGE = sortie_full_fashion.AGE_RANGE ;
copyOfsortie_full__tmp.SIZE_RANGE = sortie_full_fashion.SIZE_RANGE ;
copyOfsortie_full__tmp.SIZE = sortie_full_fashion.SIZE ;
copyOfsortie_full__tmp.US_SIZE = sortie_full_fashion.US_SIZE ;
copyOfsortie_full__tmp.CM_SIZE = sortie_full_fashion.CM_SIZE ;
copyOfsortie_full__tmp.PRODUCT = sortie_full_fashion.PRODUCT ;
copyOfsortie_full__tmp.PRODUCT_STATUS = sortie_full_fashion.PRODUCT_STATUS ;
copyOfsortie_full__tmp.PRODUCT_TIER = sortie_full_fashion.PRODUCT_TIER ;
copyOfsortie_full__tmp.ACCT_EXCLUS = sortie_full_fashion.ACCT_EXCLUS ;
copyOfsortie_full__tmp.SIZE_RATIO_SPLIT = sortie_full_fashion.SIZE_RATIO_SPLIT ;
copyOfsortie_full__tmp.REC_SIZE_SPLIT = sortie_full_fashion.REC_SIZE_SPLIT ;
copyOfsortie_full__tmp.CARTON_QTY = sortie_full_fashion.CARTON_QTY ;
copyOfsortie_full__tmp.ATTRIBUTE = sortie_full_fashion.ATTRIBUTE ;
copyOfsortie_full__tmp.UNITS = sortie_full_fashion.UNITS ;
copyOfsortie_full__tmp.EUR_RRP = sortie_full_fashion.EUR_RRP ;
copyOfsortie_full__tmp.EUR_WSP = sortie_full_fashion.EUR_WSP ;
copyOfsortie_full__tmp.GBP_RRP = sortie_full_fashion.GBP_RRP ;
copyOfsortie_full__tmp.GBP_WSP = sortie_full_fashion.GBP_WSP ;
copyOfsortie_full__tmp.CHF_RRP = sortie_full_fashion.CHF_RRP ;
copyOfsortie_full__tmp.CHF_WSP = sortie_full_fashion.CHF_WSP ;
copyOfsortie_full__tmp.NOK_RRP = sortie_full_fashion.NOK_RRP ;
copyOfsortie_full__tmp.NOK_WSP = sortie_full_fashion.NOK_WSP ;
copyOfsortie_full__tmp.DKK_RRP = sortie_full_fashion.DKK_RRP ;
copyOfsortie_full__tmp.DKK_WSP = sortie_full_fashion.DKK_WSP ;
copyOfsortie_full__tmp.SEK_RRP = sortie_full_fashion.SEK_RRP ;
copyOfsortie_full__tmp.SEK_WSP = sortie_full_fashion.SEK_WSP ;
copyOfsortie_full__tmp.EUR_FINN_RRP = sortie_full_fashion.EUR_FINN_RRP ;
copyOfsortie_full__tmp.EUR_FINN_WSP = sortie_full_fashion.EUR_FINN_WSP ;
copyOfsortie_full__tmp.FABRICATION = sortie_full_fashion.FABRICATION ;
copyOfsortie_full__tmp.COO = sortie_full_fashion.COO ;
copyOfsortie_full__tmp.CUSTOM_TARIFF_CODE = sortie_full_fashion.CUSTOM_TARIFF_CODE ;
copyOfsortie_full__tmp.UPC = sortie_full_fashion.UPC ;
copyOfsortie_full__tmp.SMU_TYPE = sortie_full_fashion.SMU_TYPE ;
copyOfsortie_full__tmp.LABELD365 = sortie_full_fashion.LABELD365 ;
copyOfsortie_full__tmp.DELIVERYFLOW = sortie_full_fashion.DELIVERYFLOW ;
copyOfsortie_full_ = copyOfsortie_full__tmp;

// # Output table : 'copyOfcopyOfcopyOfsortie_size_0'
copyOfcopyOfcopyOfsortie_size_0_tmp.PRODUCTMASTERNUMBER = sortie_full_fashion.STYLE ;
copyOfcopyOfcopyOfsortie_size_0_tmp.PRODUCTMASTERSTYLEID = sortie_full_fashion.LABELD365 ;
copyOfcopyOfcopyOfsortie_size_0_tmp.LANGUAGEID = "en-US";
copyOfcopyOfcopyOfsortie_size_0_tmp.TRANSLATEDSTYLEDESCRIPTION = sortie_full_fashion.LABELNAMED365 ;
copyOfcopyOfcopyOfsortie_size_0_tmp.TRANSLATEDSTYLENAME = sortie_full_fashion.LABELNAMED365 ;
copyOfcopyOfcopyOfsortie_size_0 = copyOfcopyOfcopyOfsortie_size_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_full_"
if(copyOfsortie_full_ != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_full_");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfsortie_size_0 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_size_0'
copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.ITEMID = copyOfsortie_full_.STYLE ;
copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.SEASONCODE = copyOfsortie_full_.SEASON ;
copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.DROPID = copyOfsortie_full_.DELIVERYFLOW ;
copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.DISPLAYORDER = ".000000";
copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.ISDEFAULT = "Yes";
copyOfcopyOfcopyOfcopyOfsortie_size_0 = copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_size_0"
if(copyOfcopyOfcopyOfcopyOfsortie_size_0 != null) { 



	
	/**
	 * [tUniqRow_7 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfsortie_size_0");
					}
					
row20 = null;			
if(copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID == null){
	finder_tUniqRow_7.ITEMID = null;
}else{
	finder_tUniqRow_7.ITEMID = copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE == null){
	finder_tUniqRow_7.SEASONCODE = null;
}else{
	finder_tUniqRow_7.SEASONCODE = copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE.toLowerCase();
}	
finder_tUniqRow_7.hashCodeDirty = true;
if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
		KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

		
if(copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID == null){
	new_tUniqRow_7.ITEMID = null;
}else{
	new_tUniqRow_7.ITEMID = copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE == null){
	new_tUniqRow_7.SEASONCODE = null;
}else{
	new_tUniqRow_7.SEASONCODE = copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE.toLowerCase();
}
		
		keystUniqRow_7.add(new_tUniqRow_7);if(row20 == null){ 
	
	row20 = new row20Struct();
}row20.ITEMID = copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID;			row20.SEASONCODE = copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE;			row20.DROPID = copyOfcopyOfcopyOfcopyOfsortie_size_0.DROPID;			row20.DISPLAYORDER = copyOfcopyOfcopyOfcopyOfsortie_size_0.DISPLAYORDER;			row20.ISDEFAULT = copyOfcopyOfcopyOfcopyOfsortie_size_0.ISDEFAULT;					
		nb_uniques_tUniqRow_7++;
	} else {
	  nb_duplicates_tUniqRow_7++;
	}

 


	tos_count_tUniqRow_7++;

/**
 * [tUniqRow_7 main ] stop
 */
	
	/**
	 * [tUniqRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					

          row22 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((row20.DROPID == null? false : row20.DROPID.compareTo("") != 0)
                           , "DROPID.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row22 == null){ 
                row22 = new row22Struct();
              }
               row22.ITEMID = row20.ITEMID;
               row22.SEASONCODE = row20.SEASONCODE;
               row22.DROPID = row20.DROPID;
               row22.DISPLAYORDER = row20.DISPLAYORDER;
               row22.ISDEFAULT = row20.ISDEFAULT;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tFileOutputExcel_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					

				xlsxTool_tFileOutputExcel_6.addRow();
									   				
	    				if(row22.ITEMID != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.ITEMID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.SEASONCODE != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.SEASONCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.DROPID != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.DROPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.DISPLAYORDER != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.DISPLAYORDER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.ISDEFAULT != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.ISDEFAULT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_6++;
				
 


	tos_count_tFileOutputExcel_6++;

/**
 * [tFileOutputExcel_6 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 process_data_end ] stop
 */

} // End of branch "row22"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tUniqRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfsortie_size_0"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "copyOfsortie_full_"




// Start of branch "copyOfcopyOfcopyOfsortie_size_0"
if(copyOfcopyOfcopyOfsortie_size_0 != null) { 



	
	/**
	 * [tUniqRow_6 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfsortie_size_0");
					}
					
row17 = null;			
if(copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_6.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_6.PRODUCTMASTERNUMBER = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID == null){
	finder_tUniqRow_6.PRODUCTMASTERSTYLEID = null;
}else{
	finder_tUniqRow_6.PRODUCTMASTERSTYLEID = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID.toLowerCase();
}	
finder_tUniqRow_6.hashCodeDirty = true;
if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
		KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

		
if(copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_6.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_6.PRODUCTMASTERNUMBER = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID == null){
	new_tUniqRow_6.PRODUCTMASTERSTYLEID = null;
}else{
	new_tUniqRow_6.PRODUCTMASTERSTYLEID = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID.toLowerCase();
}
		
		keystUniqRow_6.add(new_tUniqRow_6);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.PRODUCTMASTERNUMBER = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER;			row17.PRODUCTMASTERSTYLEID = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID;			row17.LANGUAGEID = copyOfcopyOfcopyOfsortie_size_0.LANGUAGEID;			row17.TRANSLATEDSTYLEDESCRIPTION = copyOfcopyOfcopyOfsortie_size_0.TRANSLATEDSTYLEDESCRIPTION;			row17.TRANSLATEDSTYLENAME = copyOfcopyOfcopyOfsortie_size_0.TRANSLATEDSTYLENAME;					
		nb_uniques_tUniqRow_6++;
	} else {
	  nb_duplicates_tUniqRow_6++;
	}

 


	tos_count_tUniqRow_6++;

/**
 * [tUniqRow_6 main ] stop
 */
	
	/**
	 * [tUniqRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tFileOutputExcel_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					

				xlsxTool_tFileOutputExcel_5.addRow();
									   				
	    				if(row17.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row17.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row17.PRODUCTMASTERSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row17.PRODUCTMASTERSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row17.LANGUAGEID != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row17.LANGUAGEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row17.TRANSLATEDSTYLEDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row17.TRANSLATEDSTYLEDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row17.TRANSLATEDSTYLENAME != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row17.TRANSLATEDSTYLENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_5++;
				
 


	tos_count_tFileOutputExcel_5++;

/**
 * [tFileOutputExcel_5 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfsortie_size_0"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "sortie_full_fashion"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "sortie_full_"




// Start of branch "copyOfcopyOfsortie_size"
if(copyOfcopyOfsortie_size != null) { 



	
	/**
	 * [tUniqRow_22 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_size");
					}
					
row37 = null;			
if(copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_22.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_22.PRODUCTMASTERNUMBER = copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID == null){
	finder_tUniqRow_22.PRODUCTMASTERSIZEID = null;
}else{
	finder_tUniqRow_22.PRODUCTMASTERSIZEID = copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID.toLowerCase();
}	
finder_tUniqRow_22.hashCodeDirty = true;
if (!keystUniqRow_22.contains(finder_tUniqRow_22)) {
		KeyStruct_tUniqRow_22 new_tUniqRow_22 = new KeyStruct_tUniqRow_22();

		
if(copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_22.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_22.PRODUCTMASTERNUMBER = copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID == null){
	new_tUniqRow_22.PRODUCTMASTERSIZEID = null;
}else{
	new_tUniqRow_22.PRODUCTMASTERSIZEID = copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID.toLowerCase();
}
		
		keystUniqRow_22.add(new_tUniqRow_22);if(row37 == null){ 
	
	row37 = new row37Struct();
}row37.PRODUCTMASTERNUMBER = copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER;			row37.PRODUCTMASTERSIZEID = copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID;			row37.LANGUAGEID = copyOfcopyOfsortie_size.LANGUAGEID;			row37.TRANSLATEDSIZEDESCRIPTION = copyOfcopyOfsortie_size.TRANSLATEDSIZEDESCRIPTION;			row37.TRANSLATEDSIZENAME = copyOfcopyOfsortie_size.TRANSLATEDSIZENAME;					
		nb_uniques_tUniqRow_22++;
	} else {
	  nb_duplicates_tUniqRow_22++;
	}

 


	tos_count_tUniqRow_22++;

/**
 * [tUniqRow_22 main ] stop
 */
	
	/**
	 * [tUniqRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 process_data_begin ] stop
 */
// Start of branch "row37"
if(row37 != null) { 



	
	/**
	 * [tFileOutputExcel_13 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row37");
					}
					

				xlsxTool_tFileOutputExcel_13.addRow();
									   				
	    				if(row37.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_13.addCellValue(String.valueOf(row37.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_13.addCellNullValue();
	    				}
					
									   				
	    				if(row37.PRODUCTMASTERSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_13.addCellValue(String.valueOf(row37.PRODUCTMASTERSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_13.addCellNullValue();
	    				}
					
									   				
	    				if(row37.LANGUAGEID != null) {
    				
							xlsxTool_tFileOutputExcel_13.addCellValue(String.valueOf(row37.LANGUAGEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_13.addCellNullValue();
	    				}
					
									   				
	    				if(row37.TRANSLATEDSIZEDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_13.addCellValue(String.valueOf(row37.TRANSLATEDSIZEDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_13.addCellNullValue();
	    				}
					
									   				
	    				if(row37.TRANSLATEDSIZENAME != null) {
    				
							xlsxTool_tFileOutputExcel_13.addCellValue(String.valueOf(row37.TRANSLATEDSIZENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_13.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_13++;
				
 


	tos_count_tFileOutputExcel_13++;

/**
 * [tFileOutputExcel_13 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	

 



/**
 * [tFileOutputExcel_13 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	

 



/**
 * [tFileOutputExcel_13 process_data_end ] stop
 */

} // End of branch "row37"




	
	/**
	 * [tUniqRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_size"




	
	/**
	 * [tMap_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_end ] stop
 */

} // End of branch "sortie_full_COO"




// Start of branch "copyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_4 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfsortie_product");
					}
					
row23 = null;			
if(copyOfcopyOfcopyOfsortie_product.ITEMID == null){
	finder_tUniqRow_4.ITEMID = null;
}else{
	finder_tUniqRow_4.ITEMID = copyOfcopyOfcopyOfsortie_product.ITEMID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.INVENTSIZEID == null){
	finder_tUniqRow_4.INVENTSIZEID = null;
}else{
	finder_tUniqRow_4.INVENTSIZEID = copyOfcopyOfcopyOfsortie_product.INVENTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.INVENTSTYLEID == null){
	finder_tUniqRow_4.INVENTSTYLEID = null;
}else{
	finder_tUniqRow_4.INVENTSTYLEID = copyOfcopyOfcopyOfsortie_product.INVENTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.INVENTCOLORID == null){
	finder_tUniqRow_4.INVENTCOLORID = null;
}else{
	finder_tUniqRow_4.INVENTCOLORID = copyOfcopyOfcopyOfsortie_product.INVENTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ORIGCOUNTRYREGIONID == null){
	finder_tUniqRow_4.ORIGCOUNTRYREGIONID = null;
}else{
	finder_tUniqRow_4.ORIGCOUNTRYREGIONID = copyOfcopyOfcopyOfsortie_product.ORIGCOUNTRYREGIONID.toLowerCase();
}	
finder_tUniqRow_4.hashCodeDirty = true;
if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
		KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

		
if(copyOfcopyOfcopyOfsortie_product.ITEMID == null){
	new_tUniqRow_4.ITEMID = null;
}else{
	new_tUniqRow_4.ITEMID = copyOfcopyOfcopyOfsortie_product.ITEMID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.INVENTSIZEID == null){
	new_tUniqRow_4.INVENTSIZEID = null;
}else{
	new_tUniqRow_4.INVENTSIZEID = copyOfcopyOfcopyOfsortie_product.INVENTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.INVENTSTYLEID == null){
	new_tUniqRow_4.INVENTSTYLEID = null;
}else{
	new_tUniqRow_4.INVENTSTYLEID = copyOfcopyOfcopyOfsortie_product.INVENTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.INVENTCOLORID == null){
	new_tUniqRow_4.INVENTCOLORID = null;
}else{
	new_tUniqRow_4.INVENTCOLORID = copyOfcopyOfcopyOfsortie_product.INVENTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ORIGCOUNTRYREGIONID == null){
	new_tUniqRow_4.ORIGCOUNTRYREGIONID = null;
}else{
	new_tUniqRow_4.ORIGCOUNTRYREGIONID = copyOfcopyOfcopyOfsortie_product.ORIGCOUNTRYREGIONID.toLowerCase();
}
		
		keystUniqRow_4.add(new_tUniqRow_4);if(row23 == null){ 
	
	row23 = new row23Struct();
}row23.ITEMID = copyOfcopyOfcopyOfsortie_product.ITEMID;			row23.INVENTSIZEID = copyOfcopyOfcopyOfsortie_product.INVENTSIZEID;			row23.INVENTSTYLEID = copyOfcopyOfcopyOfsortie_product.INVENTSTYLEID;			row23.INVENTCOLORID = copyOfcopyOfcopyOfsortie_product.INVENTCOLORID;			row23.ORIGCOUNTRYREGIONID = copyOfcopyOfcopyOfsortie_product.ORIGCOUNTRYREGIONID;			row23.ORIGSTATEID = copyOfcopyOfcopyOfsortie_product.ORIGSTATEID;			row23.TODATE = copyOfcopyOfcopyOfsortie_product.TODATE;			row23.FROMDATE = copyOfcopyOfcopyOfsortie_product.FROMDATE;					
		nb_uniques_tUniqRow_4++;
	} else {
	  nb_duplicates_tUniqRow_4++;
	}

 


	tos_count_tUniqRow_4++;

/**
 * [tUniqRow_4 main ] stop
 */
	
	/**
	 * [tUniqRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					

          row36 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((row23.ORIGCOUNTRYREGIONID == null? false : row23.ORIGCOUNTRYREGIONID.compareTo("") != 0)
                           , "ORIGCOUNTRYREGIONID.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row36 == null){ 
                row36 = new row36Struct();
              }
               row36.ITEMID = row23.ITEMID;
               row36.INVENTSIZEID = row23.INVENTSIZEID;
               row36.INVENTSTYLEID = row23.INVENTSTYLEID;
               row36.INVENTCOLORID = row23.INVENTCOLORID;
               row36.ORIGCOUNTRYREGIONID = row23.ORIGCOUNTRYREGIONID;
               row36.ORIGSTATEID = row23.ORIGSTATEID;
               row36.TODATE = row23.TODATE;
               row36.FROMDATE = row23.FROMDATE;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row36"
if(row36 != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(row36.ITEMID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row36.ITEMID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row36.INVENTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row36.INVENTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row36.INVENTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row36.INVENTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row36.INVENTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row36.INVENTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row36.ORIGCOUNTRYREGIONID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row36.ORIGCOUNTRYREGIONID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row36.ORIGSTATEID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row36.ORIGSTATEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row36.TODATE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row36.TODATE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row36.FROMDATE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row36.FROMDATE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "row36"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tUniqRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfsortie_product"
if(copyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_product");
					}
					
row10 = null;			
if(copyOfcopyOfsortie_product.ITEMID == null){
	finder_tUniqRow_3.ITEMID = null;
}else{
	finder_tUniqRow_3.ITEMID = copyOfcopyOfsortie_product.ITEMID.toLowerCase();
}
if(copyOfcopyOfsortie_product.SEASONCODE == null){
	finder_tUniqRow_3.SEASONCODE = null;
}else{
	finder_tUniqRow_3.SEASONCODE = copyOfcopyOfsortie_product.SEASONCODE.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(copyOfcopyOfsortie_product.ITEMID == null){
	new_tUniqRow_3.ITEMID = null;
}else{
	new_tUniqRow_3.ITEMID = copyOfcopyOfsortie_product.ITEMID.toLowerCase();
}
if(copyOfcopyOfsortie_product.SEASONCODE == null){
	new_tUniqRow_3.SEASONCODE = null;
}else{
	new_tUniqRow_3.SEASONCODE = copyOfcopyOfsortie_product.SEASONCODE.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMID = copyOfcopyOfsortie_product.ITEMID;			row10.SEASONCODE = copyOfcopyOfsortie_product.SEASONCODE;			row10.ISDEFAULT = copyOfcopyOfsortie_product.ISDEFAULT;			row10.NOOS = copyOfcopyOfsortie_product.NOOS;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(row10.ITEMID != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row10.ITEMID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row10.SEASONCODE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row10.SEASONCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row10.ISDEFAULT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row10.ISDEFAULT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row10.NOOS != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row10.NOOS));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_product"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "copyOfsortie_full_2"




// Start of branch "copyOfsortie_product"
if(copyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_product");
					}
					
row5 = null;			
if(copyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_2.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_2.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(copyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_2.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_2.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row5 == null){ 
	
	row5 = new row5Struct();
}row5.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER;			row5.PRODUCTCATEGORYNAME = copyOfsortie_product.PRODUCTCATEGORYNAME;			row5.PRODUCTCATEGORYHIERARCHYNAME = copyOfsortie_product.PRODUCTCATEGORYHIERARCHYNAME;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					



    
		row5Struct oneRow_tHashOutput_2 = new row5Struct();
				
					oneRow_tHashOutput_2.PRODUCTNUMBER = row5.PRODUCTNUMBER;
					oneRow_tHashOutput_2.PRODUCTCATEGORYNAME = row5.PRODUCTCATEGORYNAME;
					oneRow_tHashOutput_2.PRODUCTCATEGORYHIERARCHYNAME = row5.PRODUCTCATEGORYHIERARCHYNAME;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;
 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "copyOfsortie_product"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "sortie_full_cat"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_Excel"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "sortie"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "sortie_Excel1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_Excel1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_copyOfcopyOfsortie_fashion != null) {
						tHash_Lookup_copyOfcopyOfsortie_fashion.endGet();
					}
					globalMap.remove( "tHash_Lookup_copyOfcopyOfsortie_fashion" );

					
					
				
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_Excel");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_cat");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_full_2");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_23 end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_COO");
			  	}
			  	
 

ok_Hash.put("tMap_23", true);
end_Hash.put("tMap_23", System.currentTimeMillis());




/**
 * [tMap_23 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_fashion");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_full_");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tUniqRow_7 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

globalMap.put("tUniqRow_7_NB_UNIQUES",nb_uniques_tUniqRow_7);
globalMap.put("tUniqRow_7_NB_DUPLICATES",nb_duplicates_tUniqRow_7);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfsortie_size_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_7", true);
end_Hash.put("tUniqRow_7", System.currentTimeMillis());




/**
 * [tUniqRow_7 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

	
	
	
			xlsxTool_tFileOutputExcel_6.writeExcel(fileName_tFileOutputExcel_6,true);
	
		
			nb_line_tFileOutputExcel_6 = nb_line_tFileOutputExcel_6 -1;
		
		globalMap.put("tFileOutputExcel_6_NB_LINE",nb_line_tFileOutputExcel_6);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_6", true);
end_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());




/**
 * [tFileOutputExcel_6 end ] stop
 */













	
	/**
	 * [tUniqRow_6 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

globalMap.put("tUniqRow_6_NB_UNIQUES",nb_uniques_tUniqRow_6);
globalMap.put("tUniqRow_6_NB_DUPLICATES",nb_duplicates_tUniqRow_6);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfsortie_size_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_6", true);
end_Hash.put("tUniqRow_6", System.currentTimeMillis());




/**
 * [tUniqRow_6 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

	
	
	
			xlsxTool_tFileOutputExcel_5.writeExcel(fileName_tFileOutputExcel_5,true);
	
		
			nb_line_tFileOutputExcel_5 = nb_line_tFileOutputExcel_5 -1;
		
		globalMap.put("tFileOutputExcel_5_NB_LINE",nb_line_tFileOutputExcel_5);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_5", true);
end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());




/**
 * [tFileOutputExcel_5 end ] stop
 */













	
	/**
	 * [tUniqRow_22 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

globalMap.put("tUniqRow_22_NB_UNIQUES",nb_uniques_tUniqRow_22);
globalMap.put("tUniqRow_22_NB_DUPLICATES",nb_duplicates_tUniqRow_22);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_size");
			  	}
			  	
 

ok_Hash.put("tUniqRow_22", true);
end_Hash.put("tUniqRow_22", System.currentTimeMillis());




/**
 * [tUniqRow_22 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_13 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	

	
	
	
			xlsxTool_tFileOutputExcel_13.writeExcel(fileName_tFileOutputExcel_13,true);
	
		
			nb_line_tFileOutputExcel_13 = nb_line_tFileOutputExcel_13 -1;
		
		globalMap.put("tFileOutputExcel_13_NB_LINE",nb_line_tFileOutputExcel_13);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_13", true);
end_Hash.put("tFileOutputExcel_13", System.currentTimeMillis());




/**
 * [tFileOutputExcel_13 end ] stop
 */










	
	/**
	 * [tUniqRow_4 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

globalMap.put("tUniqRow_4_NB_UNIQUES",nb_uniques_tUniqRow_4);
globalMap.put("tUniqRow_4_NB_DUPLICATES",nb_duplicates_tUniqRow_4);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_4", true);
end_Hash.put("tUniqRow_4", System.currentTimeMillis());




/**
 * [tUniqRow_4 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */













	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */










	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



























				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_copyOfcopyOfsortie_fashion"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_23 finally ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tUniqRow_7 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 finally ] stop
 */













	
	/**
	 * [tUniqRow_6 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 finally ] stop
 */













	
	/**
	 * [tUniqRow_22 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_13 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	

 



/**
 * [tFileOutputExcel_13 finally ] stop
 */










	
	/**
	 * [tUniqRow_4 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */













	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */










	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 finally ] stop
 */



























				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("fieldMap", new HashMap<String, String>());
globalMap.put("dateError",  TalendDate.formatDate("yyyy-MM-ddHHmmss", new Date()) );

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfsortie_fashionStruct implements routines.system.IPersistableComparableLookupRow<copyOfcopyOfsortie_fashionStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CODE;

				public String getCODE () {
					return this.CODE;
				}
				
			    public String LABEL;

				public String getLABEL () {
					return this.LABEL;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODE == null) ? 0 : this.CODE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfsortie_fashionStruct other = (copyOfcopyOfsortie_fashionStruct) obj;
		
						if (this.CODE == null) {
							if (other.CODE != null)
								return false;
						
						} else if (!this.CODE.equals(other.CODE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfsortie_fashionStruct other) {

		other.CODE = this.CODE;
	            other.LABEL = this.LABEL;
	            other.NAME = this.NAME;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfsortie_fashionStruct other) {

		other.CODE = this.CODE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.CODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.LABEL = readString(dis,ois);
					
						this.NAME = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.LABEL, dos, oos);
					
						writeString(this.NAME, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODE="+CODE);
		sb.append(",LABEL="+LABEL);
		sb.append(",NAME="+NAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_fashionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODE, other.CODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String Label_Code;

				public String getLabel_Code () {
					return this.Label_Code;
				}
				
			    public String Label_D365;

				public String getLabel_D365 () {
					return this.Label_D365;
				}
				
			    public String Label_Name;

				public String getLabel_Name () {
					return this.Label_Name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.Label_Code = readString(dis);
					
					this.Label_D365 = readString(dis);
					
					this.Label_Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Label_Code,dos);
					
					// String
				
						writeString(this.Label_D365,dos);
					
					// String
				
						writeString(this.Label_Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Label_Code="+Label_Code);
		sb.append(",Label_D365="+Label_D365);
		sb.append(",Label_Name="+Label_Name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();
copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion = new copyOfcopyOfsortie_fashionStruct();





	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", false);
		start_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_fashion");
					}
				
		int tos_count_tAdvancedHash_copyOfcopyOfsortie_fashion = 0;
		

			   		// connection name:copyOfcopyOfsortie_fashion
			   		// source node:tMap_8 - inputs:(row24) outputs:(copyOfcopyOfsortie_fashion,copyOfcopyOfsortie_fashion) | target node:tAdvancedHash_copyOfcopyOfsortie_fashion - inputs:(copyOfcopyOfsortie_fashion) outputs:()
			   		// linked node: tMap_7 - inputs:(sortie,copyOfcopyOfsortie_fashion,row18,row19) outputs:(sortie_Excel)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_copyOfcopyOfsortie_fashion = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct> tHash_Lookup_copyOfcopyOfsortie_fashion =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<copyOfcopyOfsortie_fashionStruct>getLookup(matchingModeEnum_copyOfcopyOfsortie_fashion);
	   						   
		   	   	   globalMap.put("tHash_Lookup_copyOfcopyOfsortie_fashion", tHash_Lookup_copyOfcopyOfsortie_fashion);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion_tmp = new copyOfcopyOfsortie_fashionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[Doy79DrhuVqsCRFB1jz9nh8DHImBrQXbMUkNaGR/Y9M4aVSTqbYbUg==]");
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = "1433";
		    String dbname_tDBInput_1 = "etl_uat" ;		    
		    String url_tDBInput_1 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_1)) {		    
		    	url_tDBInput_1 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_1 = "";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select LABELCODE as [Label Code], LABELD365 as [Label D365],LabelName as [Label Name] from  data.D365_Labels\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row24.Label_Code = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row24.Label_Code = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row24.Label_Code = tmpContent_tDBInput_1;
                }
            } else {
                row24.Label_Code = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row24.Label_D365 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row24.Label_D365 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row24.Label_D365 = tmpContent_tDBInput_1;
                }
            } else {
                row24.Label_D365 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row24.Label_Name = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row24.Label_Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row24.Label_Name = tmpContent_tDBInput_1;
                }
            } else {
                row24.Label_Name = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row24");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfsortie_fashion = null;


// # Output table : 'copyOfcopyOfsortie_fashion'
copyOfcopyOfsortie_fashion_tmp.CODE = StringHandling.DOWNCASE(row24.Label_Code) ;
copyOfcopyOfsortie_fashion_tmp.LABEL = row24.Label_D365 ;
copyOfcopyOfsortie_fashion_tmp.NAME = row24.Label_Name ;
copyOfcopyOfsortie_fashion = copyOfcopyOfsortie_fashion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfsortie_fashion"
if(copyOfcopyOfsortie_fashion != null) { 



	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_fashion");
					}
					


			   
			   

					copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion_HashRow = new copyOfcopyOfsortie_fashionStruct();
		   	   	   
				
				copyOfcopyOfsortie_fashion_HashRow.CODE = copyOfcopyOfsortie_fashion.CODE;
				
				copyOfcopyOfsortie_fashion_HashRow.LABEL = copyOfcopyOfsortie_fashion.LABEL;
				
				copyOfcopyOfsortie_fashion_HashRow.NAME = copyOfcopyOfsortie_fashion.NAME;
				
			tHash_Lookup_copyOfcopyOfsortie_fashion.put(copyOfcopyOfsortie_fashion_HashRow);
			
            




 


	tos_count_tAdvancedHash_copyOfcopyOfsortie_fashion++;

/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion main ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_fashion"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

tHash_Lookup_copyOfcopyOfsortie_fashion.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_fashion");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", true);
end_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", System.currentTimeMillis());




/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String NAME2;

				public String getNAME2 () {
					return this.NAME2;
				}
				
			    public String NAME3;

				public String getNAME3 () {
					return this.NAME3;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NAME3 == null) ? 0 : this.NAME3.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.NAME3 == null) {
							if (other.NAME3 != null)
								return false;
						
						} else if (!this.NAME3.equals(other.NAME3))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.NAME = this.NAME;
	            other.NAME2 = this.NAME2;
	            other.NAME3 = this.NAME3;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.NAME3 = this.NAME3;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.NAME3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NAME3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NAME = readString(dis,ois);
					
						this.NAME2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NAME, dos, oos);
					
						writeString(this.NAME2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NAME="+NAME);
		sb.append(",NAME2="+NAME2);
		sb.append(",NAME3="+NAME3);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NAME3, other.NAME3);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAdvancedHash_row18 = 0;
		

			   		// connection name:row18
			   		// source node:tDBInput_2 - inputs:(after_tFileInputExcel_2) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_7 - inputs:(sortie,copyOfcopyOfsortie_fashion,row18,row19) outputs:(sortie_Excel)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[A1eLH4w7meVL7w3mJCxkCZo91g4pY8JlySGdpmZ59UvNGwRN6Yv8ww==]");
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = "1433";
		    String dbname_tDBInput_2 = "etl_uat" ;		    
		    String url_tDBInput_2 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_2)) {		    
		    	url_tDBInput_2 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_2 = "";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nselect CATEGORYNAME AS NAME, PRODUCTCATEGORYHIERARCHYNAME as NAME2, FRIENDLYCATEGORYNAME  as NAME3,LEFT(CATEGORYNAME,"
+"2) as CATEGORYCODE \nfrom  data.D365_ProductCategories\nwhere PARENTPRODUCTCATEGORYHIERARCHYNAME = 'Product Family Hiera"
+"rchy'\nand PARENTPRODUCTCATEGORYNAME = 'Product Family Hierarchy'\n\n";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row18.NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row18.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row18.NAME = tmpContent_tDBInput_2;
                }
            } else {
                row18.NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row18.NAME2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row18.NAME2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row18.NAME2 = tmpContent_tDBInput_2;
                }
            } else {
                row18.NAME2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row18.NAME3 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row18.NAME3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row18.NAME3 = tmpContent_tDBInput_2;
                }
            } else {
                row18.NAME3 = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.NAME = row18.NAME;
				
				row18_HashRow.NAME2 = row18.NAME2;
				
				row18_HashRow.NAME3 = row18.NAME3;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

tHash_Lookup_row18.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String NAME2;

				public String getNAME2 () {
					return this.NAME2;
				}
				
			    public String NAME3;

				public String getNAME3 () {
					return this.NAME3;
				}
				
			    public String PARENTCODE;

				public String getPARENTCODE () {
					return this.PARENTCODE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NAME3 == null) ? 0 : this.NAME3.hashCode());
					
						result = prime * result + ((this.PARENTCODE == null) ? 0 : this.PARENTCODE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.NAME3 == null) {
							if (other.NAME3 != null)
								return false;
						
						} else if (!this.NAME3.equals(other.NAME3))
						
							return false;
					
						if (this.PARENTCODE == null) {
							if (other.PARENTCODE != null)
								return false;
						
						} else if (!this.PARENTCODE.equals(other.PARENTCODE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.NAME = this.NAME;
	            other.NAME2 = this.NAME2;
	            other.NAME3 = this.NAME3;
	            other.PARENTCODE = this.PARENTCODE;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.NAME3 = this.NAME3;
	            	other.PARENTCODE = this.PARENTCODE;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.NAME3 = readString(dis);
					
					this.PARENTCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NAME3,dos);
					
					// String
				
						writeString(this.PARENTCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NAME = readString(dis,ois);
					
						this.NAME2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NAME, dos, oos);
					
						writeString(this.NAME2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NAME="+NAME);
		sb.append(",NAME2="+NAME2);
		sb.append(",NAME3="+NAME3);
		sb.append(",PARENTCODE="+PARENTCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NAME3, other.NAME3);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PARENTCODE, other.PARENTCODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tDBInput_3 - inputs:(after_tFileInputExcel_2) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_7 - inputs:(sortie,copyOfcopyOfsortie_fashion,row18,row19) outputs:(sortie_Excel)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[y3X0TuXnZg+6epvL8Sn5RxmDZezqsLsBAO8lN1tJs4f5NYm9wLtbnA==]");
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		    String port_tDBInput_3 = "1433";
		    String dbname_tDBInput_3 = "etl_uat" ;		    
		    String url_tDBInput_3 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_3)) {
		    	url_tDBInput_3 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_3)) {		    
		    	url_tDBInput_3 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_3 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_3 = "";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\n\n\nselect CATEGORYNAME AS NAME, PRODUCTCATEGORYHIERARCHYNAME as NAME2,FRIENDLYCATEGORYNAME as NAME3, LEFT(PARENTPROD"
+"UCTCATEGORYNAME,2) as PARENTCODE from  data.D365_ProductCategories\nwhere PARENTPRODUCTCATEGORYHIERARCHYNAME = 'Product "
+"Family Hierarchy'\nand PARENTPRODUCTCATEGORYNAME != 'Product Family Hierarchy'\n\n\n";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row19.NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row19.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row19.NAME = tmpContent_tDBInput_3;
                }
            } else {
                row19.NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row19.NAME2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row19.NAME2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row19.NAME2 = tmpContent_tDBInput_3;
                }
            } else {
                row19.NAME2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row19.NAME3 = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row19.NAME3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row19.NAME3 = tmpContent_tDBInput_3;
                }
            } else {
                row19.NAME3 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row19.PARENTCODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row19.PARENTCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row19.PARENTCODE = tmpContent_tDBInput_3;
                }
            } else {
                row19.PARENTCODE = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.NAME = row19.NAME;
				
				row19_HashRow.NAME2 = row19.NAME2;
				
				row19_HashRow.NAME3 = row19.NAME3;
				
				row19_HashRow.PARENTCODE = row19.PARENTCODE;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

tHash_Lookup_row19.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String NAME2;

				public String getNAME2 () {
					return this.NAME2;
				}
				
			    public String NAME3;

				public String getNAME3 () {
					return this.NAME3;
				}
				
			    public String CATEGORYCODE;

				public String getCATEGORYCODE () {
					return this.CATEGORYCODE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NAME3 == null) ? 0 : this.NAME3.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.NAME3 == null) {
							if (other.NAME3 != null)
								return false;
						
						} else if (!this.NAME3.equals(other.NAME3))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.NAME = this.NAME;
	            other.NAME2 = this.NAME2;
	            other.NAME3 = this.NAME3;
	            other.CATEGORYCODE = this.CATEGORYCODE;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.NAME3 = this.NAME3;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.NAME3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NAME3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NAME = readString(dis,ois);
					
						this.NAME2 = readString(dis,ois);
					
						this.CATEGORYCODE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NAME, dos, oos);
					
						writeString(this.NAME2, dos, oos);
					
						writeString(this.CATEGORYCODE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NAME="+NAME);
		sb.append(",NAME2="+NAME2);
		sb.append(",NAME3="+NAME3);
		sb.append(",CATEGORYCODE="+CATEGORYCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NAME3, other.NAME3);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tAdvancedHash_row25 = 0;
		

			   		// connection name:row25
			   		// source node:tDBInput_4 - inputs:(after_tFileInputExcel_2) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_12 - inputs:(row7,row25) outputs:(sortie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
					String dbUser_tDBInput_4 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[FdqlW58BRU3AUCMtZ6d+Q62MuZYa4mC4Z0l3FZrn0VczCwAjt5RKMw==]");
					
					String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
		    String port_tDBInput_4 = "1433";
		    String dbname_tDBInput_4 = "etl_uat" ;		    
		    String url_tDBInput_4 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_4)) {
		    	url_tDBInput_4 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_4)) {		    
		    	url_tDBInput_4 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_4 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_4 = "";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\nselect CATEGORYNAME AS NAME, PRODUCTCATEGORYHIERARCHYNAME as NAME2,FRIENDLYCATEGORYNAME  as NAME3,LEFT(CATEGORYNAME,2"
+") as CATEGORYCODE \nfrom  data.D365_ProductCategories\nwhere PARENTPRODUCTCATEGORYHIERARCHYNAME = 'Product Family Hierar"
+"chy'\nand PARENTPRODUCTCATEGORYNAME = 'Product Family Hierarchy'\n\n";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row25.NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row25.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row25.NAME = tmpContent_tDBInput_4;
                }
            } else {
                row25.NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row25.NAME2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row25.NAME2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row25.NAME2 = tmpContent_tDBInput_4;
                }
            } else {
                row25.NAME2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row25.NAME3 = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row25.NAME3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row25.NAME3 = tmpContent_tDBInput_4;
                }
            } else {
                row25.NAME3 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row25.CATEGORYCODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row25.CATEGORYCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row25.CATEGORYCODE = tmpContent_tDBInput_4;
                }
            } else {
                row25.CATEGORYCODE = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.NAME = row25.NAME;
				
				row25_HashRow.NAME2 = row25.NAME2;
				
				row25_HashRow.NAME3 = row25.NAME3;
				
				row25_HashRow.CATEGORYCODE = row25.CATEGORYCODE;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

tHash_Lookup_row25.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());




/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String PRODUCTCATEGORYNAME;

				public String getPRODUCTCATEGORYNAME () {
					return this.PRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTCATEGORYHIERARCHYNAME;

				public String getPRODUCTCATEGORYHIERARCHYNAME () {
					return this.PRODUCTCATEGORYHIERARCHYNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.PRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYHIERARCHYNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",PRODUCTCATEGORYNAME="+PRODUCTCATEGORYNAME);
		sb.append(",PRODUCTCATEGORYHIERARCHYNAME="+PRODUCTCATEGORYHIERARCHYNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String PRODUCTCATEGORYNAME;

				public String getPRODUCTCATEGORYNAME () {
					return this.PRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTCATEGORYHIERARCHYNAME;

				public String getPRODUCTCATEGORYHIERARCHYNAME () {
					return this.PRODUCTCATEGORYHIERARCHYNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.PRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYHIERARCHYNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",PRODUCTCATEGORYNAME="+PRODUCTCATEGORYNAME);
		sb.append(",PRODUCTCATEGORYHIERARCHYNAME="+PRODUCTCATEGORYHIERARCHYNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String PRODUCTCATEGORYNAME;

				public String getPRODUCTCATEGORYNAME () {
					return this.PRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTCATEGORYHIERARCHYNAME;

				public String getPRODUCTCATEGORYHIERARCHYNAME () {
					return this.PRODUCTCATEGORYHIERARCHYNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.PRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTCATEGORYHIERARCHYNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",PRODUCTCATEGORYNAME="+PRODUCTCATEGORYNAME);
		sb.append(",PRODUCTCATEGORYHIERARCHYNAME="+PRODUCTCATEGORYHIERARCHYNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();

			row9Struct row9 = new row9Struct();
row13Struct row13 = new row13Struct();





	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		int columnIndex_tFileOutputExcel_3 = 0;
		
		String fileName_tFileOutputExcel_3=context.ExtractPathOTHER + "Product category assignments.xlsx";
		int nb_line_tFileOutputExcel_3 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_3.setSheet("Product category assignments");
		xlsxTool_tFileOutputExcel_3.setAppend(false,true);
		xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_3.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_3 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_3 = chm_tFileOutputExcel_3.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_3", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_3) {
			
				xlsxTool_tFileOutputExcel_3.prepareXlsxFile(fileName_tFileOutputExcel_3);
			
		}
		
		xlsxTool_tFileOutputExcel_3.setFont("");
		
		if (xlsxTool_tFileOutputExcel_3.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_3.addRow();
		
		xlsxTool_tFileOutputExcel_3.addCellValue("PRODUCTNUMBER");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("PRODUCTCATEGORYNAME");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("PRODUCTCATEGORYHIERARCHYNAME");
		
		nb_line_tFileOutputExcel_3++; 
		
	}
		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_19", false);
		start_Hash.put("tUniqRow_19", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tUniqRow_19 = 0;
		

	
		class KeyStruct_tUniqRow_19 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String PRODUCTCATEGORYNAME;
					String PRODUCTCATEGORYHIERARCHYNAME;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCATEGORYNAME == null) ? 0 : this.PRODUCTCATEGORYNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTCATEGORYHIERARCHYNAME == null) ? 0 : this.PRODUCTCATEGORYHIERARCHYNAME.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_19 other = (KeyStruct_tUniqRow_19) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.PRODUCTCATEGORYNAME == null) {
										if (other.PRODUCTCATEGORYNAME != null) 
											return false;
								
									} else if (!this.PRODUCTCATEGORYNAME.equals(other.PRODUCTCATEGORYNAME))
								 
										return false;
								
									if (this.PRODUCTCATEGORYHIERARCHYNAME == null) {
										if (other.PRODUCTCATEGORYHIERARCHYNAME != null) 
											return false;
								
									} else if (!this.PRODUCTCATEGORYHIERARCHYNAME.equals(other.PRODUCTCATEGORYHIERARCHYNAME))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_19 = 0;
int nb_duplicates_tUniqRow_19 = 0;
KeyStruct_tUniqRow_19 finder_tUniqRow_19 = new KeyStruct_tUniqRow_19();
java.util.Set<KeyStruct_tUniqRow_19> keystUniqRow_19 = new java.util.HashSet<KeyStruct_tUniqRow_19>(); 

 



/**
 * [tUniqRow_19 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_1_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row5Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row12.PRODUCTNUMBER = next_tHashInput_2.PRODUCTNUMBER;
	row12.PRODUCTCATEGORYNAME = next_tHashInput_2.PRODUCTCATEGORYNAME;
	row12.PRODUCTCATEGORYHIERARCHYNAME = next_tHashInput_2.PRODUCTCATEGORYHIERARCHYNAME;
 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row12");
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.PRODUCTNUMBER = row12.PRODUCTNUMBER;								
			row9.PRODUCTCATEGORYNAME = row12.PRODUCTCATEGORYNAME;								
			row9.PRODUCTCATEGORYHIERARCHYNAME = row12.PRODUCTCATEGORYHIERARCHYNAME;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					
row13 = null;			
if(row9.PRODUCTNUMBER == null){
	finder_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.PRODUCTCATEGORYNAME == null){
	finder_tUniqRow_19.PRODUCTCATEGORYNAME = null;
}else{
	finder_tUniqRow_19.PRODUCTCATEGORYNAME = row9.PRODUCTCATEGORYNAME.toLowerCase();
}
if(row9.PRODUCTCATEGORYHIERARCHYNAME == null){
	finder_tUniqRow_19.PRODUCTCATEGORYHIERARCHYNAME = null;
}else{
	finder_tUniqRow_19.PRODUCTCATEGORYHIERARCHYNAME = row9.PRODUCTCATEGORYHIERARCHYNAME.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(row9.PRODUCTNUMBER == null){
	new_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.PRODUCTCATEGORYNAME == null){
	new_tUniqRow_19.PRODUCTCATEGORYNAME = null;
}else{
	new_tUniqRow_19.PRODUCTCATEGORYNAME = row9.PRODUCTCATEGORYNAME.toLowerCase();
}
if(row9.PRODUCTCATEGORYHIERARCHYNAME == null){
	new_tUniqRow_19.PRODUCTCATEGORYHIERARCHYNAME = null;
}else{
	new_tUniqRow_19.PRODUCTCATEGORYHIERARCHYNAME = row9.PRODUCTCATEGORYHIERARCHYNAME.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.PRODUCTNUMBER = row9.PRODUCTNUMBER;			row13.PRODUCTCATEGORYNAME = row9.PRODUCTCATEGORYNAME;			row13.PRODUCTCATEGORYHIERARCHYNAME = row9.PRODUCTCATEGORYHIERARCHYNAME;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.PRODUCTCATEGORYNAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTCATEGORYNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.PRODUCTCATEGORYHIERARCHYNAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTCATEGORYHIERARCHYNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_1_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tUniqRow_19 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

globalMap.put("tUniqRow_19_NB_UNIQUES",nb_uniques_tUniqRow_19);
globalMap.put("tUniqRow_19_NB_DUPLICATES",nb_duplicates_tUniqRow_19);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tUniqRow_19", true);
end_Hash.put("tUniqRow_19", System.currentTimeMillis());




/**
 * [tUniqRow_19 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

	
	
	
			xlsxTool_tFileOutputExcel_3.writeExcel(fileName_tFileOutputExcel_3,true);
	
		
			nb_line_tFileOutputExcel_3 = nb_line_tFileOutputExcel_3 -1;
		
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());




/**
 * [tFileOutputExcel_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_19 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tHashOutput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashOutput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";

	
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
        int nb_line_tHashOutput_7 = 0;
 



/**
 * [tHashOutput_7 begin ] stop
 */
	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	




 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	

 



/**
 * [tHashOutput_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashOutput_7_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final EXTRACT_FOR_DYNAMICS_1 EXTRACT_FOR_DYNAMICS_1Class = new EXTRACT_FOR_DYNAMICS_1();

        int exitCode = EXTRACT_FOR_DYNAMICS_1Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = EXTRACT_FOR_DYNAMICS_1.class.getClassLoader().getResourceAsStream("dev/extract_for_dynamics_1_0_11/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = EXTRACT_FOR_DYNAMICS_1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ErrorHeader", "id_String");
                            context.ErrorHeader=(String) context.getProperty("ErrorHeader");
                        context.setContextType("hasErrorHeader", "id_Boolean");
                            try{
                                context.hasErrorHeader=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("hasErrorHeader"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "hasErrorHeader", e.getMessage()));
                                context.hasErrorHeader=null;
                            }
                        context.setContextType("dateValidation", "id_String");
                            context.dateValidation=(String) context.getProperty("dateValidation");
                        context.setContextType("timeValidation", "id_String");
                            context.timeValidation=(String) context.getProperty("timeValidation");
                        context.setContextType("ReferentielPath", "id_String");
                            context.ReferentielPath=(String) context.getProperty("ReferentielPath");
                        context.setContextType("IntegrationExcelPath", "id_String");
                            context.IntegrationExcelPath=(String) context.getProperty("IntegrationExcelPath");
                        context.setContextType("ExcelFileName", "id_String");
                            context.ExcelFileName=(String) context.getProperty("ExcelFileName");
                        context.setContextType("LogPath", "id_String");
                            context.LogPath=(String) context.getProperty("LogPath");
                        context.setContextType("isNike", "id_Boolean");
                            try{
                                context.isNike=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("isNike"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "isNike", e.getMessage()));
                                context.isNike=null;
                            }
                        context.setContextType("ExtractPath", "id_String");
                            context.ExtractPath=(String) context.getProperty("ExtractPath");
                        context.setContextType("ExtractPathHBE", "id_String");
                            context.ExtractPathHBE=(String) context.getProperty("ExtractPathHBE");
                        context.setContextType("ExtractPathOTHER", "id_String");
                            context.ExtractPathOTHER=(String) context.getProperty("ExtractPathOTHER");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ErrorHeader")) {
                context.ErrorHeader = (String) parentContextMap.get("ErrorHeader");
            }if (parentContextMap.containsKey("hasErrorHeader")) {
                context.hasErrorHeader = (Boolean) parentContextMap.get("hasErrorHeader");
            }if (parentContextMap.containsKey("dateValidation")) {
                context.dateValidation = (String) parentContextMap.get("dateValidation");
            }if (parentContextMap.containsKey("timeValidation")) {
                context.timeValidation = (String) parentContextMap.get("timeValidation");
            }if (parentContextMap.containsKey("ReferentielPath")) {
                context.ReferentielPath = (String) parentContextMap.get("ReferentielPath");
            }if (parentContextMap.containsKey("IntegrationExcelPath")) {
                context.IntegrationExcelPath = (String) parentContextMap.get("IntegrationExcelPath");
            }if (parentContextMap.containsKey("ExcelFileName")) {
                context.ExcelFileName = (String) parentContextMap.get("ExcelFileName");
            }if (parentContextMap.containsKey("LogPath")) {
                context.LogPath = (String) parentContextMap.get("LogPath");
            }if (parentContextMap.containsKey("isNike")) {
                context.isNike = (Boolean) parentContextMap.get("isNike");
            }if (parentContextMap.containsKey("ExtractPath")) {
                context.ExtractPath = (String) parentContextMap.get("ExtractPath");
            }if (parentContextMap.containsKey("ExtractPathHBE")) {
                context.ExtractPathHBE = (String) parentContextMap.get("ExtractPathHBE");
            }if (parentContextMap.containsKey("ExtractPathOTHER")) {
                context.ExtractPathOTHER = (String) parentContextMap.get("ExtractPathOTHER");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_1) {
globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

e_tFileInputExcel_1.printStackTrace();

}
try {
errorCode = null;tHashInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tHashInput_2) {
globalMap.put("tHashInput_2_SUBPROCESS_STATE", -1);

e_tHashInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : EXTRACT_FOR_DYNAMICS_1");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     795063 characters generated by Talend Open Studio for Data Integration 
 *     on the 18 mai 2022 17:27:51 CEST
 ************************************************************************************************/