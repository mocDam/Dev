// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.buy_integration_0_25;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.SharedRecipient;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: BUY_INTEGRATION Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class BUY_INTEGRATION implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(IntegrationPath != null){
				
					this.setProperty("IntegrationPath", IntegrationPath.toString());
				
			}
			
			if(LogPath != null){
				
					this.setProperty("LogPath", LogPath.toString());
				
			}
			
			if(ExtractPath != null){
				
					this.setProperty("ExtractPath", ExtractPath.toString());
				
			}
			
			if(ReferentielPath != null){
				
					this.setProperty("ReferentielPath", ReferentielPath.toString());
				
			}
			
			if(ExtractPathFinal != null){
				
					this.setProperty("ExtractPathFinal", ExtractPathFinal.toString());
				
			}
			
			if(ErrorDataEntity != null){
				
					this.setProperty("ErrorDataEntity", ErrorDataEntity.toString());
				
			}
			
			if(ModelFilePath != null){
				
					this.setProperty("ModelFilePath", ModelFilePath.toString());
				
			}
			
			if(emailErrorRecipient != null){
				
					this.setProperty("emailErrorRecipient", emailErrorRecipient.toString());
				
			}
			
			if(ExtractPathPrice != null){
				
					this.setProperty("ExtractPathPrice", ExtractPathPrice.toString());
				
			}
			
			if(ExtractPathFinalPrice != null){
				
					this.setProperty("ExtractPathFinalPrice", ExtractPathFinalPrice.toString());
				
			}
			
			if(ExtractPathHBE != null){
				
					this.setProperty("ExtractPathHBE", ExtractPathHBE.toString());
				
			}
			
			if(ExtractPathOTHER != null){
				
					this.setProperty("ExtractPathOTHER", ExtractPathOTHER.toString());
				
			}
			
			if(ExtractPathFinalPriceHBB1 != null){
				
					this.setProperty("ExtractPathFinalPriceHBB1", ExtractPathFinalPriceHBB1.toString());
				
			}
			
			if(ExtractPathFinalPriceHBP1 != null){
				
					this.setProperty("ExtractPathFinalPriceHBP1", ExtractPathFinalPriceHBP1.toString());
				
			}
			
			if(ExtractPathFinalPriceHBS1 != null){
				
					this.setProperty("ExtractPathFinalPriceHBS1", ExtractPathFinalPriceHBS1.toString());
				
			}
			
		}

public String IntegrationPath;
public String getIntegrationPath(){
	return this.IntegrationPath;
}
public String LogPath;
public String getLogPath(){
	return this.LogPath;
}
public String ExtractPath;
public String getExtractPath(){
	return this.ExtractPath;
}
public String ReferentielPath;
public String getReferentielPath(){
	return this.ReferentielPath;
}
public String ExtractPathFinal;
public String getExtractPathFinal(){
	return this.ExtractPathFinal;
}
public String ErrorDataEntity;
public String getErrorDataEntity(){
	return this.ErrorDataEntity;
}
public String ModelFilePath;
public String getModelFilePath(){
	return this.ModelFilePath;
}
public String emailErrorRecipient;
public String getEmailErrorRecipient(){
	return this.emailErrorRecipient;
}
public String ExtractPathPrice;
public String getExtractPathPrice(){
	return this.ExtractPathPrice;
}
public String ExtractPathFinalPrice;
public String getExtractPathFinalPrice(){
	return this.ExtractPathFinalPrice;
}
public String ExtractPathHBE;
public String getExtractPathHBE(){
	return this.ExtractPathHBE;
}
public String ExtractPathOTHER;
public String getExtractPathOTHER(){
	return this.ExtractPathOTHER;
}
public String ExtractPathFinalPriceHBB1;
public String getExtractPathFinalPriceHBB1(){
	return this.ExtractPathFinalPriceHBB1;
}
public String ExtractPathFinalPriceHBP1;
public String getExtractPathFinalPriceHBP1(){
	return this.ExtractPathFinalPriceHBP1;
}
public String ExtractPathFinalPriceHBS1;
public String getExtractPathFinalPriceHBS1(){
	return this.ExtractPathFinalPriceHBS1;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.25";
	private final String jobName = "BUY_INTEGRATION";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				BUY_INTEGRATION.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(BUY_INTEGRATION.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tWaitForFile_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSleep_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWaitForFile_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileProperties_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSleep_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_FILE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_FILE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWaitForFile_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileProperties_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileCopy_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileCopy_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileCopy_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tWaitForFile_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWaitForFile_1 begin ] start
	 */

				
			int NB_ITERATE_tSleep_4 = 0; //for statistics
			

	
		
		ok_Hash.put("tWaitForFile_1", false);
		start_Hash.put("tWaitForFile_1", System.currentTimeMillis());
		
	
	currentComponent="tWaitForFile_1";

	
		int tos_count_tWaitForFile_1 = 0;
		

       
        class Util_tWaitForFile_1 {

            private boolean flagt = false;

            private java.util.regex.Pattern fileNamePatternt = null;
        	private java.util.List<String> list;
			public java.util.List<String> getFiles(){
				setFiles();
				return list;
			}
        	public Util_tWaitForFile_1(){
				this.list = new java.util.ArrayList<String>();
			}
			public void addFile(java.io.File file){
				this.list.add(file.getPath());
			}
            void setFiles() {
                String directoryt = context.IntegrationPath;
                String filemaskt = "*.xlsx"+"$";

                if (filemaskt.indexOf("^") == -1) {
                    filemaskt = "^" + filemaskt;
                }
                if (!(filemaskt.lastIndexOf(".*$") == -1) && filemaskt.lastIndexOf("*.*$") == -1) {
                    filemaskt = filemaskt.substring(0, filemaskt.length() - 3) + "$";
                    flagt = true;
                } else {
                    filemaskt = java.util.regex.Pattern.compile("[*]").matcher(filemaskt).replaceAll(".*");
                }

                boolean case_sensitivet = true;
                fileNamePatternt = java.util.regex.Pattern.compile(filemaskt);
                if (!case_sensitivet) {
                    fileNamePatternt = java.util.regex.Pattern.compile(filemaskt, java.util.regex.Pattern.CASE_INSENSITIVE);
                }
                java.io.File filet = new java.io.File(directoryt);
                filet.listFiles(new java.io.FilenameFilter() {

                    public boolean accept(java.io.File dir, String name) {
                        java.io.File file = new java.io.File(dir, name);
                        if (file.isFile()) {
                            String fileNamet = name;
                            if (flagt == true) {
                                if (!(fileNamet.indexOf(".") == -1)) {
                                    if (fileNamePatternt.matcher(fileNamet.substring(0, fileNamet.indexOf("."))).find()) {
                                        addFile(file);

                                    }
                                } else {
                                    if (fileNamePatternt.matcher(fileNamet).find()) {
                                        addFile(file);
                                    }
                                }
                            } else {
                                if (fileNamePatternt.matcher(fileNamet).find()) {
                                    addFile(file);
                                }
                            }

                            return true;
                        }                         
                        return false;
                    }

                });

            }
			java.util.List<java.io.File> getCreatedFiles(java.util.List<String> originalFiles, java.util.List<String> fetchOneTimeFiles) {
				java.util.List<java.io.File> newCreatedFiles = new java.util.ArrayList<java.io.File>();
				String [] array = originalFiles.toArray(new String[]{});
				for(String file: fetchOneTimeFiles){
					int index = java.util.Arrays.binarySearch(array, file);
					if(index<0){
						newCreatedFiles.add(new java.io.File(file));
					}
				}
				return newCreatedFiles;
			}
			
        }
            
        Util_tWaitForFile_1 util_tWaitForFile_1 = new Util_tWaitForFile_1();
        java.util.List<String> originalFiles_tWaitForFile_1 = util_tWaitForFile_1.getFiles();            
      
        int count_tWaitForFile_1 = 0;
        
        
        while (true) {                
            boolean found_tWaitForFile_1 = false;
				if(globalMap.get("tWaitForFile_1_PRESENT_FILE") != null){
	                globalMap.remove("tWaitForFile_1_PRESENT_FILE");
				}              
    			if( count_tWaitForFile_1 < originalFiles_tWaitForFile_1.size()) {
                    java.io.File file_tWaitForFile_1 = new java.io.File(originalFiles_tWaitForFile_1.get(count_tWaitForFile_1));
					
                    globalMap.put("tWaitForFile_1_FILENAME", file_tWaitForFile_1.getName());
                    globalMap.put("tWaitForFile_1_PRESENT_FILE", file_tWaitForFile_1.getAbsolutePath());
                    found_tWaitForFile_1 = true;
    			} else {
			    
			util_tWaitForFile_1 = new Util_tWaitForFile_1();
			
            java.util.List<String> fetchFilesOneTime_tWaitForFile_1 = util_tWaitForFile_1.getFiles();
            
			List<String> intersectionList = new java.util.ArrayList<String>();
			
			for(String cachedFile : originalFiles_tWaitForFile_1)
			{
				if(fetchFilesOneTime_tWaitForFile_1.contains(cachedFile))
				{
					intersectionList.add(cachedFile);
				}
			}     
            
            util_tWaitForFile_1 = new Util_tWaitForFile_1();
				originalFiles_tWaitForFile_1 = intersectionList;
            	if(globalMap.get("tWaitForFile_1_CREATED_FILE") != null){
	                globalMap.remove("tWaitForFile_1_CREATED_FILE");
				}
				java.util.Collections.sort(originalFiles_tWaitForFile_1);
                java.util.List<java.io.File> newCreatedFiles_tWaitForFile_1 = util_tWaitForFile_1.getCreatedFiles(originalFiles_tWaitForFile_1,fetchFilesOneTime_tWaitForFile_1);

               	for ( int i=0; i< newCreatedFiles_tWaitForFile_1.size(); i++) {
					java.io.File file_tWaitForFile_1 = newCreatedFiles_tWaitForFile_1.get(i);
           			
					
                    globalMap.put("tWaitForFile_1_FILENAME", file_tWaitForFile_1.getName());
                    globalMap.put("tWaitForFile_1_CREATED_FILE", file_tWaitForFile_1.getAbsolutePath());
                    found_tWaitForFile_1 = true;
                    originalFiles_tWaitForFile_1.add(file_tWaitForFile_1.getPath());              
                    break;
            	}
			
   
                }
            count_tWaitForFile_1++;
            
            globalMap.put("tWaitForFile_1_CURRENT_ITERATION", count_tWaitForFile_1);
            
            if (!found_tWaitForFile_1) {
				
            	Thread.sleep(1 * 1000);
                continue;
            }            
            

 



/**
 * [tWaitForFile_1 begin ] stop
 */
	
	/**
	 * [tWaitForFile_1 main ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 


	tos_count_tWaitForFile_1++;

/**
 * [tWaitForFile_1 main ] stop
 */
	
	/**
	 * [tWaitForFile_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 



/**
 * [tWaitForFile_1 process_data_begin ] stop
 */
	NB_ITERATE_tSleep_4++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("size_too_high", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk27", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk10", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tSleep_4);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tSleep_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tSleep_4", false);
		start_Hash.put("tSleep_4", System.currentTimeMillis());
		
	
	currentComponent="tSleep_4";

	
		int tos_count_tSleep_4 = 0;
		

 



/**
 * [tSleep_4 begin ] stop
 */
	
	/**
	 * [tSleep_4 main ] start
	 */

	

	
	
	currentComponent="tSleep_4";

	

    Thread.sleep((1)*1000);

 


	tos_count_tSleep_4++;

/**
 * [tSleep_4 main ] stop
 */
	
	/**
	 * [tSleep_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSleep_4";

	

 



/**
 * [tSleep_4 process_data_begin ] stop
 */
	
	/**
	 * [tSleep_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tSleep_4";

	

 



/**
 * [tSleep_4 process_data_end ] stop
 */
	
	/**
	 * [tSleep_4 end ] start
	 */

	

	
	
	currentComponent="tSleep_4";

	

 

ok_Hash.put("tSleep_4", true);
end_Hash.put("tSleep_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tSetGlobalVar_2Process(globalMap);



/**
 * [tSleep_4 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tSleep_4);
						}				
					




	
	/**
	 * [tWaitForFile_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 



/**
 * [tWaitForFile_1 process_data_end ] stop
 */
	
	/**
	 * [tWaitForFile_1 end ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

    if(false){
        break;
    }
}


 

ok_Hash.put("tWaitForFile_1", true);
end_Hash.put("tWaitForFile_1", System.currentTimeMillis());




/**
 * [tWaitForFile_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWaitForFile_1 finally ] start
	 */

	

	
	
	currentComponent="tWaitForFile_1";

	

 



/**
 * [tWaitForFile_1 finally ] stop
 */

	
	/**
	 * [tSleep_4 finally ] start
	 */

	

	
	
	currentComponent="tSleep_4";

	

 



/**
 * [tSleep_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_2", false);
		start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_2";

	
		int tos_count_tSetGlobalVar_2 = 0;
		

 



/**
 * [tSetGlobalVar_2 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

globalMap.put("LogFile", "logs_file" +  TalendDate.formatDate("yyyy-MM-dd-HH-mm", new Date()) + ".txt");
globalMap.put("dateError",  TalendDate.formatDate("yyyy-MM-ddHHmmss", new Date()) );
globalMap.put("fileSize", "");

 


	tos_count_tSetGlobalVar_2++;

/**
 * [tSetGlobalVar_2 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 

ok_Hash.put("tSetGlobalVar_2", true);
end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tRunJob_7Process(globalMap);



/**
 * [tSetGlobalVar_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_2 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_7", false);
		start_Hash.put("tRunJob_7", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_7";

	
		int tos_count_tRunJob_7 = 0;
		


 



/**
 * [tRunJob_7 begin ] stop
 */
	
	/**
	 * [tRunJob_7 main ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	
	java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_7.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_7.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_7.add("--father_node=tRunJob_7");
	      			
	        			paraList_tRunJob_7.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_7.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_7.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null){
		paraList_tRunJob_7.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_7 = null;

	
		obj_tRunJob_7 = ((String)globalMap.get("tWaitForFile_1_FILENAME"));
		if(obj_tRunJob_7!=null) {
			paraList_tRunJob_7.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
		} else {
			paraList_tRunJob_7.add("--context_param ExcelFileName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_7.put("ExcelFileName", obj_tRunJob_7);
	
	
		dev.buy_search_recipient_0_1.BUY_SEARCH_RECIPIENT childJob_tRunJob_7 = new dev.buy_search_recipient_0_1.BUY_SEARCH_RECIPIENT();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_7) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
			        .entrySet()) {
	            dataSources_tRunJob_7.put(talendDataSourceEntry_tRunJob_7.getKey(),
	                    talendDataSourceEntry_tRunJob_7.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
	    }
		  
			childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;
		  
		
		String[][] childReturn_tRunJob_7 = childJob_tRunJob_7.runJob((String[]) paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));
		
	  	
				errorCode = childJob_tRunJob_7.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_7.getErrorCode() == null){
				globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getStatus() != null && ("failure").equals(childJob_tRunJob_7.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getErrorCode());
		    }
		    if (childJob_tRunJob_7.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_7.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_7.getErrorCode() != null || ("failure").equals(childJob_tRunJob_7.getStatus())) {
					java.lang.Exception ce_tRunJob_7 = childJob_tRunJob_7.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_7!=null) ? (ce_tRunJob_7.getClass().getName() + ": " + ce_tRunJob_7.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_7++;

/**
 * [tRunJob_7 main ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_7 end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 

ok_Hash.put("tRunJob_7", true);
end_Hash.put("tRunJob_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk26", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tRunJob_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_7 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		



System.out.println("Return from Search Recipient");
context.emailErrorRecipient = routines.SharedRecipient.recipient;

System.out.println(routines.SharedRecipient.recipient);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk27", 0, "ok");
				}
				tFileProperties_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	
			    public String abs_path;

				public String getAbs_path () {
					return this.abs_path;
				}
				
			    public String dirname;

				public String getDirname () {
					return this.dirname;
				}
				
			    public String basename;

				public String getBasename () {
					return this.basename;
				}
				
			    public String mode_string;

				public String getMode_string () {
					return this.mode_string;
				}
				
			    public Long size;

				public Long getSize () {
					return this.size;
				}
				
			    public Long mtime;

				public Long getMtime () {
					return this.mtime;
				}
				
			    public String mtime_string;

				public String getMtime_string () {
					return this.mtime_string;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_INTEGRATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_INTEGRATION.length == 0) {
   					commonByteArray_DEV_BUY_INTEGRATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_INTEGRATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_INTEGRATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_INTEGRATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		
					this.abs_path = readString(dis);
					
					this.dirname = readString(dis);
					
					this.basename = readString(dis);
					
					this.mode_string = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.size = null;
           				} else {
           			    	this.size = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mtime = null;
           				} else {
           			    	this.mtime = dis.readLong();
           				}
					
					this.mtime_string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.abs_path,dos);
					
					// String
				
						writeString(this.dirname,dos);
					
					// String
				
						writeString(this.basename,dos);
					
					// String
				
						writeString(this.mode_string,dos);
					
					// Long
				
						if(this.size == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.size);
		            	}
					
					// Long
				
						if(this.mtime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.mtime);
		            	}
					
					// String
				
						writeString(this.mtime_string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("abs_path="+abs_path);
		sb.append(",dirname="+dirname);
		sb.append(",basename="+basename);
		sb.append(",mode_string="+mode_string);
		sb.append(",size="+String.valueOf(size));
		sb.append(",mtime="+String.valueOf(mtime));
		sb.append(",mtime_string="+mtime_string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileProperties_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileProperties_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileProperties_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileProperties_1", false);
		start_Hash.put("tFileProperties_1", System.currentTimeMillis());
		
	
	currentComponent="tFileProperties_1";

	
		int tos_count_tFileProperties_1 = 0;
		



java.io.File file_tFileProperties_1 = new java.io.File(context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
row6 = new row6Struct();

if(file_tFileProperties_1.exists()) {
    row6.abs_path = file_tFileProperties_1.getAbsolutePath();
    row6.dirname = file_tFileProperties_1.getParent();
    row6.basename = file_tFileProperties_1.getName();
    String r_tFileProperties_1 = (file_tFileProperties_1.canRead())?"r":"-";
	String w_tFileProperties_1 = (file_tFileProperties_1.canWrite())?"w":"-";
	//String x_ = (file_.canExecute())?"x":"-"; /*since JDK1.6*/
    row6.mode_string = r_tFileProperties_1 + w_tFileProperties_1;
    row6.size = file_tFileProperties_1.length();
    row6.mtime = file_tFileProperties_1.lastModified();
    row6.mtime_string =(new java.util.Date(file_tFileProperties_1.lastModified())).toString();
	
	
}
 



/**
 * [tFileProperties_1 begin ] stop
 */
	
	/**
	 * [tFileProperties_1 main ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 


	tos_count_tFileProperties_1++;

/**
 * [tFileProperties_1 main ] stop
 */
	
	/**
	 * [tFileProperties_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 



/**
 * [tFileProperties_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = row6.id * 2;
//
// lowercase the name
// output_row.name = row6.name.toLowerCase();


globalMap.put("fileSize",(long)row6.size) ;
System.out.println(globalMap.get("fileSize"));


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tFileProperties_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 



/**
 * [tFileProperties_1 process_data_end ] stop
 */
	
	/**
	 * [tFileProperties_1 end ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 

ok_Hash.put("tFileProperties_1", true);
end_Hash.put("tFileProperties_1", System.currentTimeMillis());




/**
 * [tFileProperties_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

   			if ((long)globalMap.get("fileSize") < 10000000) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If15", 0, "true");
					}
				
    			tJava_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If15", 0, "false");
					}   	 
   				}
   			if ((long)globalMap.get("fileSize") > 10000000) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("size_too_high", 0, "true");
					}
				
    			tRunJob_6Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("size_too_high", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileProperties_1 finally ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 



/**
 * [tFileProperties_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileProperties_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


context.ErrorDataEntity = "";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	

 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_1.add("java");
		      		
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx3048M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx4096M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dmail.smtp.ssl.protocols=TLSv1.2");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/mail-1.4.7.jar;../lib/activation.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.19.jar;../lib/commons-lang3-3.8.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/filecopy.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/jboss-serialization.jar;../lib/log4j-1.2.17.jar;../lib/mail-1.4.jar;../lib/mssql-jdbc.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/talendExcel-1.5-20190731.jar;../lib/talend_DB_mssqlUtil-1.3-20190523.jar;../lib/talend_file_enhanced_20070724.jar;../lib/talendcsv.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/xmlbeans-3.1.0.jar;buy_validation_0_10.jar;buy_send_email_0_1.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "dev.buy_validation_0_10.BUY_VALIDATION");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
		      		
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx3048M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx4096M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dmail.smtp.ssl.protocols=TLSv1.2");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/mail-1.4.7.jar:$ROOT_PATH/../lib/activation.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.19.jar:$ROOT_PATH/../lib/commons-lang3-3.8.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/filecopy.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mail-1.4.jar:$ROOT_PATH/../lib/mssql-jdbc.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/talendExcel-1.5-20190731.jar:$ROOT_PATH/../lib/talend_DB_mssqlUtil-1.3-20190523.jar:$ROOT_PATH/../lib/talend_file_enhanced_20070724.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/buy_validation_0_10.jar:$ROOT_PATH/buy_send_email_0_1.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "dev.buy_validation_0_10.BUY_VALIDATION");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = context.IntegrationPath;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param IntegrationExcelPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param IntegrationExcelPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("IntegrationExcelPath", obj_tRunJob_1);
	
		obj_tRunJob_1 = ((String)globalMap.get("tWaitForFile_1_FILENAME"));
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param ExcelFileName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("ExcelFileName", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.LogPath;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param LogPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("LogPath", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.ReferentielPath;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param ReferentielPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param ReferentielPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("ReferentielPath", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.LogPath + ((String)globalMap.get("LogFile"));
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param errorFile=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param errorFile=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("errorFile", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.emailErrorRecipient;
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param recipientEmail=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param recipientEmail=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("recipientEmail", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;

		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join(10000);
            error_tRunJob_1.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			
				
				System.err.println("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tFileExist_5Process(globalMap);



/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_5", false);
		start_Hash.put("tFileExist_5", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_5";

	
		int tos_count_tFileExist_5 = 0;
		

 



/**
 * [tFileExist_5 begin ] stop
 */
	
	/**
	 * [tFileExist_5 main ] start
	 */

	

	
	
	currentComponent="tFileExist_5";

	



java.io.File file_tFileExist_5 = new java.io.File(context.LogPath + ((String)globalMap.get("LogFile")));
if (!file_tFileExist_5.exists()) {
    globalMap.put("tFileExist_5_EXISTS",false);
}else{
	globalMap.put("tFileExist_5_EXISTS",true);
}

globalMap.put("tFileExist_5_FILENAME",context.LogPath + ((String)globalMap.get("LogFile")));


 


	tos_count_tFileExist_5++;

/**
 * [tFileExist_5 main ] stop
 */
	
	/**
	 * [tFileExist_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_5";

	

 



/**
 * [tFileExist_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_5";

	

 



/**
 * [tFileExist_5 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_5 end ] start
	 */

	

	
	
	currentComponent="tFileExist_5";

	

 

ok_Hash.put("tFileExist_5", true);
end_Hash.put("tFileExist_5", System.currentTimeMillis());

   			if (!((Boolean)globalMap.get("tFileExist_5_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If10", 0, "true");
					}
				
    			tFileExist_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If10", 0, "false");
					}   	 
   				}
   			if (((Boolean)globalMap.get("tFileExist_5_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If11", 0, "true");
					}
				
    			tFixedFlowInput_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If11", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_5 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_5";

	

 



/**
 * [tFileExist_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_5_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";

	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	



java.io.File file_tFileExist_1 = new java.io.File(context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tRunJob_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
class DealChildJobLibrary_tRunJob_2 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

	class JVMArgumentHelper_tRunJob_2 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_2 jvm_argument_helper_tRunJob_2 = new JVMArgumentHelper_tRunJob_2();
	

 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_2 = System.getProperty("os.name");
			if (osName_tRunJob_2 != null && osName_tRunJob_2.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_2.add("java");
		      		
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.19.jar;../lib/commons-lang3-3.8.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/jboss-serialization.jar;../lib/log4j-1.2.17.jar;../lib/mssql-jdbc.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/talendExcel-1.5-20190731.jar;../lib/talend_DB_mssqlUtil-1.3-20190523.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/xmlbeans-3.1.0.jar;extract_for_dynamics_0_11.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "dev.extract_for_dynamics_0_11.EXTRACT_FOR_DYNAMICS");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_2.add("java");
		      		
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.19.jar:$ROOT_PATH/../lib/commons-lang3-3.8.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mssql-jdbc.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/talendExcel-1.5-20190731.jar:$ROOT_PATH/../lib/talend_DB_mssqlUtil-1.3-20190523.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/extract_for_dynamics_0_11.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "dev.extract_for_dynamics_0_11.EXTRACT_FOR_DYNAMICS");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_2.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = context.IntegrationPath;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param IntegrationExcelPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param IntegrationExcelPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("IntegrationExcelPath", obj_tRunJob_2);
	
		obj_tRunJob_2 = ((String)globalMap.get("tWaitForFile_1_FILENAME"));
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param ExcelFileName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("ExcelFileName", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.LogPath;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param LogPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("LogPath", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.ExtractPath;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param ExtractPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param ExtractPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("ExtractPath", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.ReferentielPath;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param ReferentielPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param ReferentielPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("ReferentielPath", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.ExtractPathHBE;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param ExtractPathHBE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param ExtractPathHBE=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("ExtractPathHBE", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.ExtractPathOTHER;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param ExtractPathOTHER=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param ExtractPathOTHER=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("ExtractPathOTHER", obj_tRunJob_2);
	
	
				class ConsoleHelper_tRunJob_2 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_2 consoleHelper_tRunJob_2 = new ConsoleHelper_tRunJob_2();

		Runtime runtime_tRunJob_2 = Runtime.getRuntime();
		Process ps_tRunJob_2 = null;

		//0 indicates normal termination
        int result_tRunJob_2;
        StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
        try {
            ps_tRunJob_2 = runtime_tRunJob_2.exec((String[])paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

            Thread normal_tRunJob_2 = consoleHelper_tRunJob_2.getNormalThread(ps_tRunJob_2);
            normal_tRunJob_2.start();

            Thread error_tRunJob_2 = consoleHelper_tRunJob_2.getErrorThread(ps_tRunJob_2, errorMsg_tRunJob_2);
            error_tRunJob_2.start();

            result_tRunJob_2 = ps_tRunJob_2.waitFor();
            normal_tRunJob_2.join(10000);
            error_tRunJob_2.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_2.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_2_CHILD_RETURN_CODE",result_tRunJob_2);
		if(result_tRunJob_2 != 0){
   			globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_2.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_2 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_2.toString());
			
  		}

		

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());

   			if (true) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				
    			tFileExist_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_2", false);
		start_Hash.put("tFileExist_2", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_2";

	
		int tos_count_tFileExist_2 = 0;
		

 



/**
 * [tFileExist_2 begin ] stop
 */
	
	/**
	 * [tFileExist_2 main ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	



java.io.File file_tFileExist_2 = new java.io.File(context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
if (!file_tFileExist_2.exists()) {
    globalMap.put("tFileExist_2_EXISTS",false);
}else{
	globalMap.put("tFileExist_2_EXISTS",true);
}

globalMap.put("tFileExist_2_FILENAME",context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));


 


	tos_count_tFileExist_2++;

/**
 * [tFileExist_2 main ] stop
 */
	
	/**
	 * [tFileExist_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	

 



/**
 * [tFileExist_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	

 



/**
 * [tFileExist_2 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_2 end ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	

 

ok_Hash.put("tFileExist_2", true);
end_Hash.put("tFileExist_2", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_2_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				
    			tRunJob_4Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_2 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	

 



/**
 * [tFileExist_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        			paraList_tRunJob_4.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_4.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_4 = null;

	
		obj_tRunJob_4 = context.IntegrationPath;
		if(obj_tRunJob_4!=null) {
			paraList_tRunJob_4.add("--context_param IntegrationExcelPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		} else {
			paraList_tRunJob_4.add("--context_param IntegrationExcelPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("IntegrationExcelPath", obj_tRunJob_4);
	
		obj_tRunJob_4 = ((String)globalMap.get("tWaitForFile_1_FILENAME"));
		if(obj_tRunJob_4!=null) {
			paraList_tRunJob_4.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		} else {
			paraList_tRunJob_4.add("--context_param ExcelFileName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("ExcelFileName", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ExtractPath;
		if(obj_tRunJob_4!=null) {
			paraList_tRunJob_4.add("--context_param ExtractPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		} else {
			paraList_tRunJob_4.add("--context_param ExtractPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("ExtractPath", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ReferentielPath;
		if(obj_tRunJob_4!=null) {
			paraList_tRunJob_4.add("--context_param ReferentielPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		} else {
			paraList_tRunJob_4.add("--context_param ReferentielPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("ReferentielPath", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.LogPath;
		if(obj_tRunJob_4!=null) {
			paraList_tRunJob_4.add("--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		} else {
			paraList_tRunJob_4.add("--context_param LogPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("LogPath", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ExtractPathHBE;
		if(obj_tRunJob_4!=null) {
			paraList_tRunJob_4.add("--context_param ExtractPathHBE=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		} else {
			paraList_tRunJob_4.add("--context_param ExtractPathHBE=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("ExtractPathHBE", obj_tRunJob_4);
	
		obj_tRunJob_4 = context.ExtractPathOTHER;
		if(obj_tRunJob_4!=null) {
			paraList_tRunJob_4.add("--context_param ExtractPathOTHER=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		} else {
			paraList_tRunJob_4.add("--context_param ExtractPathOTHER=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("ExtractPathOTHER", obj_tRunJob_4);
	
	
		dev.extract_for_dynamics_1_0_11.EXTRACT_FOR_DYNAMICS_1 childJob_tRunJob_4 = new dev.extract_for_dynamics_1_0_11.EXTRACT_FOR_DYNAMICS_1();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
	  	
				errorCode = childJob_tRunJob_4.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_4.getErrorCode() == null){
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
		    }
		    if (childJob_tRunJob_4.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
					java.lang.Exception ce_tRunJob_4 = childJob_tRunJob_4.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_4!=null) ? (ce_tRunJob_4.getClass().getName() + ": " + ce_tRunJob_4.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());

   			if (true) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If7", 0, "true");
					}
				
    			tFileExist_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If7", 0, "false");
					}   	 
   				}



/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_3", false);
		start_Hash.put("tFileExist_3", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_3";

	
		int tos_count_tFileExist_3 = 0;
		

 



/**
 * [tFileExist_3 begin ] stop
 */
	
	/**
	 * [tFileExist_3 main ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	



java.io.File file_tFileExist_3 = new java.io.File(context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
if (!file_tFileExist_3.exists()) {
    globalMap.put("tFileExist_3_EXISTS",false);
}else{
	globalMap.put("tFileExist_3_EXISTS",true);
}

globalMap.put("tFileExist_3_FILENAME",context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));


 


	tos_count_tFileExist_3++;

/**
 * [tFileExist_3 main ] stop
 */
	
	/**
	 * [tFileExist_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	

 



/**
 * [tFileExist_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	

 



/**
 * [tFileExist_3 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_3 end ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	

 

ok_Hash.put("tFileExist_3", true);
end_Hash.put("tFileExist_3", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_3_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If8", 0, "true");
					}
				
    			tRunJob_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If8", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_3 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	

 



/**
 * [tFileExist_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_3_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row3Struct row1 = row3;
row3Struct row2 = row3;
row3Struct row4 = row3;
row3Struct row8 = row3;
row3Struct row10 = row3;
row3Struct row15 = row3;










	
	/**
	 * [tFileCopy_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_8", false);
		start_Hash.put("tFileCopy_8", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tFileCopy_8 = 0;
		

 



/**
 * [tFileCopy_8 begin ] stop
 */



	
	/**
	 * [tFileCopy_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_7", false);
		start_Hash.put("tFileCopy_7", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tFileCopy_7 = 0;
		

 



/**
 * [tFileCopy_7 begin ] stop
 */



	
	/**
	 * [tFileCopy_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_3", false);
		start_Hash.put("tFileCopy_3", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tFileCopy_3 = 0;
		

 



/**
 * [tFileCopy_3 begin ] stop
 */



	
	/**
	 * [tFileCopy_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_2", false);
		start_Hash.put("tFileCopy_2", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileCopy_2 = 0;
		

 



/**
 * [tFileCopy_2 begin ] stop
 */



	
	/**
	 * [tSleep_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSleep_1", false);
		start_Hash.put("tSleep_1", System.currentTimeMillis());
		
	
	currentComponent="tSleep_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tSleep_1 = 0;
		

 



/**
 * [tSleep_1 begin ] stop
 */



	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */



	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */



	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		
class DealChildJobLibrary_tRunJob_3 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_3 dealChildJobLibrary_tRunJob_3 = new DealChildJobLibrary_tRunJob_3();

	class JVMArgumentHelper_tRunJob_3 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_3 jvm_argument_helper_tRunJob_3 = new JVMArgumentHelper_tRunJob_3();
	

 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_3 = System.getProperty("os.name");
			if (osName_tRunJob_3 != null && osName_tRunJob_3.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_3.add("java");
		      		
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx4096M");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.19.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/jboss-serialization.jar;../lib/log4j-1.2.17.jar;../lib/mssql-jdbc.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/talend_DB_mssqlUtil-1.3-20190523.jar;../lib/talend_file_enhanced_20070724.jar;../lib/talendcsv.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/xmlbeans-3.1.0.jar;extract_for_dynamics_price_0_11.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "dev.extract_for_dynamics_price_0_11.EXTRACT_FOR_DYNAMICS_PRICE");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_3.add("java");
		      		
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx4096M");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.19.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mssql-jdbc.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/talend_DB_mssqlUtil-1.3-20190523.jar:$ROOT_PATH/../lib/talend_file_enhanced_20070724.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/extract_for_dynamics_price_0_11.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "dev.extract_for_dynamics_price_0_11.EXTRACT_FOR_DYNAMICS_PRICE");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_3.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_3 = null;

	
		obj_tRunJob_3 = context.IntegrationPath;
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param IntegrationExcelPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param IntegrationExcelPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("IntegrationExcelPath", obj_tRunJob_3);
	
		obj_tRunJob_3 = ((String)globalMap.get("tWaitForFile_1_FILENAME"));
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param ExcelFileName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("ExcelFileName", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.LogPath;
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param LogPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("LogPath", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.ExtractPath;
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param ExtractPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param ExtractPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("ExtractPath", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.ReferentielPath;
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param ReferentielPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param ReferentielPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("ReferentielPath", obj_tRunJob_3);
	
		obj_tRunJob_3 = context.ExtractPathPrice;
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param ExtractPathPrice=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param ExtractPathPrice=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("ExtractPathPrice", obj_tRunJob_3);
	
	
				class ConsoleHelper_tRunJob_3 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_3 consoleHelper_tRunJob_3 = new ConsoleHelper_tRunJob_3();

		Runtime runtime_tRunJob_3 = Runtime.getRuntime();
		Process ps_tRunJob_3 = null;

		//0 indicates normal termination
        int result_tRunJob_3;
        StringBuffer errorMsg_tRunJob_3 = new StringBuffer();
        try {
            ps_tRunJob_3 = runtime_tRunJob_3.exec((String[])paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

            Thread normal_tRunJob_3 = consoleHelper_tRunJob_3.getNormalThread(ps_tRunJob_3);
            normal_tRunJob_3.start();

            Thread error_tRunJob_3 = consoleHelper_tRunJob_3.getErrorThread(ps_tRunJob_3, errorMsg_tRunJob_3);
            error_tRunJob_3.start();

            result_tRunJob_3 = ps_tRunJob_3.waitFor();
            normal_tRunJob_3.join(10000);
            error_tRunJob_3.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_3.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_3_CHILD_RETURN_CODE",result_tRunJob_3);
		if(result_tRunJob_3 != 0){
   			globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_3.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_3 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_3.toString());
			
  		}

		
				
  				System.err.println("when tRunJob runs in an independent process, it can't extract datas from tBufferOutput of child job."); 
			

 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
    
     
 

 
     row1 = row3;


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

globalMap.put("dateError",  TalendDate.formatDate("yyyy-MM-ddHHmmss", new Date()) );

 
     row2 = row1;


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */

	
	/**
	 * [tSleep_1 main ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

    Thread.sleep((1)*1000);

 
     row4 = row2;


	tos_count_tSleep_1++;

/**
 * [tSleep_1 main ] stop
 */
	
	/**
	 * [tSleep_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileCopy_2 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

 


        String srcFileName_tFileCopy_2 = context.ModelFilePath + "Manifest.xml";

		java.io.File srcFile_tFileCopy_2 = new java.io.File(srcFileName_tFileCopy_2);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_2.exists() || !srcFile_tFileCopy_2.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_2);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2);
		}
        String desDirName_tFileCopy_2 = context.ExtractPathHBE;

		String desFileName_tFileCopy_2 =  srcFile_tFileCopy_2.getName() ;

		if (desFileName_tFileCopy_2 != null && ("").equals(desFileName_tFileCopy_2.trim())){
			desFileName_tFileCopy_2 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_2 = new java.io.File(desDirName_tFileCopy_2, desFileName_tFileCopy_2);

		if (!srcFile_tFileCopy_2.getPath().equals(desFile_tFileCopy_2.getPath())  ) {
				java.io.File parentFile_tFileCopy_2 = desFile_tFileCopy_2.getParentFile();

				if (parentFile_tFileCopy_2 != null && !parentFile_tFileCopy_2.exists()) {
					parentFile_tFileCopy_2.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_2.getPath(), desFile_tFileCopy_2.getPath(), false);
				} catch (Exception e) {
						System.err.println("tFileCopy_2 " + e.getMessage());
				}

		}
		globalMap.put("tFileCopy_2_DESTINATION_FILEPATH",desFile_tFileCopy_2.getPath()); 
		globalMap.put("tFileCopy_2_DESTINATION_FILENAME",desFile_tFileCopy_2.getName()); 

		globalMap.put("tFileCopy_2_SOURCE_DIRECTORY", srcFile_tFileCopy_2.getParent());
		globalMap.put("tFileCopy_2_DESTINATION_DIRECTORY", desFile_tFileCopy_2.getParent());        
        

 
     row8 = row4;


	tos_count_tFileCopy_2++;

/**
 * [tFileCopy_2 main ] stop
 */
	
	/**
	 * [tFileCopy_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 



/**
 * [tFileCopy_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileCopy_3 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

 


        String srcFileName_tFileCopy_3 = context.ModelFilePath + "PackageHeader.xml";

		java.io.File srcFile_tFileCopy_3 = new java.io.File(srcFileName_tFileCopy_3);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_3.exists() || !srcFile_tFileCopy_3.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_3 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_3);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_3);
		}
        String desDirName_tFileCopy_3 = context.ExtractPathHBE;

		String desFileName_tFileCopy_3 =  srcFile_tFileCopy_3.getName() ;

		if (desFileName_tFileCopy_3 != null && ("").equals(desFileName_tFileCopy_3.trim())){
			desFileName_tFileCopy_3 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_3 = new java.io.File(desDirName_tFileCopy_3, desFileName_tFileCopy_3);

		if (!srcFile_tFileCopy_3.getPath().equals(desFile_tFileCopy_3.getPath())  ) {
				java.io.File parentFile_tFileCopy_3 = desFile_tFileCopy_3.getParentFile();

				if (parentFile_tFileCopy_3 != null && !parentFile_tFileCopy_3.exists()) {
					parentFile_tFileCopy_3.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_3.getPath(), desFile_tFileCopy_3.getPath(), false);
				} catch (Exception e) {
						System.err.println("tFileCopy_3 " + e.getMessage());
				}

		}
		globalMap.put("tFileCopy_3_DESTINATION_FILEPATH",desFile_tFileCopy_3.getPath()); 
		globalMap.put("tFileCopy_3_DESTINATION_FILENAME",desFile_tFileCopy_3.getName()); 

		globalMap.put("tFileCopy_3_SOURCE_DIRECTORY", srcFile_tFileCopy_3.getParent());
		globalMap.put("tFileCopy_3_DESTINATION_DIRECTORY", desFile_tFileCopy_3.getParent());        
        

 
     row10 = row8;


	tos_count_tFileCopy_3++;

/**
 * [tFileCopy_3 main ] stop
 */
	
	/**
	 * [tFileCopy_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_3";

	

 



/**
 * [tFileCopy_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileCopy_7 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

 


        String srcFileName_tFileCopy_7 = context.ModelFilePath + "Manifest.xml";

		java.io.File srcFile_tFileCopy_7 = new java.io.File(srcFileName_tFileCopy_7);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_7.exists() || !srcFile_tFileCopy_7.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_7 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_7);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_7);
		}
        String desDirName_tFileCopy_7 = context.ExtractPathOTHER;

		String desFileName_tFileCopy_7 =  srcFile_tFileCopy_7.getName() ;

		if (desFileName_tFileCopy_7 != null && ("").equals(desFileName_tFileCopy_7.trim())){
			desFileName_tFileCopy_7 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_7 = new java.io.File(desDirName_tFileCopy_7, desFileName_tFileCopy_7);

		if (!srcFile_tFileCopy_7.getPath().equals(desFile_tFileCopy_7.getPath())  ) {
				java.io.File parentFile_tFileCopy_7 = desFile_tFileCopy_7.getParentFile();

				if (parentFile_tFileCopy_7 != null && !parentFile_tFileCopy_7.exists()) {
					parentFile_tFileCopy_7.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_7.getPath(), desFile_tFileCopy_7.getPath(), false);
				} catch (Exception e) {
						System.err.println("tFileCopy_7 " + e.getMessage());
				}

		}
		globalMap.put("tFileCopy_7_DESTINATION_FILEPATH",desFile_tFileCopy_7.getPath()); 
		globalMap.put("tFileCopy_7_DESTINATION_FILENAME",desFile_tFileCopy_7.getName()); 

		globalMap.put("tFileCopy_7_SOURCE_DIRECTORY", srcFile_tFileCopy_7.getParent());
		globalMap.put("tFileCopy_7_DESTINATION_DIRECTORY", desFile_tFileCopy_7.getParent());        
        

 
     row15 = row10;


	tos_count_tFileCopy_7++;

/**
 * [tFileCopy_7 main ] stop
 */
	
	/**
	 * [tFileCopy_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_7";

	

 



/**
 * [tFileCopy_7 process_data_begin ] stop
 */

	
	/**
	 * [tFileCopy_8 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					

 


        String srcFileName_tFileCopy_8 = context.ModelFilePath + "PackageHeader.xml";

		java.io.File srcFile_tFileCopy_8 = new java.io.File(srcFileName_tFileCopy_8);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_8.exists() || !srcFile_tFileCopy_8.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_8 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_8);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_8);
		}
        String desDirName_tFileCopy_8 = context.ExtractPathOTHER;

		String desFileName_tFileCopy_8 =  srcFile_tFileCopy_8.getName() ;

		if (desFileName_tFileCopy_8 != null && ("").equals(desFileName_tFileCopy_8.trim())){
			desFileName_tFileCopy_8 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_8 = new java.io.File(desDirName_tFileCopy_8, desFileName_tFileCopy_8);

		if (!srcFile_tFileCopy_8.getPath().equals(desFile_tFileCopy_8.getPath())  ) {
				java.io.File parentFile_tFileCopy_8 = desFile_tFileCopy_8.getParentFile();

				if (parentFile_tFileCopy_8 != null && !parentFile_tFileCopy_8.exists()) {
					parentFile_tFileCopy_8.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_8.getPath(), desFile_tFileCopy_8.getPath(), false);
				} catch (Exception e) {
						System.err.println("tFileCopy_8 " + e.getMessage());
				}

		}
		globalMap.put("tFileCopy_8_DESTINATION_FILEPATH",desFile_tFileCopy_8.getPath()); 
		globalMap.put("tFileCopy_8_DESTINATION_FILENAME",desFile_tFileCopy_8.getName()); 

		globalMap.put("tFileCopy_8_SOURCE_DIRECTORY", srcFile_tFileCopy_8.getParent());
		globalMap.put("tFileCopy_8_DESTINATION_DIRECTORY", desFile_tFileCopy_8.getParent());        
        

 


	tos_count_tFileCopy_8++;

/**
 * [tFileCopy_8 main ] stop
 */
	
	/**
	 * [tFileCopy_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_8";

	

 



/**
 * [tFileCopy_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileCopy_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_8";

	

 



/**
 * [tFileCopy_8 process_data_end ] stop
 */



	
	/**
	 * [tFileCopy_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_7";

	

 



/**
 * [tFileCopy_7 process_data_end ] stop
 */



	
	/**
	 * [tFileCopy_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_3";

	

 



/**
 * [tFileCopy_3 process_data_end ] stop
 */



	
	/**
	 * [tFileCopy_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 



/**
 * [tFileCopy_2 process_data_end ] stop
 */



	
	/**
	 * [tSleep_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_end ] stop
 */



	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */



	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */



	
	/**
	 * [tRunJob_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */

	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */

	
	/**
	 * [tSleep_1 end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tSleep_1", true);
end_Hash.put("tSleep_1", System.currentTimeMillis());




/**
 * [tSleep_1 end ] stop
 */

	
	/**
	 * [tFileCopy_2 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileCopy_2", true);
end_Hash.put("tFileCopy_2", System.currentTimeMillis());




/**
 * [tFileCopy_2 end ] stop
 */

	
	/**
	 * [tFileCopy_3 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_3";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tFileCopy_3", true);
end_Hash.put("tFileCopy_3", System.currentTimeMillis());




/**
 * [tFileCopy_3 end ] stop
 */

	
	/**
	 * [tFileCopy_7 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_7";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tFileCopy_7", true);
end_Hash.put("tFileCopy_7", System.currentTimeMillis());




/**
 * [tFileCopy_7 end ] stop
 */

	
	/**
	 * [tFileCopy_8 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_8";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tFileCopy_8", true);
end_Hash.put("tFileCopy_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFileList_3Process(globalMap);



/**
 * [tFileCopy_8 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */

	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */

	
	/**
	 * [tSleep_1 finally ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 finally ] stop
 */

	
	/**
	 * [tFileCopy_2 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 



/**
 * [tFileCopy_2 finally ] stop
 */

	
	/**
	 * [tFileCopy_3 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_3";

	

 



/**
 * [tFileCopy_3 finally ] stop
 */

	
	/**
	 * [tFileCopy_7 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_7";

	

 



/**
 * [tFileCopy_7 finally ] stop
 */

	
	/**
	 * [tFileCopy_8 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_8";

	

 



/**
 * [tFileCopy_8 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_3 begin ] start
	 */

				
			int NB_ITERATE_tFileCopy_13 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_3", false);
		start_Hash.put("tFileList_3", System.currentTimeMillis());
		
	
	currentComponent="tFileList_3";

	
		int tos_count_tFileList_3 = 0;
		
	
 
     
    
  String directory_tFileList_3 = context.ExtractPathOTHER;
  final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_3 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_3.add("*.xlsx");  
  for (final String filemask_tFileList_3 : maskList_tFileList_3) {
	String filemask_compile_tFileList_3 = filemask_tFileList_3;
	
		filemask_compile_tFileList_3 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_3.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern.compile(filemask_compile_tFileList_3);
	patternList_tFileList_3.add(fileNamePattern_tFileList_3);
  }
  int NB_FILEtFileList_3 = 0;

  final boolean case_sensitive_tFileList_3 = true;
    final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_3 = new java.util.HashSet<String>();
	java.io.File file_tFileList_3 = new java.io.File(directory_tFileList_3);
     
		file_tFileList_3.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_3 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_3 : patternList_tFileList_3) {
          	if (fileNamePattern_tFileList_3.matcher(fileName_tFileList_3).matches()){
					if(!filePath_tFileList_3.contains(file.getAbsolutePath())) {
			          list_tFileList_3.add(file);
			          filePath_tFileList_3.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_3);
    
    for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3.size(); i_tFileList_3++){
      java.io.File files_tFileList_3 = list_tFileList_3.get(i_tFileList_3);
      String fileName_tFileList_3 = files_tFileList_3.getName();
      
      String currentFileName_tFileList_3 = files_tFileList_3.getName(); 
      String currentFilePath_tFileList_3 = files_tFileList_3.getAbsolutePath();
      String currentFileDirectory_tFileList_3 = files_tFileList_3.getParent();
      String currentFileExtension_tFileList_3 = null;
      
      if (files_tFileList_3.getName().contains(".") && files_tFileList_3.isFile()){
        currentFileExtension_tFileList_3 = files_tFileList_3.getName().substring(files_tFileList_3.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_3 = "";
      }
      
      NB_FILEtFileList_3 ++;
      globalMap.put("tFileList_3_CURRENT_FILE", currentFileName_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEPATH", currentFilePath_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_3);
      globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
      
 



/**
 * [tFileList_3 begin ] stop
 */
	
	/**
	 * [tFileList_3 main ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 


	tos_count_tFileList_3++;

/**
 * [tFileList_3 main ] stop
 */
	
	/**
	 * [tFileList_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_begin ] stop
 */
	NB_ITERATE_tFileCopy_13++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tFileCopy_13);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileCopy_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_13", false);
		start_Hash.put("tFileCopy_13", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_13";

	
		int tos_count_tFileCopy_13 = 0;
		

 



/**
 * [tFileCopy_13 begin ] stop
 */
	
	/**
	 * [tFileCopy_13 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_13";

	

 


        String srcFileName_tFileCopy_13 =  ((String)globalMap.get("tFileList_3_CURRENT_FILEPATH"));

		java.io.File srcFile_tFileCopy_13 = new java.io.File(srcFileName_tFileCopy_13);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_13.exists() || !srcFile_tFileCopy_13.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_13 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_13);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_13);
		}
        String desDirName_tFileCopy_13 = context.ExtractPathHBE;

		String desFileName_tFileCopy_13 =  srcFile_tFileCopy_13.getName() ;

		if (desFileName_tFileCopy_13 != null && ("").equals(desFileName_tFileCopy_13.trim())){
			desFileName_tFileCopy_13 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_13 = new java.io.File(desDirName_tFileCopy_13, desFileName_tFileCopy_13);

		if (!srcFile_tFileCopy_13.getPath().equals(desFile_tFileCopy_13.getPath())  ) {
				java.io.File parentFile_tFileCopy_13 = desFile_tFileCopy_13.getParentFile();

				if (parentFile_tFileCopy_13 != null && !parentFile_tFileCopy_13.exists()) {
					parentFile_tFileCopy_13.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_13.getPath(), desFile_tFileCopy_13.getPath(), false);
				} catch (Exception e) {
						System.err.println("tFileCopy_13 " + e.getMessage());
				}

		}
		globalMap.put("tFileCopy_13_DESTINATION_FILEPATH",desFile_tFileCopy_13.getPath()); 
		globalMap.put("tFileCopy_13_DESTINATION_FILENAME",desFile_tFileCopy_13.getName()); 

		globalMap.put("tFileCopy_13_SOURCE_DIRECTORY", srcFile_tFileCopy_13.getParent());
		globalMap.put("tFileCopy_13_DESTINATION_DIRECTORY", desFile_tFileCopy_13.getParent());        
        

 


	tos_count_tFileCopy_13++;

/**
 * [tFileCopy_13 main ] stop
 */
	
	/**
	 * [tFileCopy_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_13";

	

 



/**
 * [tFileCopy_13 process_data_begin ] stop
 */
	
	/**
	 * [tFileCopy_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_13";

	

 



/**
 * [tFileCopy_13 process_data_end ] stop
 */
	
	/**
	 * [tFileCopy_13 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_13";

	

 

ok_Hash.put("tFileCopy_13", true);
end_Hash.put("tFileCopy_13", System.currentTimeMillis());




/**
 * [tFileCopy_13 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tFileCopy_13);
						}				
					




	
	/**
	 * [tFileList_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_end ] stop
 */
	
	/**
	 * [tFileList_3 end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

  
    }
  globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
  

  
 

 

ok_Hash.put("tFileList_3", true);
end_Hash.put("tFileList_3", System.currentTimeMillis());




/**
 * [tFileList_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileArchive_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_3 finally ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 finally ] stop
 */

	
	/**
	 * [tFileCopy_13 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_13";

	

 



/**
 * [tFileCopy_13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";

	
		int tos_count_tFileArchive_1 = 0;
		

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

	

		String sourceFile_tFileArchive_1 = context.ExtractPathHBE;
	

    if (java.nio.file.Files.notExists(java.nio.file.Paths.get(sourceFile_tFileArchive_1), java.nio.file.LinkOption.NOFOLLOW_LINKS)){
        throw new java.io.FileNotFoundException(sourceFile_tFileArchive_1 + " (The system cannot find the path specified)");
    }

    String zipFile_tFileArchive_1 = context.ExtractPathHBE + "HBE1#MASTER FILE " +   globalMap.get("dateError")  + ".zip";
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(false);
	zip_tFileArchive_1.setCompressLevel(4);
	zip_tFileArchive_1.setArchiveFormat("zip");
	zip_tFileArchive_1.setAllFiles(true);
	
	
	   zip_tFileArchive_1.setContainSubDir(true);
	   zip_tFileArchive_1.setEncoding("ISO-8859-15");
	   zip_tFileArchive_1.setZip64Mode("ASNEEDED");
	   zip_tFileArchive_1.setEncrypted(false);
		        
	   
	    
	    
	final String decryptedPassword_tFileArchive_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[bqJY8vzqeG9UT+Dm6aTVJAP4pBFcDO9YrEh64A==]");
	    
	   zip_tFileArchive_1.setPassword(decryptedPassword_tFileArchive_1);
	   
	      zip_tFileArchive_1.setUseZip4jEncryption(true);
	      zip_tFileArchive_1.setEncryptionMethod(net.lingala.zip4j.util.Zip4jConstants.ENC_METHOD_STANDARD);
	      
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileArchive_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 process_data_end ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tFileCopy_1Process(globalMap);



/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileCopy_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileCopy_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_1", false);
		start_Hash.put("tFileCopy_1", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_1";

	
		int tos_count_tFileCopy_1 = 0;
		

 



/**
 * [tFileCopy_1 begin ] stop
 */
	
	/**
	 * [tFileCopy_1 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 


        String srcFileName_tFileCopy_1 = context.ExtractPathHBE +  "HBE1#MASTER FILE " +   globalMap.get("dateError")  + ".zip";

		java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
		}
        String desDirName_tFileCopy_1 = context.ExtractPathFinal;

		String desFileName_tFileCopy_1 =  srcFile_tFileCopy_1.getName() ;

		if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())){
			desFileName_tFileCopy_1 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1, desFileName_tFileCopy_1);

		if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())  ) {
				java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1.getParentFile();

				if (parentFile_tFileCopy_1 != null && !parentFile_tFileCopy_1.exists()) {
					parentFile_tFileCopy_1.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(), true);
				} catch (Exception e) {
						System.err.println("tFileCopy_1 " + e.getMessage());
				}
				java.io.File isRemoved_tFileCopy_1 = new java.io.File(context.ExtractPathHBE +  "HBE1#MASTER FILE " +   globalMap.get("dateError")  + ".zip");
				if(isRemoved_tFileCopy_1.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_1 = String.format("tFileCopy_1 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_1);
						System.err.println(errorMessageCouldNotRemoveFile_tFileCopy_1 + "\n");
				} 

		}
		globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",desFile_tFileCopy_1.getPath()); 
		globalMap.put("tFileCopy_1_DESTINATION_FILENAME",desFile_tFileCopy_1.getName()); 

		globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
		globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());        
        

 


	tos_count_tFileCopy_1++;

/**
 * [tFileCopy_1 main ] stop
 */
	
	/**
	 * [tFileCopy_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileCopy_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 process_data_end ] stop
 */
	
	/**
	 * [tFileCopy_1 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 

ok_Hash.put("tFileCopy_1", true);
end_Hash.put("tFileCopy_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFileList_5Process(globalMap);



/**
 * [tFileCopy_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_1 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_5 begin ] start
	 */

				
			int NB_ITERATE_tRunJob_8 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_5", false);
		start_Hash.put("tFileList_5", System.currentTimeMillis());
		
	
	currentComponent="tFileList_5";

	
		int tos_count_tFileList_5 = 0;
		
	
 
     
    
  String directory_tFileList_5 = context.ExtractPathPrice;
  final java.util.List<String> maskList_tFileList_5 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_5 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_5.add("*.*");  
  for (final String filemask_tFileList_5 : maskList_tFileList_5) {
	String filemask_compile_tFileList_5 = filemask_tFileList_5;
	
		filemask_compile_tFileList_5 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_5.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_5 = java.util.regex.Pattern.compile(filemask_compile_tFileList_5);
	patternList_tFileList_5.add(fileNamePattern_tFileList_5);
  }
  int NB_FILEtFileList_5 = 0;

  final boolean case_sensitive_tFileList_5 = true;
    final java.util.List<java.io.File> list_tFileList_5 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_5 = new java.util.HashSet<String>();
	java.io.File file_tFileList_5 = new java.io.File(directory_tFileList_5);
     
		file_tFileList_5.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_5 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_5 : patternList_tFileList_5) {
          	if (fileNamePattern_tFileList_5.matcher(fileName_tFileList_5).matches()){
					if(!filePath_tFileList_5.contains(file.getAbsolutePath())) {
			          list_tFileList_5.add(file);
			          filePath_tFileList_5.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_5);
    
    for (int i_tFileList_5 = 0; i_tFileList_5 < list_tFileList_5.size(); i_tFileList_5++){
      java.io.File files_tFileList_5 = list_tFileList_5.get(i_tFileList_5);
      String fileName_tFileList_5 = files_tFileList_5.getName();
      
      String currentFileName_tFileList_5 = files_tFileList_5.getName(); 
      String currentFilePath_tFileList_5 = files_tFileList_5.getAbsolutePath();
      String currentFileDirectory_tFileList_5 = files_tFileList_5.getParent();
      String currentFileExtension_tFileList_5 = null;
      
      if (files_tFileList_5.getName().contains(".") && files_tFileList_5.isFile()){
        currentFileExtension_tFileList_5 = files_tFileList_5.getName().substring(files_tFileList_5.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_5 = "";
      }
      
      NB_FILEtFileList_5 ++;
      globalMap.put("tFileList_5_CURRENT_FILE", currentFileName_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEPATH", currentFilePath_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_5);
      globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
      
 



/**
 * [tFileList_5 begin ] stop
 */
	
	/**
	 * [tFileList_5 main ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 


	tos_count_tFileList_5++;

/**
 * [tFileList_5 main ] stop
 */
	
	/**
	 * [tFileList_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 process_data_begin ] stop
 */
	NB_ITERATE_tRunJob_8++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate7", 1, "exec" + NB_ITERATE_tRunJob_8);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tRunJob_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_8", false);
		start_Hash.put("tRunJob_8", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_8";

	
		int tos_count_tRunJob_8 = 0;
		


 



/**
 * [tRunJob_8 begin ] stop
 */
	
	/**
	 * [tRunJob_8 main ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	
	java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_8.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_8.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_8.add("--father_node=tRunJob_8");
	      			
	        			paraList_tRunJob_8.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_8.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_8.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_8.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_8 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_8 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_8".equals(tRunJobName_tRunJob_8) && childResumePath_tRunJob_8 != null){
		paraList_tRunJob_8.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_8");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_8 = null;

	
		obj_tRunJob_8 = ((String)globalMap.get("tFileList_5_CURRENT_FILEDIRECTORY")) + "/";
		if(obj_tRunJob_8!=null) {
			paraList_tRunJob_8.add("--context_param Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
		} else {
			paraList_tRunJob_8.add("--context_param Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("Path", obj_tRunJob_8);
	
		obj_tRunJob_8 = ((String)globalMap.get("tFileList_5_CURRENT_FILE"));
		if(obj_tRunJob_8!=null) {
			paraList_tRunJob_8.add("--context_param File=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
		} else {
			paraList_tRunJob_8.add("--context_param File=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("File", obj_tRunJob_8);
	
		obj_tRunJob_8 = "/haddadtestfs/test/SIT-DataMig/HBE1/TtoD365_122_BUYPriceImport%20BUY%20Price";
		if(obj_tRunJob_8!=null) {
			paraList_tRunJob_8.add("--context_param azureRepository=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
		} else {
			paraList_tRunJob_8.add("--context_param azureRepository=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("azureRepository", obj_tRunJob_8);
	
		obj_tRunJob_8 = "/test/SIT-DataMig/HBE1/TtoD365_122_BUYPriceImport%20BUY%20Price";
		if(obj_tRunJob_8!=null) {
			paraList_tRunJob_8.add("--context_param azureRepositoryURL=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
		} else {
			paraList_tRunJob_8.add("--context_param azureRepositoryURL=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_8.put("azureRepositoryURL", obj_tRunJob_8);
	
	
		dev.set_azure_storage_dynamics_0_1.SET_AZURE_STORAGE_DYNAMICS childJob_tRunJob_8 = new dev.set_azure_storage_dynamics_0_1.SET_AZURE_STORAGE_DYNAMICS();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_8) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
			        .entrySet()) {
	            dataSources_tRunJob_8.put(talendDataSourceEntry_tRunJob_8.getKey(),
	                    talendDataSourceEntry_tRunJob_8.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_8.setDataSources(dataSources_tRunJob_8);
	    }
		  
			childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;
		  
		
		String[][] childReturn_tRunJob_8 = childJob_tRunJob_8.runJob((String[]) paraList_tRunJob_8.toArray(new String[paraList_tRunJob_8.size()]));
		
	  	
				errorCode = childJob_tRunJob_8.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_8.getErrorCode() == null){
				globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getStatus() != null && ("failure").equals(childJob_tRunJob_8.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getErrorCode());
		    }
		    if (childJob_tRunJob_8.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_8.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_8.getErrorCode() != null || ("failure").equals(childJob_tRunJob_8.getStatus())) {
					java.lang.Exception ce_tRunJob_8 = childJob_tRunJob_8.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_8!=null) ? (ce_tRunJob_8.getClass().getName() + ": " + ce_tRunJob_8.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_8++;

/**
 * [tRunJob_8 main ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_8 end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 

ok_Hash.put("tRunJob_8", true);
end_Hash.put("tRunJob_8", System.currentTimeMillis());




/**
 * [tRunJob_8 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate7", 2, "exec" + NB_ITERATE_tRunJob_8);
						}				
					




	
	/**
	 * [tFileList_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 process_data_end ] stop
 */
	
	/**
	 * [tFileList_5 end ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

  
    }
  globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
  

  
 

 

ok_Hash.put("tFileList_5", true);
end_Hash.put("tFileList_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFileList_6Process(globalMap);



/**
 * [tFileList_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_5 finally ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 finally ] stop
 */

	
	/**
	 * [tRunJob_8 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_5_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_6 begin ] start
	 */

				
			int NB_ITERATE_tRunJob_9 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_6", false);
		start_Hash.put("tFileList_6", System.currentTimeMillis());
		
	
	currentComponent="tFileList_6";

	
		int tos_count_tFileList_6 = 0;
		
	
 
     
    
  String directory_tFileList_6 = context.ExtractPathPrice;
  final java.util.List<String> maskList_tFileList_6 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_6 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_6.add("*RRP_EUR*.*"); 
    maskList_tFileList_6.add("*WSP_EUR*.*");  
  for (final String filemask_tFileList_6 : maskList_tFileList_6) {
	String filemask_compile_tFileList_6 = filemask_tFileList_6;
	
		filemask_compile_tFileList_6 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_6.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_6 = java.util.regex.Pattern.compile(filemask_compile_tFileList_6);
	patternList_tFileList_6.add(fileNamePattern_tFileList_6);
  }
  int NB_FILEtFileList_6 = 0;

  final boolean case_sensitive_tFileList_6 = true;
    final java.util.List<java.io.File> list_tFileList_6 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_6 = new java.util.HashSet<String>();
	java.io.File file_tFileList_6 = new java.io.File(directory_tFileList_6);
     
		file_tFileList_6.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_6 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_6 : patternList_tFileList_6) {
          	if (fileNamePattern_tFileList_6.matcher(fileName_tFileList_6).matches()){
					if(!filePath_tFileList_6.contains(file.getAbsolutePath())) {
			          list_tFileList_6.add(file);
			          filePath_tFileList_6.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_6);
    
    for (int i_tFileList_6 = 0; i_tFileList_6 < list_tFileList_6.size(); i_tFileList_6++){
      java.io.File files_tFileList_6 = list_tFileList_6.get(i_tFileList_6);
      String fileName_tFileList_6 = files_tFileList_6.getName();
      
      String currentFileName_tFileList_6 = files_tFileList_6.getName(); 
      String currentFilePath_tFileList_6 = files_tFileList_6.getAbsolutePath();
      String currentFileDirectory_tFileList_6 = files_tFileList_6.getParent();
      String currentFileExtension_tFileList_6 = null;
      
      if (files_tFileList_6.getName().contains(".") && files_tFileList_6.isFile()){
        currentFileExtension_tFileList_6 = files_tFileList_6.getName().substring(files_tFileList_6.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_6 = "";
      }
      
      NB_FILEtFileList_6 ++;
      globalMap.put("tFileList_6_CURRENT_FILE", currentFileName_tFileList_6);
      globalMap.put("tFileList_6_CURRENT_FILEPATH", currentFilePath_tFileList_6);
      globalMap.put("tFileList_6_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_6);
      globalMap.put("tFileList_6_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_6);
      globalMap.put("tFileList_6_NB_FILE", NB_FILEtFileList_6);
      
 



/**
 * [tFileList_6 begin ] stop
 */
	
	/**
	 * [tFileList_6 main ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 


	tos_count_tFileList_6++;

/**
 * [tFileList_6 main ] stop
 */
	
	/**
	 * [tFileList_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 



/**
 * [tFileList_6 process_data_begin ] stop
 */
	NB_ITERATE_tRunJob_9++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate8", 1, "exec" + NB_ITERATE_tRunJob_9);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tRunJob_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_9", false);
		start_Hash.put("tRunJob_9", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_9";

	
		int tos_count_tRunJob_9 = 0;
		


 



/**
 * [tRunJob_9 begin ] stop
 */
	
	/**
	 * [tRunJob_9 main ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	
	java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_9.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_9.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_9.add("--father_node=tRunJob_9");
	      			
	        			paraList_tRunJob_9.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_9.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_9.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_9.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_9 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_9 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_9".equals(tRunJobName_tRunJob_9) && childResumePath_tRunJob_9 != null){
		paraList_tRunJob_9.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_9");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_9 = null;

	
		obj_tRunJob_9 = ((String)globalMap.get("tFileList_6_CURRENT_FILEDIRECTORY")) + "/";
		if(obj_tRunJob_9!=null) {
			paraList_tRunJob_9.add("--context_param Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
		} else {
			paraList_tRunJob_9.add("--context_param Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("Path", obj_tRunJob_9);
	
		obj_tRunJob_9 = ((String)globalMap.get("tFileList_6_CURRENT_FILE"));
		if(obj_tRunJob_9!=null) {
			paraList_tRunJob_9.add("--context_param File=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
		} else {
			paraList_tRunJob_9.add("--context_param File=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("File", obj_tRunJob_9);
	
		obj_tRunJob_9 = "/haddadtestfs/test/SIT-DataMig/HBB1/TtoD365_122_BUYPriceImport%20BUY%20Price";
		if(obj_tRunJob_9!=null) {
			paraList_tRunJob_9.add("--context_param azureRepository=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
		} else {
			paraList_tRunJob_9.add("--context_param azureRepository=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("azureRepository", obj_tRunJob_9);
	
		obj_tRunJob_9 = "/test/SIT-DataMig/HBB1/TtoD365_122_BUYPriceImport%20BUY%20Price";
		if(obj_tRunJob_9!=null) {
			paraList_tRunJob_9.add("--context_param azureRepositoryURL=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
		} else {
			paraList_tRunJob_9.add("--context_param azureRepositoryURL=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_9.put("azureRepositoryURL", obj_tRunJob_9);
	
	
		dev.set_azure_storage_dynamics_0_1.SET_AZURE_STORAGE_DYNAMICS childJob_tRunJob_9 = new dev.set_azure_storage_dynamics_0_1.SET_AZURE_STORAGE_DYNAMICS();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_9) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
			        .entrySet()) {
	            dataSources_tRunJob_9.put(talendDataSourceEntry_tRunJob_9.getKey(),
	                    talendDataSourceEntry_tRunJob_9.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_9.setDataSources(dataSources_tRunJob_9);
	    }
		  
			childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;
		  
		
		String[][] childReturn_tRunJob_9 = childJob_tRunJob_9.runJob((String[]) paraList_tRunJob_9.toArray(new String[paraList_tRunJob_9.size()]));
		
	  	
				errorCode = childJob_tRunJob_9.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_9.getErrorCode() == null){
				globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getStatus() != null && ("failure").equals(childJob_tRunJob_9.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getErrorCode());
		    }
		    if (childJob_tRunJob_9.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_9.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_9.getErrorCode() != null || ("failure").equals(childJob_tRunJob_9.getStatus())) {
					java.lang.Exception ce_tRunJob_9 = childJob_tRunJob_9.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_9!=null) ? (ce_tRunJob_9.getClass().getName() + ": " + ce_tRunJob_9.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_9++;

/**
 * [tRunJob_9 main ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_9 end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 

ok_Hash.put("tRunJob_9", true);
end_Hash.put("tRunJob_9", System.currentTimeMillis());




/**
 * [tRunJob_9 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate8", 2, "exec" + NB_ITERATE_tRunJob_9);
						}				
					




	
	/**
	 * [tFileList_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 



/**
 * [tFileList_6 process_data_end ] stop
 */
	
	/**
	 * [tFileList_6 end ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

  
    }
  globalMap.put("tFileList_6_NB_FILE", NB_FILEtFileList_6);
  

  
 

 

ok_Hash.put("tFileList_6", true);
end_Hash.put("tFileList_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tFileList_7Process(globalMap);



/**
 * [tFileList_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_6 finally ] start
	 */

	

	
	
	currentComponent="tFileList_6";

	

 



/**
 * [tFileList_6 finally ] stop
 */

	
	/**
	 * [tRunJob_9 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_6_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_7 begin ] start
	 */

				
			int NB_ITERATE_tRunJob_10 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_7", false);
		start_Hash.put("tFileList_7", System.currentTimeMillis());
		
	
	currentComponent="tFileList_7";

	
		int tos_count_tFileList_7 = 0;
		
	
 
     
    
  String directory_tFileList_7 = context.ExtractPathPrice;
  final java.util.List<String> maskList_tFileList_7 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_7 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_7.add("*RRP_EUR*.*"); 
    maskList_tFileList_7.add("*WSP_EUR*.*");  
  for (final String filemask_tFileList_7 : maskList_tFileList_7) {
	String filemask_compile_tFileList_7 = filemask_tFileList_7;
	
		filemask_compile_tFileList_7 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_7.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_7 = java.util.regex.Pattern.compile(filemask_compile_tFileList_7);
	patternList_tFileList_7.add(fileNamePattern_tFileList_7);
  }
  int NB_FILEtFileList_7 = 0;

  final boolean case_sensitive_tFileList_7 = true;
    final java.util.List<java.io.File> list_tFileList_7 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_7 = new java.util.HashSet<String>();
	java.io.File file_tFileList_7 = new java.io.File(directory_tFileList_7);
     
		file_tFileList_7.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_7 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_7 : patternList_tFileList_7) {
          	if (fileNamePattern_tFileList_7.matcher(fileName_tFileList_7).matches()){
					if(!filePath_tFileList_7.contains(file.getAbsolutePath())) {
			          list_tFileList_7.add(file);
			          filePath_tFileList_7.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_7);
    
    for (int i_tFileList_7 = 0; i_tFileList_7 < list_tFileList_7.size(); i_tFileList_7++){
      java.io.File files_tFileList_7 = list_tFileList_7.get(i_tFileList_7);
      String fileName_tFileList_7 = files_tFileList_7.getName();
      
      String currentFileName_tFileList_7 = files_tFileList_7.getName(); 
      String currentFilePath_tFileList_7 = files_tFileList_7.getAbsolutePath();
      String currentFileDirectory_tFileList_7 = files_tFileList_7.getParent();
      String currentFileExtension_tFileList_7 = null;
      
      if (files_tFileList_7.getName().contains(".") && files_tFileList_7.isFile()){
        currentFileExtension_tFileList_7 = files_tFileList_7.getName().substring(files_tFileList_7.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_7 = "";
      }
      
      NB_FILEtFileList_7 ++;
      globalMap.put("tFileList_7_CURRENT_FILE", currentFileName_tFileList_7);
      globalMap.put("tFileList_7_CURRENT_FILEPATH", currentFilePath_tFileList_7);
      globalMap.put("tFileList_7_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_7);
      globalMap.put("tFileList_7_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_7);
      globalMap.put("tFileList_7_NB_FILE", NB_FILEtFileList_7);
      
 



/**
 * [tFileList_7 begin ] stop
 */
	
	/**
	 * [tFileList_7 main ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 


	tos_count_tFileList_7++;

/**
 * [tFileList_7 main ] stop
 */
	
	/**
	 * [tFileList_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 



/**
 * [tFileList_7 process_data_begin ] stop
 */
	NB_ITERATE_tRunJob_10++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate9", 1, "exec" + NB_ITERATE_tRunJob_10);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tRunJob_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_10", false);
		start_Hash.put("tRunJob_10", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_10";

	
		int tos_count_tRunJob_10 = 0;
		


 



/**
 * [tRunJob_10 begin ] stop
 */
	
	/**
	 * [tRunJob_10 main ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	
	java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_10.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_10.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_10.add("--father_node=tRunJob_10");
	      			
	        			paraList_tRunJob_10.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_10.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_10.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null){
		paraList_tRunJob_10.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_10 = null;

	
		obj_tRunJob_10 = ((String)globalMap.get("tFileList_7_CURRENT_FILEDIRECTORY")) + "/";
		if(obj_tRunJob_10!=null) {
			paraList_tRunJob_10.add("--context_param Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
		} else {
			paraList_tRunJob_10.add("--context_param Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("Path", obj_tRunJob_10);
	
		obj_tRunJob_10 = ((String)globalMap.get("tFileList_7_CURRENT_FILE"));
		if(obj_tRunJob_10!=null) {
			paraList_tRunJob_10.add("--context_param File=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
		} else {
			paraList_tRunJob_10.add("--context_param File=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("File", obj_tRunJob_10);
	
		obj_tRunJob_10 = "/haddadtestfs/test/SIT-DataMig/HBP1/TtoD365_122_BUYPriceImport%20BUY%20Price";
		if(obj_tRunJob_10!=null) {
			paraList_tRunJob_10.add("--context_param azureRepository=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
		} else {
			paraList_tRunJob_10.add("--context_param azureRepository=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("azureRepository", obj_tRunJob_10);
	
		obj_tRunJob_10 = "/test/SIT-DataMig/HBP1/TtoD365_122_BUYPriceImport%20BUY%20Price";
		if(obj_tRunJob_10!=null) {
			paraList_tRunJob_10.add("--context_param azureRepositoryURL=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
		} else {
			paraList_tRunJob_10.add("--context_param azureRepositoryURL=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_10.put("azureRepositoryURL", obj_tRunJob_10);
	
	
		dev.set_azure_storage_dynamics_0_1.SET_AZURE_STORAGE_DYNAMICS childJob_tRunJob_10 = new dev.set_azure_storage_dynamics_0_1.SET_AZURE_STORAGE_DYNAMICS();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_10) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
			        .entrySet()) {
	            dataSources_tRunJob_10.put(talendDataSourceEntry_tRunJob_10.getKey(),
	                    talendDataSourceEntry_tRunJob_10.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
	    }
		  
			childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;
		  
		
		String[][] childReturn_tRunJob_10 = childJob_tRunJob_10.runJob((String[]) paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));
		
	  	
				errorCode = childJob_tRunJob_10.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_10.getErrorCode() == null){
				globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getStatus() != null && ("failure").equals(childJob_tRunJob_10.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getErrorCode());
		    }
		    if (childJob_tRunJob_10.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_10.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_10.getErrorCode() != null || ("failure").equals(childJob_tRunJob_10.getStatus())) {
					java.lang.Exception ce_tRunJob_10 = childJob_tRunJob_10.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_10!=null) ? (ce_tRunJob_10.getClass().getName() + ": " + ce_tRunJob_10.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_10++;

/**
 * [tRunJob_10 main ] stop
 */
	
	/**
	 * [tRunJob_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_10 end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 

ok_Hash.put("tRunJob_10", true);
end_Hash.put("tRunJob_10", System.currentTimeMillis());




/**
 * [tRunJob_10 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate9", 2, "exec" + NB_ITERATE_tRunJob_10);
						}				
					




	
	/**
	 * [tFileList_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 



/**
 * [tFileList_7 process_data_end ] stop
 */
	
	/**
	 * [tFileList_7 end ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

  
    }
  globalMap.put("tFileList_7_NB_FILE", NB_FILEtFileList_7);
  

  
 

 

ok_Hash.put("tFileList_7", true);
end_Hash.put("tFileList_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tFileList_8Process(globalMap);



/**
 * [tFileList_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_7 finally ] start
	 */

	

	
	
	currentComponent="tFileList_7";

	

 



/**
 * [tFileList_7 finally ] stop
 */

	
	/**
	 * [tRunJob_10 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_7_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_8 begin ] start
	 */

				
			int NB_ITERATE_tRunJob_11 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_8", false);
		start_Hash.put("tFileList_8", System.currentTimeMillis());
		
	
	currentComponent="tFileList_8";

	
		int tos_count_tFileList_8 = 0;
		
	
 
     
    
  String directory_tFileList_8 = context.ExtractPathPrice;
  final java.util.List<String> maskList_tFileList_8 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_8 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_8.add("*RRP_EUR*.*"); 
    maskList_tFileList_8.add("*WSP_EUR*.*");  
  for (final String filemask_tFileList_8 : maskList_tFileList_8) {
	String filemask_compile_tFileList_8 = filemask_tFileList_8;
	
		filemask_compile_tFileList_8 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_8.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_8 = java.util.regex.Pattern.compile(filemask_compile_tFileList_8);
	patternList_tFileList_8.add(fileNamePattern_tFileList_8);
  }
  int NB_FILEtFileList_8 = 0;

  final boolean case_sensitive_tFileList_8 = true;
    final java.util.List<java.io.File> list_tFileList_8 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_8 = new java.util.HashSet<String>();
	java.io.File file_tFileList_8 = new java.io.File(directory_tFileList_8);
     
		file_tFileList_8.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_8 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_8 : patternList_tFileList_8) {
          	if (fileNamePattern_tFileList_8.matcher(fileName_tFileList_8).matches()){
					if(!filePath_tFileList_8.contains(file.getAbsolutePath())) {
			          list_tFileList_8.add(file);
			          filePath_tFileList_8.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_8);
    
    for (int i_tFileList_8 = 0; i_tFileList_8 < list_tFileList_8.size(); i_tFileList_8++){
      java.io.File files_tFileList_8 = list_tFileList_8.get(i_tFileList_8);
      String fileName_tFileList_8 = files_tFileList_8.getName();
      
      String currentFileName_tFileList_8 = files_tFileList_8.getName(); 
      String currentFilePath_tFileList_8 = files_tFileList_8.getAbsolutePath();
      String currentFileDirectory_tFileList_8 = files_tFileList_8.getParent();
      String currentFileExtension_tFileList_8 = null;
      
      if (files_tFileList_8.getName().contains(".") && files_tFileList_8.isFile()){
        currentFileExtension_tFileList_8 = files_tFileList_8.getName().substring(files_tFileList_8.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_8 = "";
      }
      
      NB_FILEtFileList_8 ++;
      globalMap.put("tFileList_8_CURRENT_FILE", currentFileName_tFileList_8);
      globalMap.put("tFileList_8_CURRENT_FILEPATH", currentFilePath_tFileList_8);
      globalMap.put("tFileList_8_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_8);
      globalMap.put("tFileList_8_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_8);
      globalMap.put("tFileList_8_NB_FILE", NB_FILEtFileList_8);
      
 



/**
 * [tFileList_8 begin ] stop
 */
	
	/**
	 * [tFileList_8 main ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 


	tos_count_tFileList_8++;

/**
 * [tFileList_8 main ] stop
 */
	
	/**
	 * [tFileList_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 



/**
 * [tFileList_8 process_data_begin ] stop
 */
	NB_ITERATE_tRunJob_11++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate10", 1, "exec" + NB_ITERATE_tRunJob_11);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tRunJob_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_11", false);
		start_Hash.put("tRunJob_11", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_11";

	
		int tos_count_tRunJob_11 = 0;
		


 



/**
 * [tRunJob_11 begin ] stop
 */
	
	/**
	 * [tRunJob_11 main ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	
	java.util.List<String> paraList_tRunJob_11 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_11.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_11.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_11.add("--father_node=tRunJob_11");
	      			
	        			paraList_tRunJob_11.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_11.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_11.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_11.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_11 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_11 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_11".equals(tRunJobName_tRunJob_11) && childResumePath_tRunJob_11 != null){
		paraList_tRunJob_11.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_11.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_11");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_11 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_11 = null;

	
		obj_tRunJob_11 = ((String)globalMap.get("tFileList_8_CURRENT_FILEDIRECTORY")) + "/";
		if(obj_tRunJob_11!=null) {
			paraList_tRunJob_11.add("--context_param Path=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
		} else {
			paraList_tRunJob_11.add("--context_param Path=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_11.put("Path", obj_tRunJob_11);
	
		obj_tRunJob_11 = ((String)globalMap.get("tFileList_8_CURRENT_FILE"));
		if(obj_tRunJob_11!=null) {
			paraList_tRunJob_11.add("--context_param File=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
		} else {
			paraList_tRunJob_11.add("--context_param File=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_11.put("File", obj_tRunJob_11);
	
		obj_tRunJob_11 = "/haddadtestfs/test/SIT-DataMig/HBS1/TtoD365_122_BUYPriceImport%20BUY%20Price";
		if(obj_tRunJob_11!=null) {
			paraList_tRunJob_11.add("--context_param azureRepository=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
		} else {
			paraList_tRunJob_11.add("--context_param azureRepository=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_11.put("azureRepository", obj_tRunJob_11);
	
		obj_tRunJob_11 = "/test/SIT-DataMig/HBS1/TtoD365_122_BUYPriceImport%20BUY%20Price";
		if(obj_tRunJob_11!=null) {
			paraList_tRunJob_11.add("--context_param azureRepositoryURL=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
		} else {
			paraList_tRunJob_11.add("--context_param azureRepositoryURL=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_11.put("azureRepositoryURL", obj_tRunJob_11);
	
	
		dev.set_azure_storage_dynamics_0_1.SET_AZURE_STORAGE_DYNAMICS childJob_tRunJob_11 = new dev.set_azure_storage_dynamics_0_1.SET_AZURE_STORAGE_DYNAMICS();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_11 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_11) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_11 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_11 : talendDataSources_tRunJob_11
			        .entrySet()) {
	            dataSources_tRunJob_11.put(talendDataSourceEntry_tRunJob_11.getKey(),
	                    talendDataSourceEntry_tRunJob_11.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_11.setDataSources(dataSources_tRunJob_11);
	    }
		  
			childJob_tRunJob_11.parentContextMap = parentContextMap_tRunJob_11;
		  
		
		String[][] childReturn_tRunJob_11 = childJob_tRunJob_11.runJob((String[]) paraList_tRunJob_11.toArray(new String[paraList_tRunJob_11.size()]));
		
	  	
				errorCode = childJob_tRunJob_11.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_11.getErrorCode() == null){
				globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getStatus() != null && ("failure").equals(childJob_tRunJob_11.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getErrorCode());
		    }
		    if (childJob_tRunJob_11.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_11_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_11.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_11.getErrorCode() != null || ("failure").equals(childJob_tRunJob_11.getStatus())) {
					java.lang.Exception ce_tRunJob_11 = childJob_tRunJob_11.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_11!=null) ? (ce_tRunJob_11.getClass().getName() + ": " + ce_tRunJob_11.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_11++;

/**
 * [tRunJob_11 main ] stop
 */
	
	/**
	 * [tRunJob_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_11 end ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 

ok_Hash.put("tRunJob_11", true);
end_Hash.put("tRunJob_11", System.currentTimeMillis());




/**
 * [tRunJob_11 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate10", 2, "exec" + NB_ITERATE_tRunJob_11);
						}				
					




	
	/**
	 * [tFileList_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 



/**
 * [tFileList_8 process_data_end ] stop
 */
	
	/**
	 * [tFileList_8 end ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

  
    }
  globalMap.put("tFileList_8_NB_FILE", NB_FILEtFileList_8);
  

  
 

 

ok_Hash.put("tFileList_8", true);
end_Hash.put("tFileList_8", System.currentTimeMillis());




/**
 * [tFileList_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileList_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_8 finally ] start
	 */

	

	
	
	currentComponent="tFileList_8";

	

 



/**
 * [tFileList_8 finally ] stop
 */

	
	/**
	 * [tRunJob_11 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_8_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";

	
		int tos_count_tFileList_2 = 0;
		
	
 
     
    
  String directory_tFileList_2 = context.ExtractPathPrice;
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_2.add("*.*");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2);
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = true;
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
     
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	
	/**
	 * [tFileList_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_begin ] stop
 */
	NB_ITERATE_tFileDelete_3++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tFileDelete_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_3", false);
		start_Hash.put("tFileDelete_3", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_3";

	
		int tos_count_tFileDelete_3 = 0;
		

 



/**
 * [tFileDelete_3 begin ] stop
 */
	
	/**
	 * [tFileDelete_3 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 

class DeleteFoldertFileDelete_3{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_3=new java.io.File(((String)globalMap.get("tFileList_2_CURRENT_FILEPATH")));
    if(file_tFileDelete_3.exists()&& file_tFileDelete_3.isFile()){
    	if(file_tFileDelete_3.delete()){
    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_3_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_3.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_3.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_3_DELETE_PATH",((String)globalMap.get("tFileList_2_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_3++;

/**
 * [tFileDelete_3 main ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_3 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 

ok_Hash.put("tFileDelete_3", true);
end_Hash.put("tFileDelete_3", System.currentTimeMillis());




/**
 * [tFileDelete_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tFileDelete_3);
						}				
					




	
	/**
	 * [tFileList_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_end ] stop
 */
	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());




/**
 * [tFileList_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileList_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tFileDelete_3 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = context.ExtractPathHBE;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("*.*");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileDelete_2++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileDelete_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";

	
		int tos_count_tFileDelete_2 = 0;
		

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileDelete_2);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFileList_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_4 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_4 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_4", false);
		start_Hash.put("tFileList_4", System.currentTimeMillis());
		
	
	currentComponent="tFileList_4";

	
		int tos_count_tFileList_4 = 0;
		
	
 
     
    
  String directory_tFileList_4 = context.ExtractPathOTHER;
  final java.util.List<String> maskList_tFileList_4 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_4 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_4.add("*.*");  
  for (final String filemask_tFileList_4 : maskList_tFileList_4) {
	String filemask_compile_tFileList_4 = filemask_tFileList_4;
	
		filemask_compile_tFileList_4 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_4.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_4 = java.util.regex.Pattern.compile(filemask_compile_tFileList_4);
	patternList_tFileList_4.add(fileNamePattern_tFileList_4);
  }
  int NB_FILEtFileList_4 = 0;

  final boolean case_sensitive_tFileList_4 = true;
    final java.util.List<java.io.File> list_tFileList_4 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_4 = new java.util.HashSet<String>();
	java.io.File file_tFileList_4 = new java.io.File(directory_tFileList_4);
     
		file_tFileList_4.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_4 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_4 : patternList_tFileList_4) {
          	if (fileNamePattern_tFileList_4.matcher(fileName_tFileList_4).matches()){
					if(!filePath_tFileList_4.contains(file.getAbsolutePath())) {
			          list_tFileList_4.add(file);
			          filePath_tFileList_4.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_4);
    
    for (int i_tFileList_4 = 0; i_tFileList_4 < list_tFileList_4.size(); i_tFileList_4++){
      java.io.File files_tFileList_4 = list_tFileList_4.get(i_tFileList_4);
      String fileName_tFileList_4 = files_tFileList_4.getName();
      
      String currentFileName_tFileList_4 = files_tFileList_4.getName(); 
      String currentFilePath_tFileList_4 = files_tFileList_4.getAbsolutePath();
      String currentFileDirectory_tFileList_4 = files_tFileList_4.getParent();
      String currentFileExtension_tFileList_4 = null;
      
      if (files_tFileList_4.getName().contains(".") && files_tFileList_4.isFile()){
        currentFileExtension_tFileList_4 = files_tFileList_4.getName().substring(files_tFileList_4.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_4 = "";
      }
      
      NB_FILEtFileList_4 ++;
      globalMap.put("tFileList_4_CURRENT_FILE", currentFileName_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEPATH", currentFilePath_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_4);
      globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
      
 



/**
 * [tFileList_4 begin ] stop
 */
	
	/**
	 * [tFileList_4 main ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 


	tos_count_tFileList_4++;

/**
 * [tFileList_4 main ] stop
 */
	
	/**
	 * [tFileList_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 process_data_begin ] stop
 */
	NB_ITERATE_tFileDelete_4++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate6", 1, "exec" + NB_ITERATE_tFileDelete_4);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_4", false);
		start_Hash.put("tFileDelete_4", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_4";

	
		int tos_count_tFileDelete_4 = 0;
		

 



/**
 * [tFileDelete_4 begin ] stop
 */
	
	/**
	 * [tFileDelete_4 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 

class DeleteFoldertFileDelete_4{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_4=new java.io.File(((String)globalMap.get("tFileList_4_CURRENT_FILEPATH")));
    if(file_tFileDelete_4.exists()&& file_tFileDelete_4.isFile()){
    	if(file_tFileDelete_4.delete()){
    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_4_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_4.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_4.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_4_DELETE_PATH",((String)globalMap.get("tFileList_4_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_4++;

/**
 * [tFileDelete_4 main ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 



/**
 * [tFileDelete_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 



/**
 * [tFileDelete_4 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_4 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 

ok_Hash.put("tFileDelete_4", true);
end_Hash.put("tFileDelete_4", System.currentTimeMillis());




/**
 * [tFileDelete_4 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate6", 2, "exec" + NB_ITERATE_tFileDelete_4);
						}				
					




	
	/**
	 * [tFileList_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 process_data_end ] stop
 */
	
	/**
	 * [tFileList_4 end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

  
    }
  globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
  

  
 

 

ok_Hash.put("tFileList_4", true);
end_Hash.put("tFileList_4", System.currentTimeMillis());




/**
 * [tFileList_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_4 finally ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 finally ] stop
 */

	
	/**
	 * [tFileDelete_4 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 



/**
 * [tFileDelete_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_4_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_INTEGRATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_INTEGRATION.length == 0) {
   					commonByteArray_DEV_BUY_INTEGRATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_INTEGRATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_INTEGRATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_INTEGRATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		

	int nb_line_tFixedFlowInput_1 = 0;
	List<row18Struct> cacheList_tFixedFlowInput_1 = new java.util.ArrayList<row18Struct>();
	row18 = new row18Struct();        	            	
	row18.newColumn = "TEST LOG";
	cacheList_tFixedFlowInput_1.add(row18);
	row18 = new row18Struct();        	            	
	row18.newColumn = "TEST LOG";
	cacheList_tFixedFlowInput_1.add(row18);
	for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 2 ; i_tFixedFlowInput_1++) {	
		for(row18Struct tmpRow_tFixedFlowInput_1 : cacheList_tFixedFlowInput_1){
			nb_line_tFixedFlowInput_1 ++;		
			row18 = tmpRow_tFixedFlowInput_1;
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row18.newColumn != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row18.newColumn)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

		}
	}
	cacheList_tFixedFlowInput_1.clear();
	globalMap.put("tFixedFlowInput_1_NB_LINE", nb_line_tFixedFlowInput_1);

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFileExist_4Process(globalMap);



/**
 * [tLogRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_4", false);
		start_Hash.put("tFileExist_4", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_4";

	
		int tos_count_tFileExist_4 = 0;
		

 



/**
 * [tFileExist_4 begin ] stop
 */
	
	/**
	 * [tFileExist_4 main ] start
	 */

	

	
	
	currentComponent="tFileExist_4";

	



java.io.File file_tFileExist_4 = new java.io.File(context.LogPath + ((String)globalMap.get("LogFile")));
if (!file_tFileExist_4.exists()) {
    globalMap.put("tFileExist_4_EXISTS",false);
}else{
	globalMap.put("tFileExist_4_EXISTS",true);
}

globalMap.put("tFileExist_4_FILENAME",context.LogPath + ((String)globalMap.get("LogFile")));


 


	tos_count_tFileExist_4++;

/**
 * [tFileExist_4 main ] stop
 */
	
	/**
	 * [tFileExist_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_4";

	

 



/**
 * [tFileExist_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_4";

	

 



/**
 * [tFileExist_4 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_4 end ] start
	 */

	

	
	
	currentComponent="tFileExist_4";

	

 

ok_Hash.put("tFileExist_4", true);
end_Hash.put("tFileExist_4", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_4_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If9", 0, "true");
					}
				
    			tRunJob_5Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If9", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_4 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_4";

	

 



/**
 * [tFileExist_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_4_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_5", false);
		start_Hash.put("tRunJob_5", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_5";

	
		int tos_count_tRunJob_5 = 0;
		


 



/**
 * [tRunJob_5 begin ] stop
 */
	
	/**
	 * [tRunJob_5 main ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	
	java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_5.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_5.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_5.add("--father_node=tRunJob_5");
	      			
	        			paraList_tRunJob_5.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_5.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_5.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null){
		paraList_tRunJob_5.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_5 = null;

	
		obj_tRunJob_5 = context.emailErrorRecipient;
		if(obj_tRunJob_5!=null) {
			paraList_tRunJob_5.add("--context_param recipientEmail=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
		} else {
			paraList_tRunJob_5.add("--context_param recipientEmail=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("recipientEmail", obj_tRunJob_5);
	
		obj_tRunJob_5 = "Haddad - BUY INTERNAL ERROR";
		if(obj_tRunJob_5!=null) {
			paraList_tRunJob_5.add("--context_param subject=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
		} else {
			paraList_tRunJob_5.add("--context_param subject=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("subject", obj_tRunJob_5);
	
		obj_tRunJob_5 = "Please find internal error";
		if(obj_tRunJob_5!=null) {
			paraList_tRunJob_5.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
		} else {
			paraList_tRunJob_5.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("message", obj_tRunJob_5);
	
		obj_tRunJob_5 = context.LogPath + ((String)globalMap.get("LogFile"));
		if(obj_tRunJob_5!=null) {
			paraList_tRunJob_5.add("--context_param attachmentFile=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
		} else {
			paraList_tRunJob_5.add("--context_param attachmentFile=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("attachmentFile", obj_tRunJob_5);
	
		obj_tRunJob_5 = ((String)globalMap.get("tWaitForFile_1_FILENAME"));
		if(obj_tRunJob_5!=null) {
			paraList_tRunJob_5.add("--context_param excelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
		} else {
			paraList_tRunJob_5.add("--context_param excelFileName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("excelFileName", obj_tRunJob_5);
	
	
		dev.buy_send_email_0_1.BUY_SEND_EMAIL childJob_tRunJob_5 = new dev.buy_send_email_0_1.BUY_SEND_EMAIL();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_5) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
			        .entrySet()) {
	            dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
	                    talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
	    }
		  
			childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
		  
		
		String[][] childReturn_tRunJob_5 = childJob_tRunJob_5.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));
		
	  	
				errorCode = childJob_tRunJob_5.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_5.getErrorCode() == null){
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getStatus() != null && ("failure").equals(childJob_tRunJob_5.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
		    }
		    if (childJob_tRunJob_5.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_5.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_5.getErrorCode() != null || ("failure").equals(childJob_tRunJob_5.getStatus())) {
					java.lang.Exception ce_tRunJob_5 = childJob_tRunJob_5.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_5!=null) ? (ce_tRunJob_5.getClass().getName() + ": " + ce_tRunJob_5.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_5++;

/**
 * [tRunJob_5 main ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_5 end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 

ok_Hash.put("tRunJob_5", true);
end_Hash.put("tRunJob_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileExist_7Process(globalMap);



/**
 * [tRunJob_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_5 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_7", false);
		start_Hash.put("tFileExist_7", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_7";

	
		int tos_count_tFileExist_7 = 0;
		

 



/**
 * [tFileExist_7 begin ] stop
 */
	
	/**
	 * [tFileExist_7 main ] start
	 */

	

	
	
	currentComponent="tFileExist_7";

	



java.io.File file_tFileExist_7 = new java.io.File(context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
if (!file_tFileExist_7.exists()) {
    globalMap.put("tFileExist_7_EXISTS",false);
}else{
	globalMap.put("tFileExist_7_EXISTS",true);
}

globalMap.put("tFileExist_7_FILENAME",context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));


 


	tos_count_tFileExist_7++;

/**
 * [tFileExist_7 main ] stop
 */
	
	/**
	 * [tFileExist_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_7";

	

 



/**
 * [tFileExist_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_7";

	

 



/**
 * [tFileExist_7 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_7 end ] start
	 */

	

	
	
	currentComponent="tFileExist_7";

	

 

ok_Hash.put("tFileExist_7", true);
end_Hash.put("tFileExist_7", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_7_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If12", 0, "true");
					}
				
    			tFileCopy_9Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If12", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_7 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_7";

	

 



/**
 * [tFileExist_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_7_SUBPROCESS_STATE", 1);
	}
	

public void tFileCopy_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileCopy_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_9", false);
		start_Hash.put("tFileCopy_9", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_9";

	
		int tos_count_tFileCopy_9 = 0;
		

 



/**
 * [tFileCopy_9 begin ] stop
 */
	
	/**
	 * [tFileCopy_9 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_9";

	

 


        String srcFileName_tFileCopy_9 = context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME"));

		java.io.File srcFile_tFileCopy_9 = new java.io.File(srcFileName_tFileCopy_9);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_9.exists() || !srcFile_tFileCopy_9.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_9 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_9);
				throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_9);
		}
        String desDirName_tFileCopy_9 = context.LogPath;

		String desFileName_tFileCopy_9 =  globalMap.get("dateError")  + "_" + ((String)globalMap.get("tWaitForFile_1_FILENAME")) ;

		if (desFileName_tFileCopy_9 != null && ("").equals(desFileName_tFileCopy_9.trim())){
			desFileName_tFileCopy_9 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_9 = new java.io.File(desDirName_tFileCopy_9, desFileName_tFileCopy_9);

		if (!srcFile_tFileCopy_9.getPath().equals(desFile_tFileCopy_9.getPath())  ) {
				java.io.File parentFile_tFileCopy_9 = desFile_tFileCopy_9.getParentFile();

				if (parentFile_tFileCopy_9 != null && !parentFile_tFileCopy_9.exists()) {
					parentFile_tFileCopy_9.mkdirs();
				}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_9.getPath(), desFile_tFileCopy_9.getPath(), true);
				java.io.File isRemoved_tFileCopy_9 = new java.io.File(context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
				if(isRemoved_tFileCopy_9.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_9 = String.format("tFileCopy_9 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_9);
						throw new RuntimeException(errorMessageCouldNotRemoveFile_tFileCopy_9);
				} 

		}
		globalMap.put("tFileCopy_9_DESTINATION_FILEPATH",desFile_tFileCopy_9.getPath()); 
		globalMap.put("tFileCopy_9_DESTINATION_FILENAME",desFile_tFileCopy_9.getName()); 

		globalMap.put("tFileCopy_9_SOURCE_DIRECTORY", srcFile_tFileCopy_9.getParent());
		globalMap.put("tFileCopy_9_DESTINATION_DIRECTORY", desFile_tFileCopy_9.getParent());        
        

 


	tos_count_tFileCopy_9++;

/**
 * [tFileCopy_9 main ] stop
 */
	
	/**
	 * [tFileCopy_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_9";

	

 



/**
 * [tFileCopy_9 process_data_begin ] stop
 */
	
	/**
	 * [tFileCopy_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_9";

	

 



/**
 * [tFileCopy_9 process_data_end ] stop
 */
	
	/**
	 * [tFileCopy_9 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_9";

	

 

ok_Hash.put("tFileCopy_9", true);
end_Hash.put("tFileCopy_9", System.currentTimeMillis());




/**
 * [tFileCopy_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_9 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_9";

	

 



/**
 * [tFileCopy_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_9_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_6", false);
		start_Hash.put("tRunJob_6", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_6";

	
		int tos_count_tRunJob_6 = 0;
		


 



/**
 * [tRunJob_6 begin ] stop
 */
	
	/**
	 * [tRunJob_6 main ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	
	java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_6.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_6.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_6.add("--father_node=tRunJob_6");
	      			
	        			paraList_tRunJob_6.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_6.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_6.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null){
		paraList_tRunJob_6.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_6 = null;

	
		obj_tRunJob_6 = context.emailErrorRecipient;
		if(obj_tRunJob_6!=null) {
			paraList_tRunJob_6.add("--context_param recipientEmail=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
		} else {
			paraList_tRunJob_6.add("--context_param recipientEmail=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("recipientEmail", obj_tRunJob_6);
	
		obj_tRunJob_6 = "Haddad - BUY FILE ERROR";
		if(obj_tRunJob_6!=null) {
			paraList_tRunJob_6.add("--context_param subject=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
		} else {
			paraList_tRunJob_6.add("--context_param subject=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("subject", obj_tRunJob_6);
	
		obj_tRunJob_6 = "The file cannot be validated because the size is over 10 Mo";
		if(obj_tRunJob_6!=null) {
			paraList_tRunJob_6.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
		} else {
			paraList_tRunJob_6.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("message", obj_tRunJob_6);
	
		obj_tRunJob_6 = "";
		if(obj_tRunJob_6!=null) {
			paraList_tRunJob_6.add("--context_param attachmentFile=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
		} else {
			paraList_tRunJob_6.add("--context_param attachmentFile=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("attachmentFile", obj_tRunJob_6);
	
		obj_tRunJob_6 = ((String)globalMap.get("tWaitForFile_1_FILENAME"));
		if(obj_tRunJob_6!=null) {
			paraList_tRunJob_6.add("--context_param excelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
		} else {
			paraList_tRunJob_6.add("--context_param excelFileName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_6.put("excelFileName", obj_tRunJob_6);
	
	
		dev.buy_send_email_0_1.BUY_SEND_EMAIL childJob_tRunJob_6 = new dev.buy_send_email_0_1.BUY_SEND_EMAIL();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_6) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
			        .entrySet()) {
	            dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
	                    talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
	    }
		  
			childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;
		  
		
		String[][] childReturn_tRunJob_6 = childJob_tRunJob_6.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));
		
	  	
				errorCode = childJob_tRunJob_6.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_6.getErrorCode() == null){
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
		    }
		    if (childJob_tRunJob_6.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_6.getErrorCode() != null || ("failure").equals(childJob_tRunJob_6.getStatus())) {
					java.lang.Exception ce_tRunJob_6 = childJob_tRunJob_6.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_6!=null) ? (ce_tRunJob_6.getClass().getName() + ": " + ce_tRunJob_6.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_6++;

/**
 * [tRunJob_6 main ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_6 end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 

ok_Hash.put("tRunJob_6", true);
end_Hash.put("tRunJob_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tFileExist_6Process(globalMap);



/**
 * [tRunJob_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_6 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_6", false);
		start_Hash.put("tFileExist_6", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_6";

	
		int tos_count_tFileExist_6 = 0;
		

 



/**
 * [tFileExist_6 begin ] stop
 */
	
	/**
	 * [tFileExist_6 main ] start
	 */

	

	
	
	currentComponent="tFileExist_6";

	



java.io.File file_tFileExist_6 = new java.io.File(context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
if (!file_tFileExist_6.exists()) {
    globalMap.put("tFileExist_6_EXISTS",false);
}else{
	globalMap.put("tFileExist_6_EXISTS",true);
}

globalMap.put("tFileExist_6_FILENAME",context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));


 


	tos_count_tFileExist_6++;

/**
 * [tFileExist_6 main ] stop
 */
	
	/**
	 * [tFileExist_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_6";

	

 



/**
 * [tFileExist_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_6";

	

 



/**
 * [tFileExist_6 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_6 end ] start
	 */

	

	
	
	currentComponent="tFileExist_6";

	

 

ok_Hash.put("tFileExist_6", true);
end_Hash.put("tFileExist_6", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_6_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If14", 0, "true");
					}
				
    			tFileCopy_10Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If14", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_6 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_6";

	

 



/**
 * [tFileExist_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_6_SUBPROCESS_STATE", 1);
	}
	

public void tFileCopy_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileCopy_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_10", false);
		start_Hash.put("tFileCopy_10", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_10";

	
		int tos_count_tFileCopy_10 = 0;
		

 



/**
 * [tFileCopy_10 begin ] stop
 */
	
	/**
	 * [tFileCopy_10 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_10";

	

 


        String srcFileName_tFileCopy_10 = context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME"));

		java.io.File srcFile_tFileCopy_10 = new java.io.File(srcFileName_tFileCopy_10);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_10.exists() || !srcFile_tFileCopy_10.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_10 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_10);
				throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_10);
		}
        String desDirName_tFileCopy_10 = context.LogPath;

		String desFileName_tFileCopy_10 =  globalMap.get("dateError")  + "_" + ((String)globalMap.get("tWaitForFile_1_FILENAME")) ;

		if (desFileName_tFileCopy_10 != null && ("").equals(desFileName_tFileCopy_10.trim())){
			desFileName_tFileCopy_10 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_10 = new java.io.File(desDirName_tFileCopy_10, desFileName_tFileCopy_10);

		if (!srcFile_tFileCopy_10.getPath().equals(desFile_tFileCopy_10.getPath())  ) {
				java.io.File parentFile_tFileCopy_10 = desFile_tFileCopy_10.getParentFile();

				if (parentFile_tFileCopy_10 != null && !parentFile_tFileCopy_10.exists()) {
					parentFile_tFileCopy_10.mkdirs();
				}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_10.getPath(), desFile_tFileCopy_10.getPath(), true);
				java.io.File isRemoved_tFileCopy_10 = new java.io.File(context.IntegrationPath + ((String)globalMap.get("tWaitForFile_1_FILENAME")));
				if(isRemoved_tFileCopy_10.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_10 = String.format("tFileCopy_10 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_10);
						throw new RuntimeException(errorMessageCouldNotRemoveFile_tFileCopy_10);
				} 

		}
		globalMap.put("tFileCopy_10_DESTINATION_FILEPATH",desFile_tFileCopy_10.getPath()); 
		globalMap.put("tFileCopy_10_DESTINATION_FILENAME",desFile_tFileCopy_10.getName()); 

		globalMap.put("tFileCopy_10_SOURCE_DIRECTORY", srcFile_tFileCopy_10.getParent());
		globalMap.put("tFileCopy_10_DESTINATION_DIRECTORY", desFile_tFileCopy_10.getParent());        
        

 


	tos_count_tFileCopy_10++;

/**
 * [tFileCopy_10 main ] stop
 */
	
	/**
	 * [tFileCopy_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_10";

	

 



/**
 * [tFileCopy_10 process_data_begin ] stop
 */
	
	/**
	 * [tFileCopy_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_10";

	

 



/**
 * [tFileCopy_10 process_data_end ] stop
 */
	
	/**
	 * [tFileCopy_10 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_10";

	

 

ok_Hash.put("tFileCopy_10", true);
end_Hash.put("tFileCopy_10", System.currentTimeMillis());




/**
 * [tFileCopy_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_10 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_10";

	

 



/**
 * [tFileCopy_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_10_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_INTEGRATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_INTEGRATION = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_INTEGRATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_INTEGRATION.length == 0) {
   					commonByteArray_DEV_BUY_INTEGRATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_INTEGRATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_INTEGRATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_INTEGRATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_INTEGRATION) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_FILE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_FILE", false);
		start_Hash.put("talendLogs_FILE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_FILE = 0;
		

String fileName_talendLogs_FILE = "";
    fileName_talendLogs_FILE = (new java.io.File(context.LogPath+ "/" +((String)globalMap.get("LogFile")))).getAbsolutePath().replace("\\","/");
    String fullName_talendLogs_FILE = null;
    String extension_talendLogs_FILE = null;
    String directory_talendLogs_FILE = null;
    if((fileName_talendLogs_FILE.indexOf("/") != -1)) {
        if(fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE.lastIndexOf("/")) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        }
        directory_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("/"));
    } else {
        if(fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0, fileName_talendLogs_FILE.lastIndexOf("."));
            extension_talendLogs_FILE = fileName_talendLogs_FILE.substring(fileName_talendLogs_FILE.lastIndexOf("."));
        } else {
            fullName_talendLogs_FILE = fileName_talendLogs_FILE;
            extension_talendLogs_FILE = "";
        }
        directory_talendLogs_FILE = "";
    }
    boolean isFileGenerated_talendLogs_FILE = true;
    java.io.File filetalendLogs_FILE = new java.io.File(fileName_talendLogs_FILE);
    globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
        if(filetalendLogs_FILE.exists()){
            isFileGenerated_talendLogs_FILE = false;
        }
            int nb_line_talendLogs_FILE = 0;
            int splitedFileNo_talendLogs_FILE = 0;
            int currentRow_talendLogs_FILE = 0;

            final String OUT_DELIM_talendLogs_FILE = /** Start field talendLogs_FILE:FIELDSEPARATOR */";"/** End field talendLogs_FILE:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_talendLogs_FILE = /** Start field talendLogs_FILE:ROWSEPARATOR */"\n"/** End field talendLogs_FILE:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_talendLogs_FILE != null && directory_talendLogs_FILE.trim().length() != 0) {
                        java.io.File dir_talendLogs_FILE = new java.io.File(directory_talendLogs_FILE);
                        if(!dir_talendLogs_FILE.exists()) {
                            dir_talendLogs_FILE.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtalendLogs_FILE = null;

                        outtalendLogs_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_talendLogs_FILE, true),"ISO-8859-15"));


        resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

 



/**
 * [talendLogs_FILE begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_FILE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					


                    StringBuilder sb_talendLogs_FILE = new StringBuilder();
                            if(row_talendLogs_LOGS.moment != null) {
                        sb_talendLogs_FILE.append(
                            FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.root_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.root_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.father_pid != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.father_pid
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.project != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.project
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.job != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.job
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.context != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.context
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.priority != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.priority
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.type != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.type
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.origin != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.origin
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.message != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.message
                        );
                            }
                            sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
                            if(row_talendLogs_LOGS.code != null) {
                        sb_talendLogs_FILE.append(
                            row_talendLogs_LOGS.code
                        );
                            }
                    sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);


                    nb_line_talendLogs_FILE++;
                    resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

                        outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());




 


	tos_count_talendLogs_FILE++;

/**
 * [talendLogs_FILE main ] stop
 */
	
	/**
	 * [talendLogs_FILE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_FILE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	

 



/**
 * [talendLogs_FILE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_FILE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	



		
			
					if(outtalendLogs_FILE!=null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}
				
				globalMap.put("talendLogs_FILE_NB_LINE",nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",fileName_talendLogs_FILE);
			
		
		
		resourceMap.put("finish_talendLogs_FILE", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_FILE", true);
end_Hash.put("talendLogs_FILE", System.currentTimeMillis());




/**
 * [talendLogs_FILE end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_FILE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_FILE";
	
	currentComponent="talendLogs_FILE";

	


		if(resourceMap.get("finish_talendLogs_FILE") == null){ 
			
				
						java.io.Writer outtalendLogs_FILE = (java.io.Writer)resourceMap.get("out_talendLogs_FILE");
						if(outtalendLogs_FILE!=null) {
							outtalendLogs_FILE.flush();
							outtalendLogs_FILE.close();
						}
					
				
			
		}
	

 



/**
 * [talendLogs_FILE finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "PROD";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final BUY_INTEGRATION BUY_INTEGRATIONClass = new BUY_INTEGRATION();

        int exitCode = BUY_INTEGRATIONClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = BUY_INTEGRATION.class.getClassLoader().getResourceAsStream("dev/buy_integration_0_25/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = BUY_INTEGRATION.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("IntegrationPath", "id_String");
                            context.IntegrationPath=(String) context.getProperty("IntegrationPath");
                        context.setContextType("LogPath", "id_String");
                            context.LogPath=(String) context.getProperty("LogPath");
                        context.setContextType("ExtractPath", "id_String");
                            context.ExtractPath=(String) context.getProperty("ExtractPath");
                        context.setContextType("ReferentielPath", "id_String");
                            context.ReferentielPath=(String) context.getProperty("ReferentielPath");
                        context.setContextType("ExtractPathFinal", "id_String");
                            context.ExtractPathFinal=(String) context.getProperty("ExtractPathFinal");
                        context.setContextType("ErrorDataEntity", "id_String");
                            context.ErrorDataEntity=(String) context.getProperty("ErrorDataEntity");
                        context.setContextType("ModelFilePath", "id_String");
                            context.ModelFilePath=(String) context.getProperty("ModelFilePath");
                        context.setContextType("emailErrorRecipient", "id_String");
                            context.emailErrorRecipient=(String) context.getProperty("emailErrorRecipient");
                        context.setContextType("ExtractPathPrice", "id_String");
                            context.ExtractPathPrice=(String) context.getProperty("ExtractPathPrice");
                        context.setContextType("ExtractPathFinalPrice", "id_String");
                            context.ExtractPathFinalPrice=(String) context.getProperty("ExtractPathFinalPrice");
                        context.setContextType("ExtractPathHBE", "id_String");
                            context.ExtractPathHBE=(String) context.getProperty("ExtractPathHBE");
                        context.setContextType("ExtractPathOTHER", "id_String");
                            context.ExtractPathOTHER=(String) context.getProperty("ExtractPathOTHER");
                        context.setContextType("ExtractPathFinalPriceHBB1", "id_String");
                            context.ExtractPathFinalPriceHBB1=(String) context.getProperty("ExtractPathFinalPriceHBB1");
                        context.setContextType("ExtractPathFinalPriceHBP1", "id_String");
                            context.ExtractPathFinalPriceHBP1=(String) context.getProperty("ExtractPathFinalPriceHBP1");
                        context.setContextType("ExtractPathFinalPriceHBS1", "id_String");
                            context.ExtractPathFinalPriceHBS1=(String) context.getProperty("ExtractPathFinalPriceHBS1");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("IntegrationPath")) {
                context.IntegrationPath = (String) parentContextMap.get("IntegrationPath");
            }if (parentContextMap.containsKey("LogPath")) {
                context.LogPath = (String) parentContextMap.get("LogPath");
            }if (parentContextMap.containsKey("ExtractPath")) {
                context.ExtractPath = (String) parentContextMap.get("ExtractPath");
            }if (parentContextMap.containsKey("ReferentielPath")) {
                context.ReferentielPath = (String) parentContextMap.get("ReferentielPath");
            }if (parentContextMap.containsKey("ExtractPathFinal")) {
                context.ExtractPathFinal = (String) parentContextMap.get("ExtractPathFinal");
            }if (parentContextMap.containsKey("ErrorDataEntity")) {
                context.ErrorDataEntity = (String) parentContextMap.get("ErrorDataEntity");
            }if (parentContextMap.containsKey("ModelFilePath")) {
                context.ModelFilePath = (String) parentContextMap.get("ModelFilePath");
            }if (parentContextMap.containsKey("emailErrorRecipient")) {
                context.emailErrorRecipient = (String) parentContextMap.get("emailErrorRecipient");
            }if (parentContextMap.containsKey("ExtractPathPrice")) {
                context.ExtractPathPrice = (String) parentContextMap.get("ExtractPathPrice");
            }if (parentContextMap.containsKey("ExtractPathFinalPrice")) {
                context.ExtractPathFinalPrice = (String) parentContextMap.get("ExtractPathFinalPrice");
            }if (parentContextMap.containsKey("ExtractPathHBE")) {
                context.ExtractPathHBE = (String) parentContextMap.get("ExtractPathHBE");
            }if (parentContextMap.containsKey("ExtractPathOTHER")) {
                context.ExtractPathOTHER = (String) parentContextMap.get("ExtractPathOTHER");
            }if (parentContextMap.containsKey("ExtractPathFinalPriceHBB1")) {
                context.ExtractPathFinalPriceHBB1 = (String) parentContextMap.get("ExtractPathFinalPriceHBB1");
            }if (parentContextMap.containsKey("ExtractPathFinalPriceHBP1")) {
                context.ExtractPathFinalPriceHBP1 = (String) parentContextMap.get("ExtractPathFinalPriceHBP1");
            }if (parentContextMap.containsKey("ExtractPathFinalPriceHBS1")) {
                context.ExtractPathFinalPriceHBS1 = (String) parentContextMap.get("ExtractPathFinalPriceHBS1");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tWaitForFile_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tWaitForFile_1) {
globalMap.put("tWaitForFile_1_SUBPROCESS_STATE", -1);

e_tWaitForFile_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : BUY_INTEGRATION");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     376974 characters generated by Talend Open Studio for Data Integration 
 *     on the 18 mai 2022 17:27:53 CEST
 ************************************************************************************************/