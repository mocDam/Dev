// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dev.buy_extract_referential_0_11;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: BUY_EXTRACT_REFERENTIAL Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class BUY_EXTRACT_REFERENTIAL implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (extractPathReferential != null) {

				this.setProperty("extractPathReferential", extractPathReferential.toString());

			}

			if (SQLSERVER_Server != null) {

				this.setProperty("SQLSERVER_Server", SQLSERVER_Server.toString());

			}

			if (SQLSERVER_Password != null) {

				this.setProperty("SQLSERVER_Password", SQLSERVER_Password.toString());

			}

			if (SQLSERVER_AdditionalParams != null) {

				this.setProperty("SQLSERVER_AdditionalParams", SQLSERVER_AdditionalParams.toString());

			}

			if (SQLSERVER_Database != null) {

				this.setProperty("SQLSERVER_Database", SQLSERVER_Database.toString());

			}

			if (SQLSERVER_Port != null) {

				this.setProperty("SQLSERVER_Port", SQLSERVER_Port.toString());

			}

			if (SQLSERVER_Schema != null) {

				this.setProperty("SQLSERVER_Schema", SQLSERVER_Schema.toString());

			}

			if (SQLSERVER_Login != null) {

				this.setProperty("SQLSERVER_Login", SQLSERVER_Login.toString());

			}

		}

		public String extractPathReferential;

		public String getExtractPathReferential() {
			return this.extractPathReferential;
		}

		public String SQLSERVER_Server;

		public String getSQLSERVER_Server() {
			return this.SQLSERVER_Server;
		}

		public java.lang.String SQLSERVER_Password;

		public java.lang.String getSQLSERVER_Password() {
			return this.SQLSERVER_Password;
		}

		public String SQLSERVER_AdditionalParams;

		public String getSQLSERVER_AdditionalParams() {
			return this.SQLSERVER_AdditionalParams;
		}

		public String SQLSERVER_Database;

		public String getSQLSERVER_Database() {
			return this.SQLSERVER_Database;
		}

		public String SQLSERVER_Port;

		public String getSQLSERVER_Port() {
			return this.SQLSERVER_Port;
		}

		public String SQLSERVER_Schema;

		public String getSQLSERVER_Schema() {
			return this.SQLSERVER_Schema;
		}

		public String SQLSERVER_Login;

		public String getSQLSERVER_Login() {
			return this.SQLSERVER_Login;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.11";
	private final String jobName = "BUY_EXTRACT_REFERENTIAL";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					BUY_EXTRACT_REFERENTIAL.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(BUY_EXTRACT_REFERENTIAL.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_16_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_16_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_14_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_14_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_14_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon process_data_begin ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_begin ] stop
				 */

				/**
				 * [preStaLogCon process_data_end ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_end ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(context.extractPathReferential + "COLOR.csv");
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", context.extractPathReferential + "COLOR.csv");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_end ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				tDBInput_16Process(globalMap);

				/**
				 * [tFileDelete_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String COLORID;

		public String getCOLORID() {
			return this.COLORID;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.COLORID = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.COLORID, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("COLORID=" + COLORID);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",NAME=" + NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(context.extractPathReferential + "COLOR.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("COLORID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DESCRIPTION");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("NAME");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tDBInput_16 begin ] start
				 */

				ok_Hash.put("tDBInput_16", false);
				start_Hash.put("tDBInput_16", System.currentTimeMillis());

				currentComponent = "tDBInput_16";

				int tos_count_tDBInput_16 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_16 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_16 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_16 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_16, talendToDBArray_tDBInput_16);
				int nb_line_tDBInput_16 = 0;
				java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_16 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;

				String port_tDBInput_16 = context.SQLSERVER_Port;
				String dbname_tDBInput_16 = context.SQLSERVER_Database;
				String url_tDBInput_16 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_16)) {
					url_tDBInput_16 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_16)) {
					url_tDBInput_16 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_16 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_16 = context.SQLSERVER_Schema;

				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16, dbUser_tDBInput_16,
						dbPwd_tDBInput_16);

				java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

				String dbquery_tDBInput_16 = "select ECORESCOLOR_NAME as COLORID,DESCRIPTION,NAME  from data.D365_K3FashionColorTranslations";

				globalMap.put("tDBInput_16_QUERY", dbquery_tDBInput_16);
				java.sql.ResultSet rs_tDBInput_16 = null;

				try {
					rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
					java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
					int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

					String tmpContent_tDBInput_16 = null;

					while (rs_tDBInput_16.next()) {
						nb_line_tDBInput_16++;

						if (colQtyInRs_tDBInput_16 < 1) {
							row16.COLORID = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(1);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.COLORID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.COLORID = tmpContent_tDBInput_16;
								}
							} else {
								row16.COLORID = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 2) {
							row16.DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(2);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.DESCRIPTION = tmpContent_tDBInput_16;
								}
							} else {
								row16.DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 3) {
							row16.NAME = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(3);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row16.NAME = tmpContent_tDBInput_16;
								}
							} else {
								row16.NAME = null;
							}
						}

						/**
						 * [tDBInput_16 begin ] stop
						 */

						/**
						 * [tDBInput_16 main ] start
						 */

						currentComponent = "tDBInput_16";

						tos_count_tDBInput_16++;

						/**
						 * [tDBInput_16 main ] stop
						 */

						/**
						 * [tDBInput_16 process_data_begin ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row16.COLORID != null) {
							sb_tFileOutputDelimited_1.append(row16.COLORID);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row16.DESCRIPTION != null) {
							sb_tFileOutputDelimited_1.append(row16.DESCRIPTION);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row16.NAME != null) {
							sb_tFileOutputDelimited_1.append(row16.NAME);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 process_data_end ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 end ] start
						 */

						currentComponent = "tDBInput_16";

					}
				} finally {
					if (rs_tDBInput_16 != null) {
						rs_tDBInput_16.close();
					}
					if (stmt_tDBInput_16 != null) {
						stmt_tDBInput_16.close();
					}
					if (conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {

						conn_tDBInput_16.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_16_NB_LINE", nb_line_tDBInput_16);

				ok_Hash.put("tDBInput_16", true);
				end_Hash.put("tDBInput_16", System.currentTimeMillis());

				/**
				 * [tDBInput_16 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				tRunJob_16Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_16 finally ] start
				 */

				currentComponent = "tDBInput_16";

				/**
				 * [tDBInput_16 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_16 begin ] start
				 */

				ok_Hash.put("tRunJob_16", false);
				start_Hash.put("tRunJob_16", System.currentTimeMillis());

				currentComponent = "tRunJob_16";

				int tos_count_tRunJob_16 = 0;

				/**
				 * [tRunJob_16 begin ] stop
				 */

				/**
				 * [tRunJob_16 main ] start
				 */

				currentComponent = "tRunJob_16";

				java.util.List<String> paraList_tRunJob_16 = new java.util.ArrayList<String>();

				paraList_tRunJob_16.add("--father_pid=" + pid);

				paraList_tRunJob_16.add("--root_pid=" + rootPid);

				paraList_tRunJob_16.add("--father_node=tRunJob_16");

				paraList_tRunJob_16.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_16.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_16.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_16.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_16 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_16 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_16".equals(tRunJobName_tRunJob_16) && childResumePath_tRunJob_16 != null) {
					paraList_tRunJob_16.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_16.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_16");

				java.util.Map<String, Object> parentContextMap_tRunJob_16 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_16 = null;

				obj_tRunJob_16 = context.extractPathReferential + "COLOR.csv";
				if (obj_tRunJob_16 != null) {
					paraList_tRunJob_16.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_16));
				} else {
					paraList_tRunJob_16.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_16.put("FilePathToUpload", obj_tRunJob_16);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_16 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_16 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_16) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_16 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_16 : talendDataSources_tRunJob_16
							.entrySet()) {
						dataSources_tRunJob_16.put(talendDataSourceEntry_tRunJob_16.getKey(),
								talendDataSourceEntry_tRunJob_16.getValue().getRawDataSource());
					}
					childJob_tRunJob_16.setDataSources(dataSources_tRunJob_16);
				}

				childJob_tRunJob_16.parentContextMap = parentContextMap_tRunJob_16;

				String[][] childReturn_tRunJob_16 = childJob_tRunJob_16
						.runJob((String[]) paraList_tRunJob_16.toArray(new String[paraList_tRunJob_16.size()]));

				errorCode = childJob_tRunJob_16.getErrorCode();

				if (childJob_tRunJob_16.getErrorCode() == null) {
					globalMap.put("tRunJob_16_CHILD_RETURN_CODE", childJob_tRunJob_16.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_16.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_16_CHILD_RETURN_CODE", childJob_tRunJob_16.getErrorCode());
				}
				if (childJob_tRunJob_16.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_16_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_16.getExceptionStackTrace());
				}

				if (childJob_tRunJob_16.getErrorCode() != null || ("failure").equals(childJob_tRunJob_16.getStatus())) {
					java.lang.Exception ce_tRunJob_16 = childJob_tRunJob_16.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_16 != null)
							? (ce_tRunJob_16.getClass().getName() + ": " + ce_tRunJob_16.getMessage())
							: ""));
				}

				tos_count_tRunJob_16++;

				/**
				 * [tRunJob_16 main ] stop
				 */

				/**
				 * [tRunJob_16 process_data_begin ] start
				 */

				currentComponent = "tRunJob_16";

				/**
				 * [tRunJob_16 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_16 process_data_end ] start
				 */

				currentComponent = "tRunJob_16";

				/**
				 * [tRunJob_16 process_data_end ] stop
				 */

				/**
				 * [tRunJob_16 end ] start
				 */

				currentComponent = "tRunJob_16";

				ok_Hash.put("tRunJob_16", true);
				end_Hash.put("tRunJob_16", System.currentTimeMillis());

				/**
				 * [tRunJob_16 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_16 finally ] start
				 */

				currentComponent = "tRunJob_16";

				/**
				 * [tRunJob_16 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_16_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				int tos_count_tFileDelete_2 = 0;

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_2 = new java.io.File(context.extractPathReferential + "CATEGORY.csv");
				if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
					if (file_tFileDelete_2.delete()) {
						globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_2_DELETE_PATH", context.extractPathReferential + "CATEGORY.csv");

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_end ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				tDBInput_15Process(globalMap);

				/**
				 * [tFileDelete_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String ENUMERATIONVALUE;

		public String getENUMERATIONVALUE() {
			return this.ENUMERATIONVALUE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.ENUMERATIONVALUE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENUMERATIONVALUE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENUMERATIONVALUE=" + ENUMERATIONVALUE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(context.extractPathReferential + "CATEGORY.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					isFileGenerated_tFileOutputDelimited_2 = false;
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("ENUMERATIONVALUE");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_15 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_15 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_15 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_15, talendToDBArray_tDBInput_15);
				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_15 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;

				String port_tDBInput_15 = context.SQLSERVER_Port;
				String dbname_tDBInput_15 = context.SQLSERVER_Database;
				String url_tDBInput_15 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_15)) {
					url_tDBInput_15 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_15)) {
					url_tDBInput_15 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_15 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_15 = context.SQLSERVER_Schema;

				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15, dbUser_tDBInput_15,
						dbPwd_tDBInput_15);

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

				String dbquery_tDBInput_15 = "\n\nselect  ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Category Master F"
						+ "ile'\n";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row15.ENUMERATIONVALUE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(1);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ENUMERATIONVALUE = tmpContent_tDBInput_15;
								}
							} else {
								row15.ENUMERATIONVALUE = null;
							}
						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
						if (row15.ENUMERATIONVALUE != null) {
							sb_tFileOutputDelimited_2.append(row15.ENUMERATIONVALUE);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						nb_line_tFileOutputDelimited_2++;
						resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					if (stmt_tDBInput_15 != null) {
						stmt_tDBInput_15.close();
					}
					if (conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {

						conn_tDBInput_15.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				tRunJob_15Process(globalMap);

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_15 begin ] start
				 */

				ok_Hash.put("tRunJob_15", false);
				start_Hash.put("tRunJob_15", System.currentTimeMillis());

				currentComponent = "tRunJob_15";

				int tos_count_tRunJob_15 = 0;

				/**
				 * [tRunJob_15 begin ] stop
				 */

				/**
				 * [tRunJob_15 main ] start
				 */

				currentComponent = "tRunJob_15";

				java.util.List<String> paraList_tRunJob_15 = new java.util.ArrayList<String>();

				paraList_tRunJob_15.add("--father_pid=" + pid);

				paraList_tRunJob_15.add("--root_pid=" + rootPid);

				paraList_tRunJob_15.add("--father_node=tRunJob_15");

				paraList_tRunJob_15.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_15.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_15.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_15.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_15 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_15 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_15".equals(tRunJobName_tRunJob_15) && childResumePath_tRunJob_15 != null) {
					paraList_tRunJob_15.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_15.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_15");

				java.util.Map<String, Object> parentContextMap_tRunJob_15 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_15 = null;

				obj_tRunJob_15 = context.extractPathReferential + "CATEGORY.csv";
				if (obj_tRunJob_15 != null) {
					paraList_tRunJob_15.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_15));
				} else {
					paraList_tRunJob_15.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_15.put("FilePathToUpload", obj_tRunJob_15);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_15 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_15 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_15) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_15 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_15 : talendDataSources_tRunJob_15
							.entrySet()) {
						dataSources_tRunJob_15.put(talendDataSourceEntry_tRunJob_15.getKey(),
								talendDataSourceEntry_tRunJob_15.getValue().getRawDataSource());
					}
					childJob_tRunJob_15.setDataSources(dataSources_tRunJob_15);
				}

				childJob_tRunJob_15.parentContextMap = parentContextMap_tRunJob_15;

				String[][] childReturn_tRunJob_15 = childJob_tRunJob_15
						.runJob((String[]) paraList_tRunJob_15.toArray(new String[paraList_tRunJob_15.size()]));

				errorCode = childJob_tRunJob_15.getErrorCode();

				if (childJob_tRunJob_15.getErrorCode() == null) {
					globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_15.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getErrorCode());
				}
				if (childJob_tRunJob_15.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_15_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_15.getExceptionStackTrace());
				}

				if (childJob_tRunJob_15.getErrorCode() != null || ("failure").equals(childJob_tRunJob_15.getStatus())) {
					java.lang.Exception ce_tRunJob_15 = childJob_tRunJob_15.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_15 != null)
							? (ce_tRunJob_15.getClass().getName() + ": " + ce_tRunJob_15.getMessage())
							: ""));
				}

				tos_count_tRunJob_15++;

				/**
				 * [tRunJob_15 main ] stop
				 */

				/**
				 * [tRunJob_15 process_data_begin ] start
				 */

				currentComponent = "tRunJob_15";

				/**
				 * [tRunJob_15 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_15 process_data_end ] start
				 */

				currentComponent = "tRunJob_15";

				/**
				 * [tRunJob_15 process_data_end ] stop
				 */

				/**
				 * [tRunJob_15 end ] start
				 */

				currentComponent = "tRunJob_15";

				ok_Hash.put("tRunJob_15", true);
				end_Hash.put("tRunJob_15", System.currentTimeMillis());

				/**
				 * [tRunJob_15 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_15 finally ] start
				 */

				currentComponent = "tRunJob_15";

				/**
				 * [tRunJob_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_3 begin ] start
				 */

				ok_Hash.put("tFileDelete_3", false);
				start_Hash.put("tFileDelete_3", System.currentTimeMillis());

				currentComponent = "tFileDelete_3";

				int tos_count_tFileDelete_3 = 0;

				/**
				 * [tFileDelete_3 begin ] stop
				 */

				/**
				 * [tFileDelete_3 main ] start
				 */

				currentComponent = "tFileDelete_3";

				class DeleteFoldertFileDelete_3 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_3 = new java.io.File(context.extractPathReferential + "BRAND.csv");
				if (file_tFileDelete_3.exists() && file_tFileDelete_3.isFile()) {
					if (file_tFileDelete_3.delete()) {
						globalMap.put("tFileDelete_3_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_3_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_3_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_3_DELETE_PATH", context.extractPathReferential + "BRAND.csv");

				tos_count_tFileDelete_3++;

				/**
				 * [tFileDelete_3 main ] stop
				 */

				/**
				 * [tFileDelete_3 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_3 process_data_end ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_3 end ] start
				 */

				currentComponent = "tFileDelete_3";

				ok_Hash.put("tFileDelete_3", true);
				end_Hash.put("tFileDelete_3", System.currentTimeMillis());

				tDBInput_11Process(globalMap);

				/**
				 * [tFileDelete_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_3 finally ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String BRANDID;

		public String getBRANDID() {
			return this.BRANDID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.BRANDID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRANDID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRANDID=" + BRANDID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(context.extractPathReferential + "BRAND.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					isFileGenerated_tFileOutputDelimited_3 = false;
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("BRANDID");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_11 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_11 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_11 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_11, talendToDBArray_tDBInput_11);
				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_11 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;

				String port_tDBInput_11 = context.SQLSERVER_Port;
				String dbname_tDBInput_11 = context.SQLSERVER_Database;
				String url_tDBInput_11 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_11)) {
					url_tDBInput_11 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_11)) {
					url_tDBInput_11 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_11 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_11 = context.SQLSERVER_Schema;

				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11, dbUser_tDBInput_11,
						dbPwd_tDBInput_11);

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

				String dbquery_tDBInput_11 = "select BRANDID from data.D365_K3FashionBrands";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row1.BRANDID = null;
						} else {

							tmpContent_tDBInput_11 = rs_tDBInput_11.getString(1);
							if (tmpContent_tDBInput_11 != null) {
								if (talendToDBList_tDBInput_11.contains(
										rsmd_tDBInput_11.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.BRANDID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_11);
								} else {
									row1.BRANDID = tmpContent_tDBInput_11;
								}
							} else {
								row1.BRANDID = null;
							}
						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						if (row1.BRANDID != null) {
							sb_tFileOutputDelimited_3.append(row1.BRANDID);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;
						resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					if (rs_tDBInput_11 != null) {
						rs_tDBInput_11.close();
					}
					if (stmt_tDBInput_11 != null) {
						stmt_tDBInput_11.close();
					}
					if (conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {

						conn_tDBInput_11.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				tRunJob_2Process(globalMap);

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_2.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = context.extractPathReferential + "BRAND.csv";
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("FilePathToUpload", obj_tRunJob_2);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_2 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
					java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2 != null)
							? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage())
							: ""));
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 process_data_begin ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_2 process_data_end ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_4 begin ] start
				 */

				ok_Hash.put("tFileDelete_4", false);
				start_Hash.put("tFileDelete_4", System.currentTimeMillis());

				currentComponent = "tFileDelete_4";

				int tos_count_tFileDelete_4 = 0;

				/**
				 * [tFileDelete_4 begin ] stop
				 */

				/**
				 * [tFileDelete_4 main ] start
				 */

				currentComponent = "tFileDelete_4";

				class DeleteFoldertFileDelete_4 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_4 = new java.io.File(context.extractPathReferential + "SEASON.csv");
				if (file_tFileDelete_4.exists() && file_tFileDelete_4.isFile()) {
					if (file_tFileDelete_4.delete()) {
						globalMap.put("tFileDelete_4_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_4_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_4_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_4_DELETE_PATH", context.extractPathReferential + "SEASON.csv");

				tos_count_tFileDelete_4++;

				/**
				 * [tFileDelete_4 main ] stop
				 */

				/**
				 * [tFileDelete_4 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_4";

				/**
				 * [tFileDelete_4 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_4 process_data_end ] start
				 */

				currentComponent = "tFileDelete_4";

				/**
				 * [tFileDelete_4 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_4 end ] start
				 */

				currentComponent = "tFileDelete_4";

				ok_Hash.put("tFileDelete_4", true);
				end_Hash.put("tFileDelete_4", System.currentTimeMillis());

				tDBInput_10Process(globalMap);

				/**
				 * [tFileDelete_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_4 finally ] start
				 */

				currentComponent = "tFileDelete_4";

				/**
				 * [tFileDelete_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String SEASONCODE;

		public String getSEASONCODE() {
			return this.SEASONCODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.SEASONCODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SEASONCODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SEASONCODE=" + SEASONCODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(context.extractPathReferential + "SEASON.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				if (filetFileOutputDelimited_4.exists()) {
					isFileGenerated_tFileOutputDelimited_4 = false;
				}
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("SEASONCODE");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tDBInput_10 begin ] start
				 */

				ok_Hash.put("tDBInput_10", false);
				start_Hash.put("tDBInput_10", System.currentTimeMillis());

				currentComponent = "tDBInput_10";

				int tos_count_tDBInput_10 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_10 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10);
				int nb_line_tDBInput_10 = 0;
				java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_10 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;

				String port_tDBInput_10 = context.SQLSERVER_Port;
				String dbname_tDBInput_10 = context.SQLSERVER_Database;
				String url_tDBInput_10 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_10)) {
					url_tDBInput_10 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_10)) {
					url_tDBInput_10 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_10 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_10 = context.SQLSERVER_Schema;

				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10, dbUser_tDBInput_10,
						dbPwd_tDBInput_10);

				java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

				String dbquery_tDBInput_10 = "select SEASONCODE from data.D365_K3FashionRetailSeasons";

				globalMap.put("tDBInput_10_QUERY", dbquery_tDBInput_10);
				java.sql.ResultSet rs_tDBInput_10 = null;

				try {
					rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
					java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
					int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

					String tmpContent_tDBInput_10 = null;

					while (rs_tDBInput_10.next()) {
						nb_line_tDBInput_10++;

						if (colQtyInRs_tDBInput_10 < 1) {
							row2.SEASONCODE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(1);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.SEASONCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row2.SEASONCODE = tmpContent_tDBInput_10;
								}
							} else {
								row2.SEASONCODE = null;
							}
						}

						/**
						 * [tDBInput_10 begin ] stop
						 */

						/**
						 * [tDBInput_10 main ] start
						 */

						currentComponent = "tDBInput_10";

						tos_count_tDBInput_10++;

						/**
						 * [tDBInput_10 main ] stop
						 */

						/**
						 * [tDBInput_10 process_data_begin ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 main ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
						if (row2.SEASONCODE != null) {
							sb_tFileOutputDelimited_4.append(row2.SEASONCODE);
						}
						sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

						nb_line_tFileOutputDelimited_4++;
						resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

						tos_count_tFileOutputDelimited_4++;

						/**
						 * [tFileOutputDelimited_4 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						/**
						 * [tFileOutputDelimited_4 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						/**
						 * [tFileOutputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 process_data_end ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 end ] start
						 */

						currentComponent = "tDBInput_10";

					}
				} finally {
					if (rs_tDBInput_10 != null) {
						rs_tDBInput_10.close();
					}
					if (stmt_tDBInput_10 != null) {
						stmt_tDBInput_10.close();
					}
					if (conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {

						conn_tDBInput_10.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_10_NB_LINE", nb_line_tDBInput_10);

				ok_Hash.put("tDBInput_10", true);
				end_Hash.put("tDBInput_10", System.currentTimeMillis());

				/**
				 * [tDBInput_10 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				tRunJob_3Process(globalMap);

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_10 finally ] start
				 */

				currentComponent = "tDBInput_10";

				/**
				 * [tDBInput_10 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_3.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = context.extractPathReferential + "SEASON.csv";
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("FilePathToUpload", obj_tRunJob_3);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_3 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
				}

				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
					java.lang.Exception ce_tRunJob_3 = childJob_tRunJob_3.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_3 != null)
							? (ce_tRunJob_3.getClass().getName() + ": " + ce_tRunJob_3.getMessage())
							: ""));
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 process_data_begin ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_3 process_data_end ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_end ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_5 begin ] start
				 */

				ok_Hash.put("tFileDelete_5", false);
				start_Hash.put("tFileDelete_5", System.currentTimeMillis());

				currentComponent = "tFileDelete_5";

				int tos_count_tFileDelete_5 = 0;

				/**
				 * [tFileDelete_5 begin ] stop
				 */

				/**
				 * [tFileDelete_5 main ] start
				 */

				currentComponent = "tFileDelete_5";

				class DeleteFoldertFileDelete_5 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_5 = new java.io.File(context.extractPathReferential + "DROP.csv");
				if (file_tFileDelete_5.exists() && file_tFileDelete_5.isFile()) {
					if (file_tFileDelete_5.delete()) {
						globalMap.put("tFileDelete_5_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_5_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_5_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_5_DELETE_PATH", context.extractPathReferential + "DROP.csv");

				tos_count_tFileDelete_5++;

				/**
				 * [tFileDelete_5 main ] stop
				 */

				/**
				 * [tFileDelete_5 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_5";

				/**
				 * [tFileDelete_5 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_5 process_data_end ] start
				 */

				currentComponent = "tFileDelete_5";

				/**
				 * [tFileDelete_5 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_5 end ] start
				 */

				currentComponent = "tFileDelete_5";

				ok_Hash.put("tFileDelete_5", true);
				end_Hash.put("tFileDelete_5", System.currentTimeMillis());

				tDBInput_9Process(globalMap);

				/**
				 * [tFileDelete_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_5 finally ] start
				 */

				currentComponent = "tFileDelete_5";

				/**
				 * [tFileDelete_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_5_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String DROPID;

		public String getDROPID() {
			return this.DROPID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.DROPID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DROPID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DROPID=" + DROPID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(context.extractPathReferential + "DROP.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				if (filetFileOutputDelimited_5.exists()) {
					isFileGenerated_tFileOutputDelimited_5 = false;
				}
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("DROPID");
					outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_9 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9);
				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_9 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String port_tDBInput_9 = context.SQLSERVER_Port;
				String dbname_tDBInput_9 = context.SQLSERVER_Database;
				String url_tDBInput_9 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_9)) {
					url_tDBInput_9 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_9)) {
					url_tDBInput_9 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_9 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_9 = context.SQLSERVER_Schema;

				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9, dbUser_tDBInput_9,
						dbPwd_tDBInput_9);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "select distinct DROPID from data.D365_K3FashionItemSeasonDropRelations";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row3.DROPID = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(1);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.DROPID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row3.DROPID = tmpContent_tDBInput_9;
								}
							} else {
								row3.DROPID = null;
							}
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 main ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
						if (row3.DROPID != null) {
							sb_tFileOutputDelimited_5.append(row3.DROPID);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

						nb_line_tFileOutputDelimited_5++;
						resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

						outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

						tos_count_tFileOutputDelimited_5++;

						/**
						 * [tFileOutputDelimited_5 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				tRunJob_4Process(globalMap);

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());

				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				/**
				 * [tRunJob_4 begin ] stop
				 */

				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--father_node=tRunJob_4");

				paraList_tRunJob_4.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_4.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_4.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_4 = null;

				obj_tRunJob_4 = context.extractPathReferential + "DROP.csv";
				if (obj_tRunJob_4 != null) {
					paraList_tRunJob_4.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
				} else {
					paraList_tRunJob_4.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_4.put("FilePathToUpload", obj_tRunJob_4);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_4 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_4) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
							.entrySet()) {
						dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
								talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
					}
					childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
				}

				childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;

				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));

				errorCode = childJob_tRunJob_4.getErrorCode();

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
				}
				if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
				}

				if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
					java.lang.Exception ce_tRunJob_4 = childJob_tRunJob_4.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_4 != null)
							? (ce_tRunJob_4.getClass().getName() + ": " + ce_tRunJob_4.getMessage())
							: ""));
				}

				tos_count_tRunJob_4++;

				/**
				 * [tRunJob_4 main ] stop
				 */

				/**
				 * [tRunJob_4 process_data_begin ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_4 process_data_end ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 process_data_end ] stop
				 */

				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_4 finally ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_6 begin ] start
				 */

				ok_Hash.put("tFileDelete_6", false);
				start_Hash.put("tFileDelete_6", System.currentTimeMillis());

				currentComponent = "tFileDelete_6";

				int tos_count_tFileDelete_6 = 0;

				/**
				 * [tFileDelete_6 begin ] stop
				 */

				/**
				 * [tFileDelete_6 main ] start
				 */

				currentComponent = "tFileDelete_6";

				class DeleteFoldertFileDelete_6 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_6 = new java.io.File(context.extractPathReferential + "GENDER.csv");
				if (file_tFileDelete_6.exists() && file_tFileDelete_6.isFile()) {
					if (file_tFileDelete_6.delete()) {
						globalMap.put("tFileDelete_6_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_6_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_6_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_6_DELETE_PATH", context.extractPathReferential + "GENDER.csv");

				tos_count_tFileDelete_6++;

				/**
				 * [tFileDelete_6 main ] stop
				 */

				/**
				 * [tFileDelete_6 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_6";

				/**
				 * [tFileDelete_6 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_6 process_data_end ] start
				 */

				currentComponent = "tFileDelete_6";

				/**
				 * [tFileDelete_6 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_6 end ] start
				 */

				currentComponent = "tFileDelete_6";

				ok_Hash.put("tFileDelete_6", true);
				end_Hash.put("tFileDelete_6", System.currentTimeMillis());

				tDBInput_8Process(globalMap);

				/**
				 * [tFileDelete_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_6 finally ] start
				 */

				currentComponent = "tFileDelete_6";

				/**
				 * [tFileDelete_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_6_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String ENUMERATIONVALUE;

		public String getENUMERATIONVALUE() {
			return this.ENUMERATIONVALUE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.ENUMERATIONVALUE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENUMERATIONVALUE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENUMERATIONVALUE=" + ENUMERATIONVALUE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(context.extractPathReferential + "GENDER.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
							fileName_tFileOutputDelimited_6.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);
				if (filetFileOutputDelimited_6.exists()) {
					isFileGenerated_tFileOutputDelimited_6 = false;
				}
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
																		 * Start field
																		 * tFileOutputDelimited_6:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_6.length() == 0) {
					outtFileOutputDelimited_6.write("ENUMERATIONVALUE");
					outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_8 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8);
				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_8 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String port_tDBInput_8 = context.SQLSERVER_Port;
				String dbname_tDBInput_8 = context.SQLSERVER_Database;
				String url_tDBInput_8 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_8)) {
					url_tDBInput_8 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_8)) {
					url_tDBInput_8 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_8 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_8 = context.SQLSERVER_Schema;

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8, dbUser_tDBInput_8,
						dbPwd_tDBInput_8);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "select  ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Gender'";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row4.ENUMERATIONVALUE = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(1);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row4.ENUMERATIONVALUE = tmpContent_tDBInput_8;
								}
							} else {
								row4.ENUMERATIONVALUE = null;
							}
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 main ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
						if (row4.ENUMERATIONVALUE != null) {
							sb_tFileOutputDelimited_6.append(row4.ENUMERATIONVALUE);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

						nb_line_tFileOutputDelimited_6++;
						resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());

						tos_count_tFileOutputDelimited_6++;

						/**
						 * [tFileOutputDelimited_6 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						/**
						 * [tFileOutputDelimited_6 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						/**
						 * [tFileOutputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE", nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				tRunJob_5Process(globalMap);

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_5 begin ] start
				 */

				ok_Hash.put("tRunJob_5", false);
				start_Hash.put("tRunJob_5", System.currentTimeMillis());

				currentComponent = "tRunJob_5";

				int tos_count_tRunJob_5 = 0;

				/**
				 * [tRunJob_5 begin ] stop
				 */

				/**
				 * [tRunJob_5 main ] start
				 */

				currentComponent = "tRunJob_5";

				java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();

				paraList_tRunJob_5.add("--father_pid=" + pid);

				paraList_tRunJob_5.add("--root_pid=" + rootPid);

				paraList_tRunJob_5.add("--father_node=tRunJob_5");

				paraList_tRunJob_5.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_5.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_5.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null) {
					paraList_tRunJob_5.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");

				java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_5 = null;

				obj_tRunJob_5 = context.extractPathReferential + "GENDER.csv";
				if (obj_tRunJob_5 != null) {
					paraList_tRunJob_5.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
				} else {
					paraList_tRunJob_5.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_5.put("FilePathToUpload", obj_tRunJob_5);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_5 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_5) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
							.entrySet()) {
						dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
								talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
					}
					childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
				}

				childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;

				String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
						.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));

				errorCode = childJob_tRunJob_5.getErrorCode();

				if (childJob_tRunJob_5.getErrorCode() == null) {
					globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getStatus() != null && ("failure").equals(childJob_tRunJob_5.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
				}
				if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_5.getExceptionStackTrace());
				}

				if (childJob_tRunJob_5.getErrorCode() != null || ("failure").equals(childJob_tRunJob_5.getStatus())) {
					java.lang.Exception ce_tRunJob_5 = childJob_tRunJob_5.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_5 != null)
							? (ce_tRunJob_5.getClass().getName() + ": " + ce_tRunJob_5.getMessage())
							: ""));
				}

				tos_count_tRunJob_5++;

				/**
				 * [tRunJob_5 main ] stop
				 */

				/**
				 * [tRunJob_5 process_data_begin ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_5 process_data_end ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 process_data_end ] stop
				 */

				/**
				 * [tRunJob_5 end ] start
				 */

				currentComponent = "tRunJob_5";

				ok_Hash.put("tRunJob_5", true);
				end_Hash.put("tRunJob_5", System.currentTimeMillis());

				/**
				 * [tRunJob_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_5 finally ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_7 begin ] start
				 */

				ok_Hash.put("tFileDelete_7", false);
				start_Hash.put("tFileDelete_7", System.currentTimeMillis());

				currentComponent = "tFileDelete_7";

				int tos_count_tFileDelete_7 = 0;

				/**
				 * [tFileDelete_7 begin ] stop
				 */

				/**
				 * [tFileDelete_7 main ] start
				 */

				currentComponent = "tFileDelete_7";

				class DeleteFoldertFileDelete_7 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_7 = new java.io.File(context.extractPathReferential + "SIZE.csv");
				if (file_tFileDelete_7.exists() && file_tFileDelete_7.isFile()) {
					if (file_tFileDelete_7.delete()) {
						globalMap.put("tFileDelete_7_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_7_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_7_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_7_DELETE_PATH", context.extractPathReferential + "SIZE.csv");

				tos_count_tFileDelete_7++;

				/**
				 * [tFileDelete_7 main ] stop
				 */

				/**
				 * [tFileDelete_7 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_7";

				/**
				 * [tFileDelete_7 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_7 process_data_end ] start
				 */

				currentComponent = "tFileDelete_7";

				/**
				 * [tFileDelete_7 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_7 end ] start
				 */

				currentComponent = "tFileDelete_7";

				ok_Hash.put("tFileDelete_7", true);
				end_Hash.put("tFileDelete_7", System.currentTimeMillis());

				tDBInput_7Process(globalMap);

				/**
				 * [tFileDelete_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_7 finally ] start
				 */

				currentComponent = "tFileDelete_7";

				/**
				 * [tFileDelete_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_7_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String SIZEID;

		public String getSIZEID() {
			return this.SIZEID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.SIZEID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SIZEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SIZEID=" + SIZEID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(context.extractPathReferential + "SIZE.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
							fileName_tFileOutputDelimited_7.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);
				if (filetFileOutputDelimited_7.exists()) {
					isFileGenerated_tFileOutputDelimited_7 = false;
				}
				int nb_line_tFileOutputDelimited_7 = 0;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
																		 * Start field
																		 * tFileOutputDelimited_7:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;

				outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_7.length() == 0) {
					outtFileOutputDelimited_7.write("SIZEID");
					outtFileOutputDelimited_7.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_7 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7);
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_7 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String port_tDBInput_7 = context.SQLSERVER_Port;
				String dbname_tDBInput_7 = context.SQLSERVER_Database;
				String url_tDBInput_7 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_7)) {
					url_tDBInput_7 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_7)) {
					url_tDBInput_7 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_7 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_7 = context.SQLSERVER_Schema;

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7, dbUser_tDBInput_7,
						dbPwd_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = " select SIZEID from data.D365_SIZES ";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row5.SIZEID = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(1);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.SIZEID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row5.SIZEID = tmpContent_tDBInput_7;
								}
							} else {
								row5.SIZEID = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 main ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
						if (row5.SIZEID != null) {
							sb_tFileOutputDelimited_7.append(row5.SIZEID);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

						nb_line_tFileOutputDelimited_7++;
						resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());

						tos_count_tFileOutputDelimited_7++;

						/**
						 * [tFileOutputDelimited_7 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						/**
						 * [tFileOutputDelimited_7 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						/**
						 * [tFileOutputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE", nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				tRunJob_6Process(globalMap);

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_6 begin ] start
				 */

				ok_Hash.put("tRunJob_6", false);
				start_Hash.put("tRunJob_6", System.currentTimeMillis());

				currentComponent = "tRunJob_6";

				int tos_count_tRunJob_6 = 0;

				/**
				 * [tRunJob_6 begin ] stop
				 */

				/**
				 * [tRunJob_6 main ] start
				 */

				currentComponent = "tRunJob_6";

				java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();

				paraList_tRunJob_6.add("--father_pid=" + pid);

				paraList_tRunJob_6.add("--root_pid=" + rootPid);

				paraList_tRunJob_6.add("--father_node=tRunJob_6");

				paraList_tRunJob_6.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_6.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_6.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null) {
					paraList_tRunJob_6.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");

				java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_6 = null;

				obj_tRunJob_6 = context.extractPathReferential + "SIZE.csv";
				if (obj_tRunJob_6 != null) {
					paraList_tRunJob_6.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));
				} else {
					paraList_tRunJob_6.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_6.put("FilePathToUpload", obj_tRunJob_6);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_6 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_6) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
							.entrySet()) {
						dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
								talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
					}
					childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
				}

				childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;

				String[][] childReturn_tRunJob_6 = childJob_tRunJob_6
						.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));

				errorCode = childJob_tRunJob_6.getErrorCode();

				if (childJob_tRunJob_6.getErrorCode() == null) {
					globalMap.put("tRunJob_6_CHILD_RETURN_CODE",
							childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
				}
				if (childJob_tRunJob_6.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
				}

				if (childJob_tRunJob_6.getErrorCode() != null || ("failure").equals(childJob_tRunJob_6.getStatus())) {
					java.lang.Exception ce_tRunJob_6 = childJob_tRunJob_6.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_6 != null)
							? (ce_tRunJob_6.getClass().getName() + ": " + ce_tRunJob_6.getMessage())
							: ""));
				}

				tos_count_tRunJob_6++;

				/**
				 * [tRunJob_6 main ] stop
				 */

				/**
				 * [tRunJob_6 process_data_begin ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_6 process_data_end ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 process_data_end ] stop
				 */

				/**
				 * [tRunJob_6 end ] start
				 */

				currentComponent = "tRunJob_6";

				ok_Hash.put("tRunJob_6", true);
				end_Hash.put("tRunJob_6", System.currentTimeMillis());

				/**
				 * [tRunJob_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_6 finally ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_8 begin ] start
				 */

				ok_Hash.put("tFileDelete_8", false);
				start_Hash.put("tFileDelete_8", System.currentTimeMillis());

				currentComponent = "tFileDelete_8";

				int tos_count_tFileDelete_8 = 0;

				/**
				 * [tFileDelete_8 begin ] stop
				 */

				/**
				 * [tFileDelete_8 main ] start
				 */

				currentComponent = "tFileDelete_8";

				class DeleteFoldertFileDelete_8 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_8 = new java.io.File(
						context.extractPathReferential + "PRODUCT_STATUS.csv");
				if (file_tFileDelete_8.exists() && file_tFileDelete_8.isFile()) {
					if (file_tFileDelete_8.delete()) {
						globalMap.put("tFileDelete_8_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_8_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_8_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_8_DELETE_PATH", context.extractPathReferential + "PRODUCT_STATUS.csv");

				tos_count_tFileDelete_8++;

				/**
				 * [tFileDelete_8 main ] stop
				 */

				/**
				 * [tFileDelete_8 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_8";

				/**
				 * [tFileDelete_8 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_8 process_data_end ] start
				 */

				currentComponent = "tFileDelete_8";

				/**
				 * [tFileDelete_8 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_8 end ] start
				 */

				currentComponent = "tFileDelete_8";

				ok_Hash.put("tFileDelete_8", true);
				end_Hash.put("tFileDelete_8", System.currentTimeMillis());

				tDBInput_6Process(globalMap);

				/**
				 * [tFileDelete_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_8 finally ] start
				 */

				currentComponent = "tFileDelete_8";

				/**
				 * [tFileDelete_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_8_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String STATUSID;

		public String getSTATUSID() {
			return this.STATUSID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.STATUSID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.STATUSID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STATUSID=" + STATUSID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_8";

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						context.extractPathReferential + "PRODUCT_STATUS.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
							fileName_tFileOutputDelimited_8.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);
				if (filetFileOutputDelimited_8.exists()) {
					isFileGenerated_tFileOutputDelimited_8 = false;
				}
				int nb_line_tFileOutputDelimited_8 = 0;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				final String OUT_DELIM_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /**
																		 * Start field
																		 * tFileOutputDelimited_8:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {
						dir_tFileOutputDelimited_8.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_8 = null;

				outtFileOutputDelimited_8 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_8.length() == 0) {
					outtFileOutputDelimited_8.write("STATUSID");
					outtFileOutputDelimited_8.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_8", outtFileOutputDelimited_8);
				resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

				/**
				 * [tFileOutputDelimited_8 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_6 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6);
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_6 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String port_tDBInput_6 = context.SQLSERVER_Port;
				String dbname_tDBInput_6 = context.SQLSERVER_Database;
				String url_tDBInput_6 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_6)) {
					url_tDBInput_6 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_6)) {
					url_tDBInput_6 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_6 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_6 = context.SQLSERVER_Schema;

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "select STATUSID from data.D365_K3FashionProductStatusSetup";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.STATUSID = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.STATUSID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.STATUSID = tmpContent_tDBInput_6;
								}
							} else {
								row6.STATUSID = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 main ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
						if (row6.STATUSID != null) {
							sb_tFileOutputDelimited_8.append(row6.STATUSID);
						}
						sb_tFileOutputDelimited_8.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);

						nb_line_tFileOutputDelimited_8++;
						resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write(sb_tFileOutputDelimited_8.toString());

						tos_count_tFileOutputDelimited_8++;

						/**
						 * [tFileOutputDelimited_8 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						/**
						 * [tFileOutputDelimited_8 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						/**
						 * [tFileOutputDelimited_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 end ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (outtFileOutputDelimited_8 != null) {
					outtFileOutputDelimited_8.flush();
					outtFileOutputDelimited_8.close();
				}

				globalMap.put("tFileOutputDelimited_8_NB_LINE", nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);

				resourceMap.put("finish_tFileOutputDelimited_8", true);

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				tRunJob_7Process(globalMap);

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (resourceMap.get("finish_tFileOutputDelimited_8") == null) {

					java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_8");
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}

				}

				/**
				 * [tFileOutputDelimited_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_7 begin ] start
				 */

				ok_Hash.put("tRunJob_7", false);
				start_Hash.put("tRunJob_7", System.currentTimeMillis());

				currentComponent = "tRunJob_7";

				int tos_count_tRunJob_7 = 0;

				/**
				 * [tRunJob_7 begin ] stop
				 */

				/**
				 * [tRunJob_7 main ] start
				 */

				currentComponent = "tRunJob_7";

				java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();

				paraList_tRunJob_7.add("--father_pid=" + pid);

				paraList_tRunJob_7.add("--root_pid=" + rootPid);

				paraList_tRunJob_7.add("--father_node=tRunJob_7");

				paraList_tRunJob_7.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_7.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_7.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null) {
					paraList_tRunJob_7.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");

				java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_7 = null;

				obj_tRunJob_7 = context.extractPathReferential + "PRODUCT_STATUS.csv";
				if (obj_tRunJob_7 != null) {
					paraList_tRunJob_7.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
				} else {
					paraList_tRunJob_7.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_7.put("FilePathToUpload", obj_tRunJob_7);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_7 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_7) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
							.entrySet()) {
						dataSources_tRunJob_7.put(talendDataSourceEntry_tRunJob_7.getKey(),
								talendDataSourceEntry_tRunJob_7.getValue().getRawDataSource());
					}
					childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
				}

				childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;

				String[][] childReturn_tRunJob_7 = childJob_tRunJob_7
						.runJob((String[]) paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));

				errorCode = childJob_tRunJob_7.getErrorCode();

				if (childJob_tRunJob_7.getErrorCode() == null) {
					globalMap.put("tRunJob_7_CHILD_RETURN_CODE",
							childJob_tRunJob_7.getStatus() != null && ("failure").equals(childJob_tRunJob_7.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getErrorCode());
				}
				if (childJob_tRunJob_7.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_7.getExceptionStackTrace());
				}

				if (childJob_tRunJob_7.getErrorCode() != null || ("failure").equals(childJob_tRunJob_7.getStatus())) {
					java.lang.Exception ce_tRunJob_7 = childJob_tRunJob_7.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_7 != null)
							? (ce_tRunJob_7.getClass().getName() + ": " + ce_tRunJob_7.getMessage())
							: ""));
				}

				tos_count_tRunJob_7++;

				/**
				 * [tRunJob_7 main ] stop
				 */

				/**
				 * [tRunJob_7 process_data_begin ] start
				 */

				currentComponent = "tRunJob_7";

				/**
				 * [tRunJob_7 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_7 process_data_end ] start
				 */

				currentComponent = "tRunJob_7";

				/**
				 * [tRunJob_7 process_data_end ] stop
				 */

				/**
				 * [tRunJob_7 end ] start
				 */

				currentComponent = "tRunJob_7";

				ok_Hash.put("tRunJob_7", true);
				end_Hash.put("tRunJob_7", System.currentTimeMillis());

				/**
				 * [tRunJob_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_7 finally ] start
				 */

				currentComponent = "tRunJob_7";

				/**
				 * [tRunJob_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_9 begin ] start
				 */

				ok_Hash.put("tFileDelete_9", false);
				start_Hash.put("tFileDelete_9", System.currentTimeMillis());

				currentComponent = "tFileDelete_9";

				int tos_count_tFileDelete_9 = 0;

				/**
				 * [tFileDelete_9 begin ] stop
				 */

				/**
				 * [tFileDelete_9 main ] start
				 */

				currentComponent = "tFileDelete_9";

				class DeleteFoldertFileDelete_9 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_9 = new java.io.File(
						context.extractPathReferential + "PRODUCT_TIERS.csv");
				if (file_tFileDelete_9.exists() && file_tFileDelete_9.isFile()) {
					if (file_tFileDelete_9.delete()) {
						globalMap.put("tFileDelete_9_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_9_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_9_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_9_DELETE_PATH", context.extractPathReferential + "PRODUCT_TIERS.csv");

				tos_count_tFileDelete_9++;

				/**
				 * [tFileDelete_9 main ] stop
				 */

				/**
				 * [tFileDelete_9 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_9";

				/**
				 * [tFileDelete_9 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_9 process_data_end ] start
				 */

				currentComponent = "tFileDelete_9";

				/**
				 * [tFileDelete_9 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_9 end ] start
				 */

				currentComponent = "tFileDelete_9";

				ok_Hash.put("tFileDelete_9", true);
				end_Hash.put("tFileDelete_9", System.currentTimeMillis());

				tDBInput_5Process(globalMap);

				/**
				 * [tFileDelete_9 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_9 finally ] start
				 */

				currentComponent = "tFileDelete_9";

				/**
				 * [tFileDelete_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_9_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String ENUMERATIONVALUE;

		public String getENUMERATIONVALUE() {
			return this.ENUMERATIONVALUE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.ENUMERATIONVALUE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENUMERATIONVALUE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENUMERATIONVALUE=" + ENUMERATIONVALUE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_9";

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						context.extractPathReferential + "PRODUCT_TIERS.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
							fileName_tFileOutputDelimited_9.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);
				if (filetFileOutputDelimited_9.exists()) {
					isFileGenerated_tFileOutputDelimited_9 = false;
				}
				int nb_line_tFileOutputDelimited_9 = 0;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				final String OUT_DELIM_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /**
																		 * Start field
																		 * tFileOutputDelimited_9:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null && directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_9 = null;

				outtFileOutputDelimited_9 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_9, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_9.length() == 0) {
					outtFileOutputDelimited_9.write("ENUMERATIONVALUE");
					outtFileOutputDelimited_9.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_9", outtFileOutputDelimited_9);
				resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

				/**
				 * [tFileOutputDelimited_9 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_5 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String port_tDBInput_5 = context.SQLSERVER_Port;
				String dbname_tDBInput_5 = context.SQLSERVER_Database;
				String url_tDBInput_5 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_5)) {
					url_tDBInput_5 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_5)) {
					url_tDBInput_5 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_5 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_5 = context.SQLSERVER_Schema;

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "\nselect ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Product Tier'\n";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row7.ENUMERATIONVALUE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row7.ENUMERATIONVALUE = tmpContent_tDBInput_5;
								}
							} else {
								row7.ENUMERATIONVALUE = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 main ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();
						if (row7.ENUMERATIONVALUE != null) {
							sb_tFileOutputDelimited_9.append(row7.ENUMERATIONVALUE);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);

						nb_line_tFileOutputDelimited_9++;
						resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write(sb_tFileOutputDelimited_9.toString());

						tos_count_tFileOutputDelimited_9++;

						/**
						 * [tFileOutputDelimited_9 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						/**
						 * [tFileOutputDelimited_9 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						/**
						 * [tFileOutputDelimited_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 end ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (outtFileOutputDelimited_9 != null) {
					outtFileOutputDelimited_9.flush();
					outtFileOutputDelimited_9.close();
				}

				globalMap.put("tFileOutputDelimited_9_NB_LINE", nb_line_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);

				resourceMap.put("finish_tFileOutputDelimited_9", true);

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				tRunJob_8Process(globalMap);

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (resourceMap.get("finish_tFileOutputDelimited_9") == null) {

					java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_9");
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}

				}

				/**
				 * [tFileOutputDelimited_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_8 begin ] start
				 */

				ok_Hash.put("tRunJob_8", false);
				start_Hash.put("tRunJob_8", System.currentTimeMillis());

				currentComponent = "tRunJob_8";

				int tos_count_tRunJob_8 = 0;

				/**
				 * [tRunJob_8 begin ] stop
				 */

				/**
				 * [tRunJob_8 main ] start
				 */

				currentComponent = "tRunJob_8";

				java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();

				paraList_tRunJob_8.add("--father_pid=" + pid);

				paraList_tRunJob_8.add("--root_pid=" + rootPid);

				paraList_tRunJob_8.add("--father_node=tRunJob_8");

				paraList_tRunJob_8.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_8.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_8.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_8.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_8 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_8 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_8".equals(tRunJobName_tRunJob_8) && childResumePath_tRunJob_8 != null) {
					paraList_tRunJob_8.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_8");

				java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_8 = null;

				obj_tRunJob_8 = context.extractPathReferential + "PRODUCT_TIERS.csv";
				if (obj_tRunJob_8 != null) {
					paraList_tRunJob_8.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_8));
				} else {
					paraList_tRunJob_8.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_8.put("FilePathToUpload", obj_tRunJob_8);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_8 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_8) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
							.entrySet()) {
						dataSources_tRunJob_8.put(talendDataSourceEntry_tRunJob_8.getKey(),
								talendDataSourceEntry_tRunJob_8.getValue().getRawDataSource());
					}
					childJob_tRunJob_8.setDataSources(dataSources_tRunJob_8);
				}

				childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;

				String[][] childReturn_tRunJob_8 = childJob_tRunJob_8
						.runJob((String[]) paraList_tRunJob_8.toArray(new String[paraList_tRunJob_8.size()]));

				errorCode = childJob_tRunJob_8.getErrorCode();

				if (childJob_tRunJob_8.getErrorCode() == null) {
					globalMap.put("tRunJob_8_CHILD_RETURN_CODE",
							childJob_tRunJob_8.getStatus() != null && ("failure").equals(childJob_tRunJob_8.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getErrorCode());
				}
				if (childJob_tRunJob_8.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_8.getExceptionStackTrace());
				}

				if (childJob_tRunJob_8.getErrorCode() != null || ("failure").equals(childJob_tRunJob_8.getStatus())) {
					java.lang.Exception ce_tRunJob_8 = childJob_tRunJob_8.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_8 != null)
							? (ce_tRunJob_8.getClass().getName() + ": " + ce_tRunJob_8.getMessage())
							: ""));
				}

				tos_count_tRunJob_8++;

				/**
				 * [tRunJob_8 main ] stop
				 */

				/**
				 * [tRunJob_8 process_data_begin ] start
				 */

				currentComponent = "tRunJob_8";

				/**
				 * [tRunJob_8 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_8 process_data_end ] start
				 */

				currentComponent = "tRunJob_8";

				/**
				 * [tRunJob_8 process_data_end ] stop
				 */

				/**
				 * [tRunJob_8 end ] start
				 */

				currentComponent = "tRunJob_8";

				ok_Hash.put("tRunJob_8", true);
				end_Hash.put("tRunJob_8", System.currentTimeMillis());

				/**
				 * [tRunJob_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_8 finally ] start
				 */

				currentComponent = "tRunJob_8";

				/**
				 * [tRunJob_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_10 begin ] start
				 */

				ok_Hash.put("tFileDelete_10", false);
				start_Hash.put("tFileDelete_10", System.currentTimeMillis());

				currentComponent = "tFileDelete_10";

				int tos_count_tFileDelete_10 = 0;

				/**
				 * [tFileDelete_10 begin ] stop
				 */

				/**
				 * [tFileDelete_10 main ] start
				 */

				currentComponent = "tFileDelete_10";

				class DeleteFoldertFileDelete_10 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_10 = new java.io.File(context.extractPathReferential + "AGE_RANGE.csv");
				if (file_tFileDelete_10.exists() && file_tFileDelete_10.isFile()) {
					if (file_tFileDelete_10.delete()) {
						globalMap.put("tFileDelete_10_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_10_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_10_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_10_DELETE_PATH", context.extractPathReferential + "AGE_RANGE.csv");

				tos_count_tFileDelete_10++;

				/**
				 * [tFileDelete_10 main ] stop
				 */

				/**
				 * [tFileDelete_10 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_10";

				/**
				 * [tFileDelete_10 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_10 process_data_end ] start
				 */

				currentComponent = "tFileDelete_10";

				/**
				 * [tFileDelete_10 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_10 end ] start
				 */

				currentComponent = "tFileDelete_10";

				ok_Hash.put("tFileDelete_10", true);
				end_Hash.put("tFileDelete_10", System.currentTimeMillis());

				tDBInput_4Process(globalMap);

				/**
				 * [tFileDelete_10 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_10 finally ] start
				 */

				currentComponent = "tFileDelete_10";

				/**
				 * [tFileDelete_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_10_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String ENUMERATIONVALUE;

		public String getENUMERATIONVALUE() {
			return this.ENUMERATIONVALUE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.ENUMERATIONVALUE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENUMERATIONVALUE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENUMERATIONVALUE=" + ENUMERATIONVALUE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tFileOutputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_10", false);
				start_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_10";

				int tos_count_tFileOutputDelimited_10 = 0;

				String fileName_tFileOutputDelimited_10 = "";
				fileName_tFileOutputDelimited_10 = (new java.io.File(context.extractPathReferential + "AGE_RANGE.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_10 = null;
				String extension_tFileOutputDelimited_10 = null;
				String directory_tFileOutputDelimited_10 = null;
				if ((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0,
								fileName_tFileOutputDelimited_10.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0,
							fileName_tFileOutputDelimited_10.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0,
								fileName_tFileOutputDelimited_10.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					}
					directory_tFileOutputDelimited_10 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_10 = true;
				java.io.File filetFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME", fileName_tFileOutputDelimited_10);
				if (filetFileOutputDelimited_10.exists()) {
					isFileGenerated_tFileOutputDelimited_10 = false;
				}
				int nb_line_tFileOutputDelimited_10 = 0;
				int splitedFileNo_tFileOutputDelimited_10 = 0;
				int currentRow_tFileOutputDelimited_10 = 0;

				final String OUT_DELIM_tFileOutputDelimited_10 = /**
																	 * Start field
																	 * tFileOutputDelimited_10:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_10:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_10 = /**
																		 * Start field
																		 * tFileOutputDelimited_10:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_10:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_10 != null
						&& directory_tFileOutputDelimited_10.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_10 = new java.io.File(directory_tFileOutputDelimited_10);
					if (!dir_tFileOutputDelimited_10.exists()) {
						dir_tFileOutputDelimited_10.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_10 = null;

				outtFileOutputDelimited_10 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_10, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_10.length() == 0) {
					outtFileOutputDelimited_10.write("ENUMERATIONVALUE");
					outtFileOutputDelimited_10.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_10", outtFileOutputDelimited_10);
				resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);

				/**
				 * [tFileOutputDelimited_10 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_4 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String port_tDBInput_4 = context.SQLSERVER_Port;
				String dbname_tDBInput_4 = context.SQLSERVER_Database;
				String url_tDBInput_4 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_4)) {
					url_tDBInput_4 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_4)) {
					url_tDBInput_4 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_4 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_4 = context.SQLSERVER_Schema;

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "select ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Age Group'";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row8.ENUMERATIONVALUE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row8.ENUMERATIONVALUE = tmpContent_tDBInput_4;
								}
							} else {
								row8.ENUMERATIONVALUE = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 main ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

						StringBuilder sb_tFileOutputDelimited_10 = new StringBuilder();
						if (row8.ENUMERATIONVALUE != null) {
							sb_tFileOutputDelimited_10.append(row8.ENUMERATIONVALUE);
						}
						sb_tFileOutputDelimited_10.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);

						nb_line_tFileOutputDelimited_10++;
						resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);

						outtFileOutputDelimited_10.write(sb_tFileOutputDelimited_10.toString());

						tos_count_tFileOutputDelimited_10++;

						/**
						 * [tFileOutputDelimited_10 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

						/**
						 * [tFileOutputDelimited_10 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

						/**
						 * [tFileOutputDelimited_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 end ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (outtFileOutputDelimited_10 != null) {
					outtFileOutputDelimited_10.flush();
					outtFileOutputDelimited_10.close();
				}

				globalMap.put("tFileOutputDelimited_10_NB_LINE", nb_line_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME", fileName_tFileOutputDelimited_10);

				resourceMap.put("finish_tFileOutputDelimited_10", true);

				ok_Hash.put("tFileOutputDelimited_10", true);
				end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

				tRunJob_9Process(globalMap);

				/**
				 * [tFileOutputDelimited_10 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (resourceMap.get("finish_tFileOutputDelimited_10") == null) {

					java.io.Writer outtFileOutputDelimited_10 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_10");
					if (outtFileOutputDelimited_10 != null) {
						outtFileOutputDelimited_10.flush();
						outtFileOutputDelimited_10.close();
					}

				}

				/**
				 * [tFileOutputDelimited_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_9 begin ] start
				 */

				ok_Hash.put("tRunJob_9", false);
				start_Hash.put("tRunJob_9", System.currentTimeMillis());

				currentComponent = "tRunJob_9";

				int tos_count_tRunJob_9 = 0;

				/**
				 * [tRunJob_9 begin ] stop
				 */

				/**
				 * [tRunJob_9 main ] start
				 */

				currentComponent = "tRunJob_9";

				java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();

				paraList_tRunJob_9.add("--father_pid=" + pid);

				paraList_tRunJob_9.add("--root_pid=" + rootPid);

				paraList_tRunJob_9.add("--father_node=tRunJob_9");

				paraList_tRunJob_9.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_9.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_9.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_9.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_9 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_9 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_9".equals(tRunJobName_tRunJob_9) && childResumePath_tRunJob_9 != null) {
					paraList_tRunJob_9.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_9");

				java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_9 = null;

				obj_tRunJob_9 = context.extractPathReferential + "AGE_RANGE.csv";
				if (obj_tRunJob_9 != null) {
					paraList_tRunJob_9.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_9));
				} else {
					paraList_tRunJob_9.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_9.put("FilePathToUpload", obj_tRunJob_9);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_9 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_9) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
							.entrySet()) {
						dataSources_tRunJob_9.put(talendDataSourceEntry_tRunJob_9.getKey(),
								talendDataSourceEntry_tRunJob_9.getValue().getRawDataSource());
					}
					childJob_tRunJob_9.setDataSources(dataSources_tRunJob_9);
				}

				childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;

				String[][] childReturn_tRunJob_9 = childJob_tRunJob_9
						.runJob((String[]) paraList_tRunJob_9.toArray(new String[paraList_tRunJob_9.size()]));

				errorCode = childJob_tRunJob_9.getErrorCode();

				if (childJob_tRunJob_9.getErrorCode() == null) {
					globalMap.put("tRunJob_9_CHILD_RETURN_CODE",
							childJob_tRunJob_9.getStatus() != null && ("failure").equals(childJob_tRunJob_9.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getErrorCode());
				}
				if (childJob_tRunJob_9.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_9.getExceptionStackTrace());
				}

				if (childJob_tRunJob_9.getErrorCode() != null || ("failure").equals(childJob_tRunJob_9.getStatus())) {
					java.lang.Exception ce_tRunJob_9 = childJob_tRunJob_9.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_9 != null)
							? (ce_tRunJob_9.getClass().getName() + ": " + ce_tRunJob_9.getMessage())
							: ""));
				}

				tos_count_tRunJob_9++;

				/**
				 * [tRunJob_9 main ] stop
				 */

				/**
				 * [tRunJob_9 process_data_begin ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_9 process_data_end ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 process_data_end ] stop
				 */

				/**
				 * [tRunJob_9 end ] start
				 */

				currentComponent = "tRunJob_9";

				ok_Hash.put("tRunJob_9", true);
				end_Hash.put("tRunJob_9", System.currentTimeMillis());

				/**
				 * [tRunJob_9 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_9 finally ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_11 begin ] start
				 */

				ok_Hash.put("tFileDelete_11", false);
				start_Hash.put("tFileDelete_11", System.currentTimeMillis());

				currentComponent = "tFileDelete_11";

				int tos_count_tFileDelete_11 = 0;

				/**
				 * [tFileDelete_11 begin ] stop
				 */

				/**
				 * [tFileDelete_11 main ] start
				 */

				currentComponent = "tFileDelete_11";

				class DeleteFoldertFileDelete_11 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_11 = new java.io.File(context.extractPathReferential + "SIZE_RANGE.csv");
				if (file_tFileDelete_11.exists() && file_tFileDelete_11.isFile()) {
					if (file_tFileDelete_11.delete()) {
						globalMap.put("tFileDelete_11_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_11_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_11_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_11_DELETE_PATH", context.extractPathReferential + "SIZE_RANGE.csv");

				tos_count_tFileDelete_11++;

				/**
				 * [tFileDelete_11 main ] stop
				 */

				/**
				 * [tFileDelete_11 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_11";

				/**
				 * [tFileDelete_11 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_11 process_data_end ] start
				 */

				currentComponent = "tFileDelete_11";

				/**
				 * [tFileDelete_11 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_11 end ] start
				 */

				currentComponent = "tFileDelete_11";

				ok_Hash.put("tFileDelete_11", true);
				end_Hash.put("tFileDelete_11", System.currentTimeMillis());

				tDBInput_3Process(globalMap);

				/**
				 * [tFileDelete_11 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_11 finally ] start
				 */

				currentComponent = "tFileDelete_11";

				/**
				 * [tFileDelete_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_11_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String ENUMERATIONVALUE;

		public String getENUMERATIONVALUE() {
			return this.ENUMERATIONVALUE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.ENUMERATIONVALUE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENUMERATIONVALUE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENUMERATIONVALUE=" + ENUMERATIONVALUE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_11", false);
				start_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_11";

				int tos_count_tFileOutputDelimited_11 = 0;

				String fileName_tFileOutputDelimited_11 = "";
				fileName_tFileOutputDelimited_11 = (new java.io.File(context.extractPathReferential + "SIZE_RANGE.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_11 = null;
				String extension_tFileOutputDelimited_11 = null;
				String directory_tFileOutputDelimited_11 = null;
				if ((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") < fileName_tFileOutputDelimited_11
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0,
								fileName_tFileOutputDelimited_11.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0,
							fileName_tFileOutputDelimited_11.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0,
								fileName_tFileOutputDelimited_11.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					}
					directory_tFileOutputDelimited_11 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_11 = true;
				java.io.File filetFileOutputDelimited_11 = new java.io.File(fileName_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME", fileName_tFileOutputDelimited_11);
				if (filetFileOutputDelimited_11.exists()) {
					isFileGenerated_tFileOutputDelimited_11 = false;
				}
				int nb_line_tFileOutputDelimited_11 = 0;
				int splitedFileNo_tFileOutputDelimited_11 = 0;
				int currentRow_tFileOutputDelimited_11 = 0;

				final String OUT_DELIM_tFileOutputDelimited_11 = /**
																	 * Start field
																	 * tFileOutputDelimited_11:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_11:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_11 = /**
																		 * Start field
																		 * tFileOutputDelimited_11:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_11:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_11 != null
						&& directory_tFileOutputDelimited_11.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_11 = new java.io.File(directory_tFileOutputDelimited_11);
					if (!dir_tFileOutputDelimited_11.exists()) {
						dir_tFileOutputDelimited_11.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_11 = null;

				outtFileOutputDelimited_11 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_11, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_11.length() == 0) {
					outtFileOutputDelimited_11.write("ENUMERATIONVALUE");
					outtFileOutputDelimited_11.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_11", outtFileOutputDelimited_11);
				resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);

				/**
				 * [tFileOutputDelimited_11 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_3 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3);
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_3 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String port_tDBInput_3 = context.SQLSERVER_Port;
				String dbname_tDBInput_3 = context.SQLSERVER_Database;
				String url_tDBInput_3 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_3)) {
					url_tDBInput_3 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_3)) {
					url_tDBInput_3 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_3 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_3 = context.SQLSERVER_Schema;

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "select ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Size Range'";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row9.ENUMERATIONVALUE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row9.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row9.ENUMERATIONVALUE = tmpContent_tDBInput_3;
								}
							} else {
								row9.ENUMERATIONVALUE = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_11 main ] start
						 */

						currentComponent = "tFileOutputDelimited_11";

						StringBuilder sb_tFileOutputDelimited_11 = new StringBuilder();
						if (row9.ENUMERATIONVALUE != null) {
							sb_tFileOutputDelimited_11.append(row9.ENUMERATIONVALUE);
						}
						sb_tFileOutputDelimited_11.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);

						nb_line_tFileOutputDelimited_11++;
						resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);

						outtFileOutputDelimited_11.write(sb_tFileOutputDelimited_11.toString());

						tos_count_tFileOutputDelimited_11++;

						/**
						 * [tFileOutputDelimited_11 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_11 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_11";

						/**
						 * [tFileOutputDelimited_11 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_11 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_11";

						/**
						 * [tFileOutputDelimited_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 end ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (outtFileOutputDelimited_11 != null) {
					outtFileOutputDelimited_11.flush();
					outtFileOutputDelimited_11.close();
				}

				globalMap.put("tFileOutputDelimited_11_NB_LINE", nb_line_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME", fileName_tFileOutputDelimited_11);

				resourceMap.put("finish_tFileOutputDelimited_11", true);

				ok_Hash.put("tFileOutputDelimited_11", true);
				end_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

				tRunJob_10Process(globalMap);

				/**
				 * [tFileOutputDelimited_11 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (resourceMap.get("finish_tFileOutputDelimited_11") == null) {

					java.io.Writer outtFileOutputDelimited_11 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_11");
					if (outtFileOutputDelimited_11 != null) {
						outtFileOutputDelimited_11.flush();
						outtFileOutputDelimited_11.close();
					}

				}

				/**
				 * [tFileOutputDelimited_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_10 begin ] start
				 */

				ok_Hash.put("tRunJob_10", false);
				start_Hash.put("tRunJob_10", System.currentTimeMillis());

				currentComponent = "tRunJob_10";

				int tos_count_tRunJob_10 = 0;

				/**
				 * [tRunJob_10 begin ] stop
				 */

				/**
				 * [tRunJob_10 main ] start
				 */

				currentComponent = "tRunJob_10";

				java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();

				paraList_tRunJob_10.add("--father_pid=" + pid);

				paraList_tRunJob_10.add("--root_pid=" + rootPid);

				paraList_tRunJob_10.add("--father_node=tRunJob_10");

				paraList_tRunJob_10.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_10.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_10.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null) {
					paraList_tRunJob_10.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");

				java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_10 = null;

				obj_tRunJob_10 = context.extractPathReferential + "SIZE_RANGE.csv";
				if (obj_tRunJob_10 != null) {
					paraList_tRunJob_10.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_10));
				} else {
					paraList_tRunJob_10.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_10.put("FilePathToUpload", obj_tRunJob_10);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_10 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_10) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
							.entrySet()) {
						dataSources_tRunJob_10.put(talendDataSourceEntry_tRunJob_10.getKey(),
								talendDataSourceEntry_tRunJob_10.getValue().getRawDataSource());
					}
					childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
				}

				childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;

				String[][] childReturn_tRunJob_10 = childJob_tRunJob_10
						.runJob((String[]) paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));

				errorCode = childJob_tRunJob_10.getErrorCode();

				if (childJob_tRunJob_10.getErrorCode() == null) {
					globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_10.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getErrorCode());
				}
				if (childJob_tRunJob_10.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_10.getExceptionStackTrace());
				}

				if (childJob_tRunJob_10.getErrorCode() != null || ("failure").equals(childJob_tRunJob_10.getStatus())) {
					java.lang.Exception ce_tRunJob_10 = childJob_tRunJob_10.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_10 != null)
							? (ce_tRunJob_10.getClass().getName() + ": " + ce_tRunJob_10.getMessage())
							: ""));
				}

				tos_count_tRunJob_10++;

				/**
				 * [tRunJob_10 main ] stop
				 */

				/**
				 * [tRunJob_10 process_data_begin ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_10 process_data_end ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 process_data_end ] stop
				 */

				/**
				 * [tRunJob_10 end ] start
				 */

				currentComponent = "tRunJob_10";

				ok_Hash.put("tRunJob_10", true);
				end_Hash.put("tRunJob_10", System.currentTimeMillis());

				/**
				 * [tRunJob_10 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_10 finally ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_12 begin ] start
				 */

				ok_Hash.put("tFileDelete_12", false);
				start_Hash.put("tFileDelete_12", System.currentTimeMillis());

				currentComponent = "tFileDelete_12";

				int tos_count_tFileDelete_12 = 0;

				/**
				 * [tFileDelete_12 begin ] stop
				 */

				/**
				 * [tFileDelete_12 main ] start
				 */

				currentComponent = "tFileDelete_12";

				class DeleteFoldertFileDelete_12 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_12 = new java.io.File(context.extractPathReferential + "FASHION.csv");
				if (file_tFileDelete_12.exists() && file_tFileDelete_12.isFile()) {
					if (file_tFileDelete_12.delete()) {
						globalMap.put("tFileDelete_12_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_12_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_12_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_12_DELETE_PATH", context.extractPathReferential + "FASHION.csv");

				tos_count_tFileDelete_12++;

				/**
				 * [tFileDelete_12 main ] stop
				 */

				/**
				 * [tFileDelete_12 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_12";

				/**
				 * [tFileDelete_12 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_12 process_data_end ] start
				 */

				currentComponent = "tFileDelete_12";

				/**
				 * [tFileDelete_12 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_12 end ] start
				 */

				currentComponent = "tFileDelete_12";

				ok_Hash.put("tFileDelete_12", true);
				end_Hash.put("tFileDelete_12", System.currentTimeMillis());

				tDBInput_2Process(globalMap);

				/**
				 * [tFileDelete_12 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_12 finally ] start
				 */

				currentComponent = "tFileDelete_12";

				/**
				 * [tFileDelete_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_12_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String NAME3;

		public String getNAME3() {
			return this.NAME3;
		}

		public String CATEGORYCODE;

		public String getCATEGORYCODE() {
			return this.CATEGORYCODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.NAME3 = readString(dis);

					this.CATEGORYCODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NAME3, dos);

				// String

				writeString(this.CATEGORYCODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NAME3=" + NAME3);
			sb.append(",CATEGORYCODE=" + CATEGORYCODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tFileOutputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_12", false);
				start_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_12";

				int tos_count_tFileOutputDelimited_12 = 0;

				String fileName_tFileOutputDelimited_12 = "";
				fileName_tFileOutputDelimited_12 = (new java.io.File(context.extractPathReferential + "FASHION.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_12 = null;
				String extension_tFileOutputDelimited_12 = null;
				String directory_tFileOutputDelimited_12 = null;
				if ((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") < fileName_tFileOutputDelimited_12
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0,
								fileName_tFileOutputDelimited_12.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0,
							fileName_tFileOutputDelimited_12.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0,
								fileName_tFileOutputDelimited_12.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					}
					directory_tFileOutputDelimited_12 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_12 = true;
				java.io.File filetFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME", fileName_tFileOutputDelimited_12);
				if (filetFileOutputDelimited_12.exists()) {
					isFileGenerated_tFileOutputDelimited_12 = false;
				}
				int nb_line_tFileOutputDelimited_12 = 0;
				int splitedFileNo_tFileOutputDelimited_12 = 0;
				int currentRow_tFileOutputDelimited_12 = 0;

				final String OUT_DELIM_tFileOutputDelimited_12 = /**
																	 * Start field
																	 * tFileOutputDelimited_12:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_12:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_12 = /**
																		 * Start field
																		 * tFileOutputDelimited_12:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_12:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_12 != null
						&& directory_tFileOutputDelimited_12.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_12 = new java.io.File(directory_tFileOutputDelimited_12);
					if (!dir_tFileOutputDelimited_12.exists()) {
						dir_tFileOutputDelimited_12.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_12 = null;

				outtFileOutputDelimited_12 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_12, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_12.length() == 0) {
					outtFileOutputDelimited_12.write("NAME3");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("CATEGORYCODE");
					outtFileOutputDelimited_12.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_12", outtFileOutputDelimited_12);
				resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

				/**
				 * [tFileOutputDelimited_12 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_2 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String port_tDBInput_2 = context.SQLSERVER_Port;
				String dbname_tDBInput_2 = context.SQLSERVER_Database;
				String url_tDBInput_2 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_2)) {
					url_tDBInput_2 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_2)) {
					url_tDBInput_2 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_2 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_2 = context.SQLSERVER_Schema;

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "\nselect FRIENDLYCATEGORYNAME as NAME3, CATEGORYCODE from  data.D365_ProductCategories\nwhere PARENTPRODUCTCATEGORYHIER"
						+ "ARCHYNAME = 'Product Family Hierarchy'\nand PARENTPRODUCTCATEGORYCODE is null\n\n\n";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row10.NAME3 = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.NAME3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row10.NAME3 = tmpContent_tDBInput_2;
								}
							} else {
								row10.NAME3 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row10.CATEGORYCODE = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.CATEGORYCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row10.CATEGORYCODE = tmpContent_tDBInput_2;
								}
							} else {
								row10.CATEGORYCODE = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_12 main ] start
						 */

						currentComponent = "tFileOutputDelimited_12";

						StringBuilder sb_tFileOutputDelimited_12 = new StringBuilder();
						if (row10.NAME3 != null) {
							sb_tFileOutputDelimited_12.append(row10.NAME3);
						}
						sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
						if (row10.CATEGORYCODE != null) {
							sb_tFileOutputDelimited_12.append(row10.CATEGORYCODE);
						}
						sb_tFileOutputDelimited_12.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);

						nb_line_tFileOutputDelimited_12++;
						resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

						outtFileOutputDelimited_12.write(sb_tFileOutputDelimited_12.toString());

						tos_count_tFileOutputDelimited_12++;

						/**
						 * [tFileOutputDelimited_12 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_12 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_12";

						/**
						 * [tFileOutputDelimited_12 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_12 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_12";

						/**
						 * [tFileOutputDelimited_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 end ] start
				 */

				currentComponent = "tFileOutputDelimited_12";

				if (outtFileOutputDelimited_12 != null) {
					outtFileOutputDelimited_12.flush();
					outtFileOutputDelimited_12.close();
				}

				globalMap.put("tFileOutputDelimited_12_NB_LINE", nb_line_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME", fileName_tFileOutputDelimited_12);

				resourceMap.put("finish_tFileOutputDelimited_12", true);

				ok_Hash.put("tFileOutputDelimited_12", true);
				end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

				tRunJob_11Process(globalMap);

				/**
				 * [tFileOutputDelimited_12 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_12";

				if (resourceMap.get("finish_tFileOutputDelimited_12") == null) {

					java.io.Writer outtFileOutputDelimited_12 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_12");
					if (outtFileOutputDelimited_12 != null) {
						outtFileOutputDelimited_12.flush();
						outtFileOutputDelimited_12.close();
					}

				}

				/**
				 * [tFileOutputDelimited_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_11 begin ] start
				 */

				ok_Hash.put("tRunJob_11", false);
				start_Hash.put("tRunJob_11", System.currentTimeMillis());

				currentComponent = "tRunJob_11";

				int tos_count_tRunJob_11 = 0;

				/**
				 * [tRunJob_11 begin ] stop
				 */

				/**
				 * [tRunJob_11 main ] start
				 */

				currentComponent = "tRunJob_11";

				java.util.List<String> paraList_tRunJob_11 = new java.util.ArrayList<String>();

				paraList_tRunJob_11.add("--father_pid=" + pid);

				paraList_tRunJob_11.add("--root_pid=" + rootPid);

				paraList_tRunJob_11.add("--father_node=tRunJob_11");

				paraList_tRunJob_11.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_11.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_11.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_11.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_11 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_11 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_11".equals(tRunJobName_tRunJob_11) && childResumePath_tRunJob_11 != null) {
					paraList_tRunJob_11.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_11.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_11");

				java.util.Map<String, Object> parentContextMap_tRunJob_11 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_11 = null;

				obj_tRunJob_11 = context.extractPathReferential + "FASHION.csv";
				if (obj_tRunJob_11 != null) {
					paraList_tRunJob_11.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_11));
				} else {
					paraList_tRunJob_11.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_11.put("FilePathToUpload", obj_tRunJob_11);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_11 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_11 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_11) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_11 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_11 : talendDataSources_tRunJob_11
							.entrySet()) {
						dataSources_tRunJob_11.put(talendDataSourceEntry_tRunJob_11.getKey(),
								talendDataSourceEntry_tRunJob_11.getValue().getRawDataSource());
					}
					childJob_tRunJob_11.setDataSources(dataSources_tRunJob_11);
				}

				childJob_tRunJob_11.parentContextMap = parentContextMap_tRunJob_11;

				String[][] childReturn_tRunJob_11 = childJob_tRunJob_11
						.runJob((String[]) paraList_tRunJob_11.toArray(new String[paraList_tRunJob_11.size()]));

				errorCode = childJob_tRunJob_11.getErrorCode();

				if (childJob_tRunJob_11.getErrorCode() == null) {
					globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_11.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getErrorCode());
				}
				if (childJob_tRunJob_11.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_11_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_11.getExceptionStackTrace());
				}

				if (childJob_tRunJob_11.getErrorCode() != null || ("failure").equals(childJob_tRunJob_11.getStatus())) {
					java.lang.Exception ce_tRunJob_11 = childJob_tRunJob_11.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_11 != null)
							? (ce_tRunJob_11.getClass().getName() + ": " + ce_tRunJob_11.getMessage())
							: ""));
				}

				tos_count_tRunJob_11++;

				/**
				 * [tRunJob_11 main ] stop
				 */

				/**
				 * [tRunJob_11 process_data_begin ] start
				 */

				currentComponent = "tRunJob_11";

				/**
				 * [tRunJob_11 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_11 process_data_end ] start
				 */

				currentComponent = "tRunJob_11";

				/**
				 * [tRunJob_11 process_data_end ] stop
				 */

				/**
				 * [tRunJob_11 end ] start
				 */

				currentComponent = "tRunJob_11";

				ok_Hash.put("tRunJob_11", true);
				end_Hash.put("tRunJob_11", System.currentTimeMillis());

				/**
				 * [tRunJob_11 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_11 finally ] start
				 */

				currentComponent = "tRunJob_11";

				/**
				 * [tRunJob_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_11_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_13 begin ] start
				 */

				ok_Hash.put("tFileDelete_13", false);
				start_Hash.put("tFileDelete_13", System.currentTimeMillis());

				currentComponent = "tFileDelete_13";

				int tos_count_tFileDelete_13 = 0;

				/**
				 * [tFileDelete_13 begin ] stop
				 */

				/**
				 * [tFileDelete_13 main ] start
				 */

				currentComponent = "tFileDelete_13";

				class DeleteFoldertFileDelete_13 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_13 = new java.io.File(context.extractPathReferential + "PRODUCT.csv");
				if (file_tFileDelete_13.exists() && file_tFileDelete_13.isFile()) {
					if (file_tFileDelete_13.delete()) {
						globalMap.put("tFileDelete_13_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_13_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_13_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_13_DELETE_PATH", context.extractPathReferential + "PRODUCT.csv");

				tos_count_tFileDelete_13++;

				/**
				 * [tFileDelete_13 main ] stop
				 */

				/**
				 * [tFileDelete_13 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_13";

				/**
				 * [tFileDelete_13 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_13 process_data_end ] start
				 */

				currentComponent = "tFileDelete_13";

				/**
				 * [tFileDelete_13 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_13 end ] start
				 */

				currentComponent = "tFileDelete_13";

				ok_Hash.put("tFileDelete_13", true);
				end_Hash.put("tFileDelete_13", System.currentTimeMillis());

				tDBInput_1Process(globalMap);

				/**
				 * [tFileDelete_13 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_13 finally ] start
				 */

				currentComponent = "tFileDelete_13";

				/**
				 * [tFileDelete_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_13_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String PARENTNAME;

		public String getPARENTNAME() {
			return this.PARENTNAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.NAME = readString(dis);

					this.PARENTNAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.PARENTNAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NAME=" + NAME);
			sb.append(",PARENTNAME=" + PARENTNAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tFileOutputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_13", false);
				start_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_13";

				int tos_count_tFileOutputDelimited_13 = 0;

				String fileName_tFileOutputDelimited_13 = "";
				fileName_tFileOutputDelimited_13 = (new java.io.File(context.extractPathReferential + "PRODUCT.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_13 = null;
				String extension_tFileOutputDelimited_13 = null;
				String directory_tFileOutputDelimited_13 = null;
				if ((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0,
								fileName_tFileOutputDelimited_13.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0,
							fileName_tFileOutputDelimited_13.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0,
								fileName_tFileOutputDelimited_13.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					}
					directory_tFileOutputDelimited_13 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_13 = true;
				java.io.File filetFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME", fileName_tFileOutputDelimited_13);
				if (filetFileOutputDelimited_13.exists()) {
					isFileGenerated_tFileOutputDelimited_13 = false;
				}
				int nb_line_tFileOutputDelimited_13 = 0;
				int splitedFileNo_tFileOutputDelimited_13 = 0;
				int currentRow_tFileOutputDelimited_13 = 0;

				final String OUT_DELIM_tFileOutputDelimited_13 = /**
																	 * Start field
																	 * tFileOutputDelimited_13:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_13:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_13 = /**
																		 * Start field
																		 * tFileOutputDelimited_13:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_13:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_13 != null
						&& directory_tFileOutputDelimited_13.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_13 = new java.io.File(directory_tFileOutputDelimited_13);
					if (!dir_tFileOutputDelimited_13.exists()) {
						dir_tFileOutputDelimited_13.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_13 = null;

				outtFileOutputDelimited_13 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_13, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_13.length() == 0) {
					outtFileOutputDelimited_13.write("NAME");
					outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.write("PARENTNAME");
					outtFileOutputDelimited_13.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_13", outtFileOutputDelimited_13);
				resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);

				/**
				 * [tFileOutputDelimited_13 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_1 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String port_tDBInput_1 = context.SQLSERVER_Port;
				String dbname_tDBInput_1 = context.SQLSERVER_Database;
				String url_tDBInput_1 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_1)) {
					url_tDBInput_1 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_1)) {
					url_tDBInput_1 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_1 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_1 = context.SQLSERVER_Schema;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "\n\nselect FRIENDLYCATEGORYNAME as NAME, \nPARENT.NAME3 as PARENTNAME\nfrom  data.D365_ProductCategories\ninner join\n("
						+ "\nselect CATEGORYNAME AS NAME, PRODUCTCATEGORYHIERARCHYNAME as NAME2,FRIENDLYCATEGORYNAME as NAME3, LEFT(CATEGORYNAME,2)"
						+ " as CATEGORYCODE from  data.D365_ProductCategories\nwhere PARENTPRODUCTCATEGORYHIERARCHYNAME = 'Product Family Hierarchy"
						+ "'\nand PARENTPRODUCTCATEGORYNAME = 'Product Family Hierarchy'\n\n) as PARENT on PARENT.CATEGORYCODE = LEFT(PARENTPRODUCT"
						+ "CATEGORYNAME,2)\nwhere PARENTPRODUCTCATEGORYHIERARCHYNAME = 'Product Family Hierarchy'\n\n\n\n";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row11.NAME = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row11.NAME = tmpContent_tDBInput_1;
								}
							} else {
								row11.NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row11.PARENTNAME = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row11.PARENTNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row11.PARENTNAME = tmpContent_tDBInput_1;
								}
							} else {
								row11.PARENTNAME = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_13 main ] start
						 */

						currentComponent = "tFileOutputDelimited_13";

						StringBuilder sb_tFileOutputDelimited_13 = new StringBuilder();
						if (row11.NAME != null) {
							sb_tFileOutputDelimited_13.append(row11.NAME);
						}
						sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
						if (row11.PARENTNAME != null) {
							sb_tFileOutputDelimited_13.append(row11.PARENTNAME);
						}
						sb_tFileOutputDelimited_13.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);

						nb_line_tFileOutputDelimited_13++;
						resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write(sb_tFileOutputDelimited_13.toString());

						tos_count_tFileOutputDelimited_13++;

						/**
						 * [tFileOutputDelimited_13 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_13 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_13";

						/**
						 * [tFileOutputDelimited_13 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_13 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_13";

						/**
						 * [tFileOutputDelimited_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 end ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (outtFileOutputDelimited_13 != null) {
					outtFileOutputDelimited_13.flush();
					outtFileOutputDelimited_13.close();
				}

				globalMap.put("tFileOutputDelimited_13_NB_LINE", nb_line_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME", fileName_tFileOutputDelimited_13);

				resourceMap.put("finish_tFileOutputDelimited_13", true);

				ok_Hash.put("tFileOutputDelimited_13", true);
				end_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

				tRunJob_12Process(globalMap);

				/**
				 * [tFileOutputDelimited_13 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (resourceMap.get("finish_tFileOutputDelimited_13") == null) {

					java.io.Writer outtFileOutputDelimited_13 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_13");
					if (outtFileOutputDelimited_13 != null) {
						outtFileOutputDelimited_13.flush();
						outtFileOutputDelimited_13.close();
					}

				}

				/**
				 * [tFileOutputDelimited_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_12 begin ] start
				 */

				ok_Hash.put("tRunJob_12", false);
				start_Hash.put("tRunJob_12", System.currentTimeMillis());

				currentComponent = "tRunJob_12";

				int tos_count_tRunJob_12 = 0;

				/**
				 * [tRunJob_12 begin ] stop
				 */

				/**
				 * [tRunJob_12 main ] start
				 */

				currentComponent = "tRunJob_12";

				java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();

				paraList_tRunJob_12.add("--father_pid=" + pid);

				paraList_tRunJob_12.add("--root_pid=" + rootPid);

				paraList_tRunJob_12.add("--father_node=tRunJob_12");

				paraList_tRunJob_12.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_12.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_12.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_12.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_12 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_12 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_12".equals(tRunJobName_tRunJob_12) && childResumePath_tRunJob_12 != null) {
					paraList_tRunJob_12.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_12");

				java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_12 = null;

				obj_tRunJob_12 = context.extractPathReferential + "PRODUCT.csv";
				if (obj_tRunJob_12 != null) {
					paraList_tRunJob_12.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_12));
				} else {
					paraList_tRunJob_12.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_12.put("FilePathToUpload", obj_tRunJob_12);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_12 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_12) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_12 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_12 : talendDataSources_tRunJob_12
							.entrySet()) {
						dataSources_tRunJob_12.put(talendDataSourceEntry_tRunJob_12.getKey(),
								talendDataSourceEntry_tRunJob_12.getValue().getRawDataSource());
					}
					childJob_tRunJob_12.setDataSources(dataSources_tRunJob_12);
				}

				childJob_tRunJob_12.parentContextMap = parentContextMap_tRunJob_12;

				String[][] childReturn_tRunJob_12 = childJob_tRunJob_12
						.runJob((String[]) paraList_tRunJob_12.toArray(new String[paraList_tRunJob_12.size()]));

				errorCode = childJob_tRunJob_12.getErrorCode();

				if (childJob_tRunJob_12.getErrorCode() == null) {
					globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_12.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getErrorCode());
				}
				if (childJob_tRunJob_12.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_12.getExceptionStackTrace());
				}

				if (childJob_tRunJob_12.getErrorCode() != null || ("failure").equals(childJob_tRunJob_12.getStatus())) {
					java.lang.Exception ce_tRunJob_12 = childJob_tRunJob_12.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_12 != null)
							? (ce_tRunJob_12.getClass().getName() + ": " + ce_tRunJob_12.getMessage())
							: ""));
				}

				tos_count_tRunJob_12++;

				/**
				 * [tRunJob_12 main ] stop
				 */

				/**
				 * [tRunJob_12 process_data_begin ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_12 process_data_end ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 process_data_end ] stop
				 */

				/**
				 * [tRunJob_12 end ] start
				 */

				currentComponent = "tRunJob_12";

				ok_Hash.put("tRunJob_12", true);
				end_Hash.put("tRunJob_12", System.currentTimeMillis());

				/**
				 * [tRunJob_12 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_12 finally ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_14 begin ] start
				 */

				ok_Hash.put("tFileDelete_14", false);
				start_Hash.put("tFileDelete_14", System.currentTimeMillis());

				currentComponent = "tFileDelete_14";

				int tos_count_tFileDelete_14 = 0;

				/**
				 * [tFileDelete_14 begin ] stop
				 */

				/**
				 * [tFileDelete_14 main ] start
				 */

				currentComponent = "tFileDelete_14";

				class DeleteFoldertFileDelete_14 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_14 = new java.io.File(context.extractPathReferential + "LABEL.csv");
				if (file_tFileDelete_14.exists() && file_tFileDelete_14.isFile()) {
					if (file_tFileDelete_14.delete()) {
						globalMap.put("tFileDelete_14_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_14_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_14_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_14_DELETE_PATH", context.extractPathReferential + "LABEL.csv");

				tos_count_tFileDelete_14++;

				/**
				 * [tFileDelete_14 main ] stop
				 */

				/**
				 * [tFileDelete_14 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_14";

				/**
				 * [tFileDelete_14 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_14 process_data_end ] start
				 */

				currentComponent = "tFileDelete_14";

				/**
				 * [tFileDelete_14 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_14 end ] start
				 */

				currentComponent = "tFileDelete_14";

				ok_Hash.put("tFileDelete_14", true);
				end_Hash.put("tFileDelete_14", System.currentTimeMillis());

				tDBInput_13Process(globalMap);

				/**
				 * [tFileDelete_14 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_14 finally ] start
				 */

				currentComponent = "tFileDelete_14";

				/**
				 * [tFileDelete_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_14_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String Label_Code;

		public String getLabel_Code() {
			return this.Label_Code;
		}

		public String Label_D365;

		public String getLabel_D365() {
			return this.Label_D365;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.Label_Code = readString(dis);

					this.Label_D365 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Label_Code, dos);

				// String

				writeString(this.Label_D365, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Label_Code=" + Label_Code);
			sb.append(",Label_D365=" + Label_D365);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tFileOutputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_14", false);
				start_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_14";

				int tos_count_tFileOutputDelimited_14 = 0;

				String fileName_tFileOutputDelimited_14 = "";
				fileName_tFileOutputDelimited_14 = (new java.io.File(context.extractPathReferential + "LABEL.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_14 = null;
				String extension_tFileOutputDelimited_14 = null;
				String directory_tFileOutputDelimited_14 = null;
				if ((fileName_tFileOutputDelimited_14.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") < fileName_tFileOutputDelimited_14
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0,
								fileName_tFileOutputDelimited_14.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0,
							fileName_tFileOutputDelimited_14.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0,
								fileName_tFileOutputDelimited_14.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					}
					directory_tFileOutputDelimited_14 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_14 = true;
				java.io.File filetFileOutputDelimited_14 = new java.io.File(fileName_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME", fileName_tFileOutputDelimited_14);
				if (filetFileOutputDelimited_14.exists()) {
					isFileGenerated_tFileOutputDelimited_14 = false;
				}
				int nb_line_tFileOutputDelimited_14 = 0;
				int splitedFileNo_tFileOutputDelimited_14 = 0;
				int currentRow_tFileOutputDelimited_14 = 0;

				final String OUT_DELIM_tFileOutputDelimited_14 = /**
																	 * Start field
																	 * tFileOutputDelimited_14:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_14:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_14 = /**
																		 * Start field
																		 * tFileOutputDelimited_14:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_14:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_14 != null
						&& directory_tFileOutputDelimited_14.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_14 = new java.io.File(directory_tFileOutputDelimited_14);
					if (!dir_tFileOutputDelimited_14.exists()) {
						dir_tFileOutputDelimited_14.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_14 = null;

				outtFileOutputDelimited_14 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_14, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_14.length() == 0) {
					outtFileOutputDelimited_14.write("Label_Code");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("Label_D365");
					outtFileOutputDelimited_14.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_14", outtFileOutputDelimited_14);
				resourceMap.put("nb_line_tFileOutputDelimited_14", nb_line_tFileOutputDelimited_14);

				/**
				 * [tFileOutputDelimited_14 begin ] stop
				 */

				/**
				 * [tDBInput_13 begin ] start
				 */

				ok_Hash.put("tDBInput_13", false);
				start_Hash.put("tDBInput_13", System.currentTimeMillis());

				currentComponent = "tDBInput_13";

				int tos_count_tDBInput_13 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_13 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_13 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_13 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_13, talendToDBArray_tDBInput_13);
				int nb_line_tDBInput_13 = 0;
				java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_13 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;

				String port_tDBInput_13 = context.SQLSERVER_Port;
				String dbname_tDBInput_13 = context.SQLSERVER_Database;
				String url_tDBInput_13 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_13)) {
					url_tDBInput_13 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_13)) {
					url_tDBInput_13 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_13 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_13 = context.SQLSERVER_Schema;

				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13, dbUser_tDBInput_13,
						dbPwd_tDBInput_13);

				java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

				String dbquery_tDBInput_13 = "select LABELCODE as [Label Code], LABELD365 as [Label D365] from  data.D365_Labels\n";

				globalMap.put("tDBInput_13_QUERY", dbquery_tDBInput_13);
				java.sql.ResultSet rs_tDBInput_13 = null;

				try {
					rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
					java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
					int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

					String tmpContent_tDBInput_13 = null;

					while (rs_tDBInput_13.next()) {
						nb_line_tDBInput_13++;

						if (colQtyInRs_tDBInput_13 < 1) {
							row12.Label_Code = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(1);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.Label_Code = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row12.Label_Code = tmpContent_tDBInput_13;
								}
							} else {
								row12.Label_Code = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 2) {
							row12.Label_D365 = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(2);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.Label_D365 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row12.Label_D365 = tmpContent_tDBInput_13;
								}
							} else {
								row12.Label_D365 = null;
							}
						}

						/**
						 * [tDBInput_13 begin ] stop
						 */

						/**
						 * [tDBInput_13 main ] start
						 */

						currentComponent = "tDBInput_13";

						tos_count_tDBInput_13++;

						/**
						 * [tDBInput_13 main ] stop
						 */

						/**
						 * [tDBInput_13 process_data_begin ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_14 main ] start
						 */

						currentComponent = "tFileOutputDelimited_14";

						StringBuilder sb_tFileOutputDelimited_14 = new StringBuilder();
						if (row12.Label_Code != null) {
							sb_tFileOutputDelimited_14.append(row12.Label_Code);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row12.Label_D365 != null) {
							sb_tFileOutputDelimited_14.append(row12.Label_D365);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);

						nb_line_tFileOutputDelimited_14++;
						resourceMap.put("nb_line_tFileOutputDelimited_14", nb_line_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write(sb_tFileOutputDelimited_14.toString());

						tos_count_tFileOutputDelimited_14++;

						/**
						 * [tFileOutputDelimited_14 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_14 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_14";

						/**
						 * [tFileOutputDelimited_14 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_14 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_14";

						/**
						 * [tFileOutputDelimited_14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 process_data_end ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 end ] start
						 */

						currentComponent = "tDBInput_13";

					}
				} finally {
					if (rs_tDBInput_13 != null) {
						rs_tDBInput_13.close();
					}
					if (stmt_tDBInput_13 != null) {
						stmt_tDBInput_13.close();
					}
					if (conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {

						conn_tDBInput_13.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_13_NB_LINE", nb_line_tDBInput_13);

				ok_Hash.put("tDBInput_13", true);
				end_Hash.put("tDBInput_13", System.currentTimeMillis());

				/**
				 * [tDBInput_13 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_14 end ] start
				 */

				currentComponent = "tFileOutputDelimited_14";

				if (outtFileOutputDelimited_14 != null) {
					outtFileOutputDelimited_14.flush();
					outtFileOutputDelimited_14.close();
				}

				globalMap.put("tFileOutputDelimited_14_NB_LINE", nb_line_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME", fileName_tFileOutputDelimited_14);

				resourceMap.put("finish_tFileOutputDelimited_14", true);

				ok_Hash.put("tFileOutputDelimited_14", true);
				end_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

				tRunJob_13Process(globalMap);

				/**
				 * [tFileOutputDelimited_14 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_13 finally ] start
				 */

				currentComponent = "tDBInput_13";

				/**
				 * [tDBInput_13 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_14 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_14";

				if (resourceMap.get("finish_tFileOutputDelimited_14") == null) {

					java.io.Writer outtFileOutputDelimited_14 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_14");
					if (outtFileOutputDelimited_14 != null) {
						outtFileOutputDelimited_14.flush();
						outtFileOutputDelimited_14.close();
					}

				}

				/**
				 * [tFileOutputDelimited_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_13 begin ] start
				 */

				ok_Hash.put("tRunJob_13", false);
				start_Hash.put("tRunJob_13", System.currentTimeMillis());

				currentComponent = "tRunJob_13";

				int tos_count_tRunJob_13 = 0;

				/**
				 * [tRunJob_13 begin ] stop
				 */

				/**
				 * [tRunJob_13 main ] start
				 */

				currentComponent = "tRunJob_13";

				java.util.List<String> paraList_tRunJob_13 = new java.util.ArrayList<String>();

				paraList_tRunJob_13.add("--father_pid=" + pid);

				paraList_tRunJob_13.add("--root_pid=" + rootPid);

				paraList_tRunJob_13.add("--father_node=tRunJob_13");

				paraList_tRunJob_13.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_13.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_13.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_13.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_13 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_13 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_13".equals(tRunJobName_tRunJob_13) && childResumePath_tRunJob_13 != null) {
					paraList_tRunJob_13.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_13.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_13");

				java.util.Map<String, Object> parentContextMap_tRunJob_13 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_13 = null;

				obj_tRunJob_13 = context.extractPathReferential + "LABEL.csv";
				if (obj_tRunJob_13 != null) {
					paraList_tRunJob_13.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_13));
				} else {
					paraList_tRunJob_13.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_13.put("FilePathToUpload", obj_tRunJob_13);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_13 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_13 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_13) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_13 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_13 : talendDataSources_tRunJob_13
							.entrySet()) {
						dataSources_tRunJob_13.put(talendDataSourceEntry_tRunJob_13.getKey(),
								talendDataSourceEntry_tRunJob_13.getValue().getRawDataSource());
					}
					childJob_tRunJob_13.setDataSources(dataSources_tRunJob_13);
				}

				childJob_tRunJob_13.parentContextMap = parentContextMap_tRunJob_13;

				String[][] childReturn_tRunJob_13 = childJob_tRunJob_13
						.runJob((String[]) paraList_tRunJob_13.toArray(new String[paraList_tRunJob_13.size()]));

				errorCode = childJob_tRunJob_13.getErrorCode();

				if (childJob_tRunJob_13.getErrorCode() == null) {
					globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_13.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getErrorCode());
				}
				if (childJob_tRunJob_13.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_13_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_13.getExceptionStackTrace());
				}

				if (childJob_tRunJob_13.getErrorCode() != null || ("failure").equals(childJob_tRunJob_13.getStatus())) {
					java.lang.Exception ce_tRunJob_13 = childJob_tRunJob_13.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_13 != null)
							? (ce_tRunJob_13.getClass().getName() + ": " + ce_tRunJob_13.getMessage())
							: ""));
				}

				tos_count_tRunJob_13++;

				/**
				 * [tRunJob_13 main ] stop
				 */

				/**
				 * [tRunJob_13 process_data_begin ] start
				 */

				currentComponent = "tRunJob_13";

				/**
				 * [tRunJob_13 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_13 process_data_end ] start
				 */

				currentComponent = "tRunJob_13";

				/**
				 * [tRunJob_13 process_data_end ] stop
				 */

				/**
				 * [tRunJob_13 end ] start
				 */

				currentComponent = "tRunJob_13";

				ok_Hash.put("tRunJob_13", true);
				end_Hash.put("tRunJob_13", System.currentTimeMillis());

				/**
				 * [tRunJob_13 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_13 finally ] start
				 */

				currentComponent = "tRunJob_13";

				/**
				 * [tRunJob_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_15 begin ] start
				 */

				ok_Hash.put("tFileDelete_15", false);
				start_Hash.put("tFileDelete_15", System.currentTimeMillis());

				currentComponent = "tFileDelete_15";

				int tos_count_tFileDelete_15 = 0;

				/**
				 * [tFileDelete_15 begin ] stop
				 */

				/**
				 * [tFileDelete_15 main ] start
				 */

				currentComponent = "tFileDelete_15";

				class DeleteFoldertFileDelete_15 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_15 = new java.io.File(
						context.extractPathReferential + "PRODUCT_CHANNEL.csv");
				if (file_tFileDelete_15.exists() && file_tFileDelete_15.isFile()) {
					if (file_tFileDelete_15.delete()) {
						globalMap.put("tFileDelete_15_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_15_CURRENT_STATUS", "No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_15_CURRENT_STATUS", "File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_15_DELETE_PATH", context.extractPathReferential + "PRODUCT_CHANNEL.csv");

				tos_count_tFileDelete_15++;

				/**
				 * [tFileDelete_15 main ] stop
				 */

				/**
				 * [tFileDelete_15 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_15";

				/**
				 * [tFileDelete_15 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_15 process_data_end ] start
				 */

				currentComponent = "tFileDelete_15";

				/**
				 * [tFileDelete_15 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_15 end ] start
				 */

				currentComponent = "tFileDelete_15";

				ok_Hash.put("tFileDelete_15", true);
				end_Hash.put("tFileDelete_15", System.currentTimeMillis());

				tDBInput_14Process(globalMap);

				/**
				 * [tFileDelete_15 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_15 finally ] start
				 */

				currentComponent = "tFileDelete_15";

				/**
				 * [tFileDelete_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_15_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public String ENUMERATIONVALUE;

		public String getENUMERATIONVALUE() {
			return this.ENUMERATIONVALUE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.ENUMERATIONVALUE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ENUMERATIONVALUE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ENUMERATIONVALUE=" + ENUMERATIONVALUE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_15", false);
				start_Hash.put("tFileOutputDelimited_15", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_15";

				int tos_count_tFileOutputDelimited_15 = 0;

				String fileName_tFileOutputDelimited_15 = "";
				fileName_tFileOutputDelimited_15 = (new java.io.File(
						context.extractPathReferential + "PRODUCT_CHANNEL.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_15 = null;
				String extension_tFileOutputDelimited_15 = null;
				String directory_tFileOutputDelimited_15 = null;
				if ((fileName_tFileOutputDelimited_15.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") < fileName_tFileOutputDelimited_15
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15.substring(0,
								fileName_tFileOutputDelimited_15.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15.substring(0,
							fileName_tFileOutputDelimited_15.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15.substring(0,
								fileName_tFileOutputDelimited_15.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					}
					directory_tFileOutputDelimited_15 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_15 = true;
				java.io.File filetFileOutputDelimited_15 = new java.io.File(fileName_tFileOutputDelimited_15);
				globalMap.put("tFileOutputDelimited_15_FILE_NAME", fileName_tFileOutputDelimited_15);
				if (filetFileOutputDelimited_15.exists()) {
					isFileGenerated_tFileOutputDelimited_15 = false;
				}
				int nb_line_tFileOutputDelimited_15 = 0;
				int splitedFileNo_tFileOutputDelimited_15 = 0;
				int currentRow_tFileOutputDelimited_15 = 0;

				final String OUT_DELIM_tFileOutputDelimited_15 = /**
																	 * Start field
																	 * tFileOutputDelimited_15:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_15:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_15 = /**
																		 * Start field
																		 * tFileOutputDelimited_15:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_15:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_15 != null
						&& directory_tFileOutputDelimited_15.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_15 = new java.io.File(directory_tFileOutputDelimited_15);
					if (!dir_tFileOutputDelimited_15.exists()) {
						dir_tFileOutputDelimited_15.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_15 = null;

				outtFileOutputDelimited_15 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_15, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_15.length() == 0) {
					outtFileOutputDelimited_15.write("ENUMERATIONVALUE");
					outtFileOutputDelimited_15.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_15);
					outtFileOutputDelimited_15.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_15", outtFileOutputDelimited_15);
				resourceMap.put("nb_line_tFileOutputDelimited_15", nb_line_tFileOutputDelimited_15);

				/**
				 * [tFileOutputDelimited_15 begin ] stop
				 */

				/**
				 * [tDBInput_14 begin ] start
				 */

				ok_Hash.put("tDBInput_14", false);
				start_Hash.put("tDBInput_14", System.currentTimeMillis());

				currentComponent = "tDBInput_14";

				int tos_count_tDBInput_14 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_14 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_14 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_14 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_14, talendToDBArray_tDBInput_14);
				int nb_line_tDBInput_14 = 0;
				java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_14 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;

				String port_tDBInput_14 = context.SQLSERVER_Port;
				String dbname_tDBInput_14 = context.SQLSERVER_Database;
				String url_tDBInput_14 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_14)) {
					url_tDBInput_14 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_14)) {
					url_tDBInput_14 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_14 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_14 = context.SQLSERVER_Schema;

				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14, dbUser_tDBInput_14,
						dbPwd_tDBInput_14);

				java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

				String dbquery_tDBInput_14 = "\nselect ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Product Channel'\n";

				globalMap.put("tDBInput_14_QUERY", dbquery_tDBInput_14);
				java.sql.ResultSet rs_tDBInput_14 = null;

				try {
					rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
					java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
					int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

					String tmpContent_tDBInput_14 = null;

					while (rs_tDBInput_14.next()) {
						nb_line_tDBInput_14++;

						if (colQtyInRs_tDBInput_14 < 1) {
							row13.ENUMERATIONVALUE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(1);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row13.ENUMERATIONVALUE = tmpContent_tDBInput_14;
								}
							} else {
								row13.ENUMERATIONVALUE = null;
							}
						}

						/**
						 * [tDBInput_14 begin ] stop
						 */

						/**
						 * [tDBInput_14 main ] start
						 */

						currentComponent = "tDBInput_14";

						tos_count_tDBInput_14++;

						/**
						 * [tDBInput_14 main ] stop
						 */

						/**
						 * [tDBInput_14 process_data_begin ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_15 main ] start
						 */

						currentComponent = "tFileOutputDelimited_15";

						StringBuilder sb_tFileOutputDelimited_15 = new StringBuilder();
						if (row13.ENUMERATIONVALUE != null) {
							sb_tFileOutputDelimited_15.append(row13.ENUMERATIONVALUE);
						}
						sb_tFileOutputDelimited_15.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_15);

						nb_line_tFileOutputDelimited_15++;
						resourceMap.put("nb_line_tFileOutputDelimited_15", nb_line_tFileOutputDelimited_15);

						outtFileOutputDelimited_15.write(sb_tFileOutputDelimited_15.toString());

						tos_count_tFileOutputDelimited_15++;

						/**
						 * [tFileOutputDelimited_15 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_15 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_15";

						/**
						 * [tFileOutputDelimited_15 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_15 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_15";

						/**
						 * [tFileOutputDelimited_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 process_data_end ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 end ] start
						 */

						currentComponent = "tDBInput_14";

					}
				} finally {
					if (rs_tDBInput_14 != null) {
						rs_tDBInput_14.close();
					}
					if (stmt_tDBInput_14 != null) {
						stmt_tDBInput_14.close();
					}
					if (conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {

						conn_tDBInput_14.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_14_NB_LINE", nb_line_tDBInput_14);

				ok_Hash.put("tDBInput_14", true);
				end_Hash.put("tDBInput_14", System.currentTimeMillis());

				/**
				 * [tDBInput_14 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_15 end ] start
				 */

				currentComponent = "tFileOutputDelimited_15";

				if (outtFileOutputDelimited_15 != null) {
					outtFileOutputDelimited_15.flush();
					outtFileOutputDelimited_15.close();
				}

				globalMap.put("tFileOutputDelimited_15_NB_LINE", nb_line_tFileOutputDelimited_15);
				globalMap.put("tFileOutputDelimited_15_FILE_NAME", fileName_tFileOutputDelimited_15);

				resourceMap.put("finish_tFileOutputDelimited_15", true);

				ok_Hash.put("tFileOutputDelimited_15", true);
				end_Hash.put("tFileOutputDelimited_15", System.currentTimeMillis());

				tRunJob_14Process(globalMap);

				/**
				 * [tFileOutputDelimited_15 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_14 finally ] start
				 */

				currentComponent = "tDBInput_14";

				/**
				 * [tDBInput_14 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_15 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_15";

				if (resourceMap.get("finish_tFileOutputDelimited_15") == null) {

					java.io.Writer outtFileOutputDelimited_15 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_15");
					if (outtFileOutputDelimited_15 != null) {
						outtFileOutputDelimited_15.flush();
						outtFileOutputDelimited_15.close();
					}

				}

				/**
				 * [tFileOutputDelimited_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_14 begin ] start
				 */

				ok_Hash.put("tRunJob_14", false);
				start_Hash.put("tRunJob_14", System.currentTimeMillis());

				currentComponent = "tRunJob_14";

				int tos_count_tRunJob_14 = 0;

				/**
				 * [tRunJob_14 begin ] stop
				 */

				/**
				 * [tRunJob_14 main ] start
				 */

				currentComponent = "tRunJob_14";

				java.util.List<String> paraList_tRunJob_14 = new java.util.ArrayList<String>();

				paraList_tRunJob_14.add("--father_pid=" + pid);

				paraList_tRunJob_14.add("--root_pid=" + rootPid);

				paraList_tRunJob_14.add("--father_node=tRunJob_14");

				paraList_tRunJob_14.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_14.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_14.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_14.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_14 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_14 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_14".equals(tRunJobName_tRunJob_14) && childResumePath_tRunJob_14 != null) {
					paraList_tRunJob_14.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_14.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_14");

				java.util.Map<String, Object> parentContextMap_tRunJob_14 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_14 = null;

				obj_tRunJob_14 = context.extractPathReferential + "PRODUCT_CHANNEL.csv";
				if (obj_tRunJob_14 != null) {
					paraList_tRunJob_14.add(
							"--context_param FilePathToUpload=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_14));
				} else {
					paraList_tRunJob_14.add("--context_param FilePathToUpload="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_14.put("FilePathToUpload", obj_tRunJob_14);

				dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint childJob_tRunJob_14 = new dev.uploadfileinsharepoint_4_0.UploadFileInSharepoint();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_14) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_14 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_14 : talendDataSources_tRunJob_14
							.entrySet()) {
						dataSources_tRunJob_14.put(talendDataSourceEntry_tRunJob_14.getKey(),
								talendDataSourceEntry_tRunJob_14.getValue().getRawDataSource());
					}
					childJob_tRunJob_14.setDataSources(dataSources_tRunJob_14);
				}

				childJob_tRunJob_14.parentContextMap = parentContextMap_tRunJob_14;

				String[][] childReturn_tRunJob_14 = childJob_tRunJob_14
						.runJob((String[]) paraList_tRunJob_14.toArray(new String[paraList_tRunJob_14.size()]));

				errorCode = childJob_tRunJob_14.getErrorCode();

				if (childJob_tRunJob_14.getErrorCode() == null) {
					globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_14.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getErrorCode());
				}
				if (childJob_tRunJob_14.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_14_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_14.getExceptionStackTrace());
				}

				if (childJob_tRunJob_14.getErrorCode() != null || ("failure").equals(childJob_tRunJob_14.getStatus())) {
					java.lang.Exception ce_tRunJob_14 = childJob_tRunJob_14.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_14 != null)
							? (ce_tRunJob_14.getClass().getName() + ": " + ce_tRunJob_14.getMessage())
							: ""));
				}

				tos_count_tRunJob_14++;

				/**
				 * [tRunJob_14 main ] stop
				 */

				/**
				 * [tRunJob_14 process_data_begin ] start
				 */

				currentComponent = "tRunJob_14";

				/**
				 * [tRunJob_14 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_14 process_data_end ] start
				 */

				currentComponent = "tRunJob_14";

				/**
				 * [tRunJob_14 process_data_end ] stop
				 */

				/**
				 * [tRunJob_14 end ] start
				 */

				currentComponent = "tRunJob_14";

				ok_Hash.put("tRunJob_14", true);
				end_Hash.put("tRunJob_14", System.currentTimeMillis());

				/**
				 * [tRunJob_14 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_14 finally ] start
				 */

				currentComponent = "tRunJob_14";

				/**
				 * [tRunJob_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");
				if (conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String url_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				String port_connectionStatsLogs = context.SQLSERVER_Port;
				String dbname_connectionStatsLogs = context.SQLSERVER_Database;
				if (!"".equals(port_connectionStatsLogs)) {
					url_connectionStatsLogs += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_connectionStatsLogs)) {

					url_connectionStatsLogs += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_connectionStatsLogs += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbUser_connectionStatsLogs = context.SQLSERVER_Login;

				final String decryptedPassword_connectionStatsLogs = context.SQLSERVER_Password;
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				String sharedConnectionName_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_Server + ":"
						+ context.SQLSERVER_Port + ";DatabaseName=" + context.SQLSERVER_Schema + ";"
						+ context.SQLSERVER_AdditionalParams + "" + "_StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"com.microsoft.sqlserver.jdbc.SQLServerDriver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("dbschema_connectionStatsLogs", context.SQLSERVER_Schema);

				globalMap.put("db_connectionStatsLogs", context.SQLSERVER_Database);

				globalMap.put("conn_connectionStatsLogs", conn_connectionStatsLogs);

				globalMap.put("shareIdentitySetting_connectionStatsLogs", false);

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct
			implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];
		static byte[] commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length) {
					if (length < 1024 && commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL.length == 0) {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[1024];
					} else {
						commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length);
				strReturn = new String(commonByteArray_DEV_BUY_EXTRACT_REFERENTIAL, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_BUY_EXTRACT_REFERENTIAL) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				int tos_count_talendLogs_DB = 0;

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;
				int rejectedCount_talendLogs_DB = 0;
				String dbschema_talendLogs_DB = null;
				String tableName_talendLogs_DB = null;
				boolean whetherReject_talendLogs_DB = false;

				java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
				long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_talendLogs_DB;

				java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_talendLogs_DB = null;
				String dbUser_talendLogs_DB = null;
				dbschema_talendLogs_DB = (String) globalMap.get("dbschema_connectionStatsLogs");
				conn_talendLogs_DB = (java.sql.Connection) globalMap.get("conn_connectionStatsLogs");

				int batchSize_talendLogs_DB = 10000;
				int batchSizeCounter_talendLogs_DB = 0;

				if (dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
					tableName_talendLogs_DB = "log";
				} else {
					tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "log";
				}
				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "log" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }
							boolean whetherExist_talendLogs_DB = false;
							try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
								try {
									isExistStmt_talendLogs_DB
											.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]");
									whetherExist_talendLogs_DB = true;
								} catch (java.lang.Exception e) {
									whetherExist_talendLogs_DB = false;
								}
							}
							if (!whetherExist_talendLogs_DB) {
								try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement()) {
									stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB
											+ "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
								}
							}
							GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB
						+ "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "log" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,
						insert_talendLogs_DB, keyPsmt_talendLogs_DB);
				resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
				boolean isShareIdentity_talendLogs_DB = globalMap
						.get("shareIdentitySetting_connectionStatsLogs") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB main ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						whetherReject_talendLogs_DB = false;
						if (row_talendLogs_LOGS.moment != null) {
							pstmt_talendLogs_DB.setTimestamp(1,
									new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
						} else {
							pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
						}

						if (row_talendLogs_LOGS.pid == null) {
							pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
						}

						if (row_talendLogs_LOGS.root_pid == null) {
							pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
						}

						if (row_talendLogs_LOGS.father_pid == null) {
							pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
						}

						if (row_talendLogs_LOGS.project == null) {
							pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
						}

						if (row_talendLogs_LOGS.job == null) {
							pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
						}

						if (row_talendLogs_LOGS.context == null) {
							pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
						}

						if (row_talendLogs_LOGS.priority == null) {
							pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
						}

						if (row_talendLogs_LOGS.type == null) {
							pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
						}

						if (row_talendLogs_LOGS.origin == null) {
							pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
						}

						if (row_talendLogs_LOGS.message == null) {
							pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
						}

						if (row_talendLogs_LOGS.code == null) {
							pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
						}

						pstmt_talendLogs_DB.addBatch();
						nb_line_talendLogs_DB++;

						batchSizeCounter_talendLogs_DB++;

						////////// batch execute by batch size///////
						class LimitBytesHelper_talendLogs_DB {
							public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									int countSum_talendLogs_DB = 0;
									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}

							public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}
						}
						if ((batchSize_talendLogs_DB > 0)
								&& (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {

							insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB()
									.limitBytePart1(insertedCount_talendLogs_DB, pstmt_talendLogs_DB);

							batchSizeCounter_talendLogs_DB = 0;
						}

						//////////// commit every////////////

						tos_count_talendLogs_DB++;

						/**
						 * [talendLogs_DB main ] stop
						 */

						/**
						 * [talendLogs_DB process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(String.format(
							"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				try {
					int countSum_talendLogs_DB = 0;
					if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {

						for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
							if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							countSum_talendLogs_DB += countEach_talendLogs_DB;
						}

					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_talendLogs_DB = 0;
					for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

					System.err.println(e.getMessage());

				}
				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);

				}
				resourceMap.put("statementClosed_talendLogs_DB", true);

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB + deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED", nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED", nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED", nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
					if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendLogs_DB")) != null) {
						pstmtToClose_talendLogs_DB.close();
					}
				}

				/**
				 * [talendLogs_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final BUY_EXTRACT_REFERENTIAL BUY_EXTRACT_REFERENTIALClass = new BUY_EXTRACT_REFERENTIAL();

		int exitCode = BUY_EXTRACT_REFERENTIALClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = BUY_EXTRACT_REFERENTIAL.class.getClassLoader()
					.getResourceAsStream("dev/buy_extract_referential_0_11/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = BUY_EXTRACT_REFERENTIAL.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("extractPathReferential", "id_String");
					context.extractPathReferential = (String) context.getProperty("extractPathReferential");
					context.setContextType("SQLSERVER_Server", "id_String");
					context.SQLSERVER_Server = (String) context.getProperty("SQLSERVER_Server");
					context.setContextType("SQLSERVER_Password", "id_Password");
					String pwd_SQLSERVER_Password_value = context.getProperty("SQLSERVER_Password");
					context.SQLSERVER_Password = null;
					if (pwd_SQLSERVER_Password_value != null) {
						if (context_param.containsKey("SQLSERVER_Password")) {// no need to decrypt if it come from
																				// program argument or parent job
																				// runtime
							context.SQLSERVER_Password = pwd_SQLSERVER_Password_value;
						} else if (!pwd_SQLSERVER_Password_value.isEmpty()) {
							try {
								context.SQLSERVER_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_SQLSERVER_Password_value);
								context.put("SQLSERVER_Password", context.SQLSERVER_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("SQLSERVER_AdditionalParams", "id_String");
					context.SQLSERVER_AdditionalParams = (String) context.getProperty("SQLSERVER_AdditionalParams");
					context.setContextType("SQLSERVER_Database", "id_String");
					context.SQLSERVER_Database = (String) context.getProperty("SQLSERVER_Database");
					context.setContextType("SQLSERVER_Port", "id_String");
					context.SQLSERVER_Port = (String) context.getProperty("SQLSERVER_Port");
					context.setContextType("SQLSERVER_Schema", "id_String");
					context.SQLSERVER_Schema = (String) context.getProperty("SQLSERVER_Schema");
					context.setContextType("SQLSERVER_Login", "id_String");
					context.SQLSERVER_Login = (String) context.getProperty("SQLSERVER_Login");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("extractPathReferential")) {
				context.extractPathReferential = (String) parentContextMap.get("extractPathReferential");
			}
			if (parentContextMap.containsKey("SQLSERVER_Server")) {
				context.SQLSERVER_Server = (String) parentContextMap.get("SQLSERVER_Server");
			}
			if (parentContextMap.containsKey("SQLSERVER_Password")) {
				context.SQLSERVER_Password = (java.lang.String) parentContextMap.get("SQLSERVER_Password");
			}
			if (parentContextMap.containsKey("SQLSERVER_AdditionalParams")) {
				context.SQLSERVER_AdditionalParams = (String) parentContextMap.get("SQLSERVER_AdditionalParams");
			}
			if (parentContextMap.containsKey("SQLSERVER_Database")) {
				context.SQLSERVER_Database = (String) parentContextMap.get("SQLSERVER_Database");
			}
			if (parentContextMap.containsKey("SQLSERVER_Port")) {
				context.SQLSERVER_Port = (String) parentContextMap.get("SQLSERVER_Port");
			}
			if (parentContextMap.containsKey("SQLSERVER_Schema")) {
				context.SQLSERVER_Schema = (String) parentContextMap.get("SQLSERVER_Schema");
			}
			if (parentContextMap.containsKey("SQLSERVER_Login")) {
				context.SQLSERVER_Login = (String) parentContextMap.get("SQLSERVER_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SQLSERVER_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}
		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileDelete_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_1) {
			globalMap.put("tFileDelete_1_SUBPROCESS_STATE", -1);

			e_tFileDelete_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_2) {
			globalMap.put("tFileDelete_2_SUBPROCESS_STATE", -1);

			e_tFileDelete_2.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_3) {
			globalMap.put("tFileDelete_3_SUBPROCESS_STATE", -1);

			e_tFileDelete_3.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_4) {
			globalMap.put("tFileDelete_4_SUBPROCESS_STATE", -1);

			e_tFileDelete_4.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_5) {
			globalMap.put("tFileDelete_5_SUBPROCESS_STATE", -1);

			e_tFileDelete_5.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_6) {
			globalMap.put("tFileDelete_6_SUBPROCESS_STATE", -1);

			e_tFileDelete_6.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_7) {
			globalMap.put("tFileDelete_7_SUBPROCESS_STATE", -1);

			e_tFileDelete_7.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_8) {
			globalMap.put("tFileDelete_8_SUBPROCESS_STATE", -1);

			e_tFileDelete_8.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_9) {
			globalMap.put("tFileDelete_9_SUBPROCESS_STATE", -1);

			e_tFileDelete_9.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_10Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_10) {
			globalMap.put("tFileDelete_10_SUBPROCESS_STATE", -1);

			e_tFileDelete_10.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_11Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_11) {
			globalMap.put("tFileDelete_11_SUBPROCESS_STATE", -1);

			e_tFileDelete_11.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_12Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_12) {
			globalMap.put("tFileDelete_12_SUBPROCESS_STATE", -1);

			e_tFileDelete_12.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_13Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_13) {
			globalMap.put("tFileDelete_13_SUBPROCESS_STATE", -1);

			e_tFileDelete_13.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_14Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_14) {
			globalMap.put("tFileDelete_14_SUBPROCESS_STATE", -1);

			e_tFileDelete_14.printStackTrace();

		}
		try {
			errorCode = null;
			tFileDelete_15Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_15) {
			globalMap.put("tFileDelete_15_SUBPROCESS_STATE", -1);

			e_tFileDelete_15.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : BUY_EXTRACT_REFERENTIAL");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 526015 characters generated by Talend Open Studio for Data Integration on the
 * 3 janvier 2024 14:59:27 GMT
 ************************************************************************************************/